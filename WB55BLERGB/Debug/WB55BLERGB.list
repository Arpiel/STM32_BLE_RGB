
WB55BLERGB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08009ee4  08009ee4  00019ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000008  0800a1b4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000028  0800a1d4  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000060  0800a209  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  20000074  0800a21a  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  0800a21a  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800a21a  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   000337a8  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000066b4  00000000  00000000  00054282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002e90  00000000  00000000  0005a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000023de  00000000  00000000  0005d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002cec5  00000000  00000000  0005fba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00033b69  00000000  00000000  0008ca6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001042ef  00000000  00000000  000c05d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000c530  00000000  00000000  001c48c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000065  00000000  00000000  001d0df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	08009ecc 	.word	0x08009ecc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	08009ecc 	.word	0x08009ecc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b970 	b.w	8000484 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	460f      	mov	r7, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14a      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d965      	bls.n	800029e <__udivmoddi4+0xe2>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b143      	cbz	r3, 80001ea <__udivmoddi4+0x2e>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	409f      	lsls	r7, r3
 80001e2:	fa20 f202 	lsr.w	r2, r0, r2
 80001e6:	4317      	orrs	r7, r2
 80001e8:	409c      	lsls	r4, r3
 80001ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001ee:	fa1f f58c 	uxth.w	r5, ip
 80001f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001f6:	0c22      	lsrs	r2, r4, #16
 80001f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000200:	fb01 f005 	mul.w	r0, r1, r5
 8000204:	4290      	cmp	r0, r2
 8000206:	d90a      	bls.n	800021e <__udivmoddi4+0x62>
 8000208:	eb1c 0202 	adds.w	r2, ip, r2
 800020c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000210:	f080 811c 	bcs.w	800044c <__udivmoddi4+0x290>
 8000214:	4290      	cmp	r0, r2
 8000216:	f240 8119 	bls.w	800044c <__udivmoddi4+0x290>
 800021a:	3902      	subs	r1, #2
 800021c:	4462      	add	r2, ip
 800021e:	1a12      	subs	r2, r2, r0
 8000220:	b2a4      	uxth	r4, r4
 8000222:	fbb2 f0fe 	udiv	r0, r2, lr
 8000226:	fb0e 2210 	mls	r2, lr, r0, r2
 800022a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800022e:	fb00 f505 	mul.w	r5, r0, r5
 8000232:	42a5      	cmp	r5, r4
 8000234:	d90a      	bls.n	800024c <__udivmoddi4+0x90>
 8000236:	eb1c 0404 	adds.w	r4, ip, r4
 800023a:	f100 32ff 	add.w	r2, r0, #4294967295
 800023e:	f080 8107 	bcs.w	8000450 <__udivmoddi4+0x294>
 8000242:	42a5      	cmp	r5, r4
 8000244:	f240 8104 	bls.w	8000450 <__udivmoddi4+0x294>
 8000248:	4464      	add	r4, ip
 800024a:	3802      	subs	r0, #2
 800024c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000250:	1b64      	subs	r4, r4, r5
 8000252:	2100      	movs	r1, #0
 8000254:	b11e      	cbz	r6, 800025e <__udivmoddi4+0xa2>
 8000256:	40dc      	lsrs	r4, r3
 8000258:	2300      	movs	r3, #0
 800025a:	e9c6 4300 	strd	r4, r3, [r6]
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d908      	bls.n	8000278 <__udivmoddi4+0xbc>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80ed 	beq.w	8000446 <__udivmoddi4+0x28a>
 800026c:	2100      	movs	r1, #0
 800026e:	e9c6 0500 	strd	r0, r5, [r6]
 8000272:	4608      	mov	r0, r1
 8000274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000278:	fab3 f183 	clz	r1, r3
 800027c:	2900      	cmp	r1, #0
 800027e:	d149      	bne.n	8000314 <__udivmoddi4+0x158>
 8000280:	42ab      	cmp	r3, r5
 8000282:	d302      	bcc.n	800028a <__udivmoddi4+0xce>
 8000284:	4282      	cmp	r2, r0
 8000286:	f200 80f8 	bhi.w	800047a <__udivmoddi4+0x2be>
 800028a:	1a84      	subs	r4, r0, r2
 800028c:	eb65 0203 	sbc.w	r2, r5, r3
 8000290:	2001      	movs	r0, #1
 8000292:	4617      	mov	r7, r2
 8000294:	2e00      	cmp	r6, #0
 8000296:	d0e2      	beq.n	800025e <__udivmoddi4+0xa2>
 8000298:	e9c6 4700 	strd	r4, r7, [r6]
 800029c:	e7df      	b.n	800025e <__udivmoddi4+0xa2>
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xe6>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f382 	clz	r3, r2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	f040 8090 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ac:	1a8a      	subs	r2, r1, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f fe8c 	uxth.w	lr, ip
 80002b6:	2101      	movs	r1, #1
 80002b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002bc:	fb07 2015 	mls	r0, r7, r5, r2
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c6:	fb0e f005 	mul.w	r0, lr, r5
 80002ca:	4290      	cmp	r0, r2
 80002cc:	d908      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002ce:	eb1c 0202 	adds.w	r2, ip, r2
 80002d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f200 80cb 	bhi.w	8000474 <__udivmoddi4+0x2b8>
 80002de:	4645      	mov	r5, r8
 80002e0:	1a12      	subs	r2, r2, r0
 80002e2:	b2a4      	uxth	r4, r4
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f0:	fb0e fe00 	mul.w	lr, lr, r0
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x14e>
 80002f8:	eb1c 0404 	adds.w	r4, ip, r4
 80002fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x14c>
 8000302:	45a6      	cmp	lr, r4
 8000304:	f200 80bb 	bhi.w	800047e <__udivmoddi4+0x2c2>
 8000308:	4610      	mov	r0, r2
 800030a:	eba4 040e 	sub.w	r4, r4, lr
 800030e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000312:	e79f      	b.n	8000254 <__udivmoddi4+0x98>
 8000314:	f1c1 0720 	rsb	r7, r1, #32
 8000318:	408b      	lsls	r3, r1
 800031a:	fa22 fc07 	lsr.w	ip, r2, r7
 800031e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000322:	fa05 f401 	lsl.w	r4, r5, r1
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	40fd      	lsrs	r5, r7
 800032c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000330:	4323      	orrs	r3, r4
 8000332:	fbb5 f8f9 	udiv	r8, r5, r9
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	fb09 5518 	mls	r5, r9, r8, r5
 800033e:	0c1c      	lsrs	r4, r3, #16
 8000340:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000344:	fb08 f50e 	mul.w	r5, r8, lr
 8000348:	42a5      	cmp	r5, r4
 800034a:	fa02 f201 	lsl.w	r2, r2, r1
 800034e:	fa00 f001 	lsl.w	r0, r0, r1
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f108 3aff 	add.w	sl, r8, #4294967295
 800035c:	f080 8088 	bcs.w	8000470 <__udivmoddi4+0x2b4>
 8000360:	42a5      	cmp	r5, r4
 8000362:	f240 8085 	bls.w	8000470 <__udivmoddi4+0x2b4>
 8000366:	f1a8 0802 	sub.w	r8, r8, #2
 800036a:	4464      	add	r4, ip
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	b29d      	uxth	r5, r3
 8000370:	fbb4 f3f9 	udiv	r3, r4, r9
 8000374:	fb09 4413 	mls	r4, r9, r3, r4
 8000378:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800037c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f103 35ff 	add.w	r5, r3, #4294967295
 800038c:	d26c      	bcs.n	8000468 <__udivmoddi4+0x2ac>
 800038e:	45a6      	cmp	lr, r4
 8000390:	d96a      	bls.n	8000468 <__udivmoddi4+0x2ac>
 8000392:	3b02      	subs	r3, #2
 8000394:	4464      	add	r4, ip
 8000396:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800039a:	fba3 9502 	umull	r9, r5, r3, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	42ac      	cmp	r4, r5
 80003a4:	46c8      	mov	r8, r9
 80003a6:	46ae      	mov	lr, r5
 80003a8:	d356      	bcc.n	8000458 <__udivmoddi4+0x29c>
 80003aa:	d053      	beq.n	8000454 <__udivmoddi4+0x298>
 80003ac:	b156      	cbz	r6, 80003c4 <__udivmoddi4+0x208>
 80003ae:	ebb0 0208 	subs.w	r2, r0, r8
 80003b2:	eb64 040e 	sbc.w	r4, r4, lr
 80003b6:	fa04 f707 	lsl.w	r7, r4, r7
 80003ba:	40ca      	lsrs	r2, r1
 80003bc:	40cc      	lsrs	r4, r1
 80003be:	4317      	orrs	r7, r2
 80003c0:	e9c6 7400 	strd	r7, r4, [r6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	f1c3 0120 	rsb	r1, r3, #32
 80003d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d4:	fa20 f201 	lsr.w	r2, r0, r1
 80003d8:	fa25 f101 	lsr.w	r1, r5, r1
 80003dc:	409d      	lsls	r5, r3
 80003de:	432a      	orrs	r2, r5
 80003e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ec:	fb07 1510 	mls	r5, r7, r0, r1
 80003f0:	0c11      	lsrs	r1, r2, #16
 80003f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003f6:	fb00 f50e 	mul.w	r5, r0, lr
 80003fa:	428d      	cmp	r5, r1
 80003fc:	fa04 f403 	lsl.w	r4, r4, r3
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x258>
 8000402:	eb1c 0101 	adds.w	r1, ip, r1
 8000406:	f100 38ff 	add.w	r8, r0, #4294967295
 800040a:	d22f      	bcs.n	800046c <__udivmoddi4+0x2b0>
 800040c:	428d      	cmp	r5, r1
 800040e:	d92d      	bls.n	800046c <__udivmoddi4+0x2b0>
 8000410:	3802      	subs	r0, #2
 8000412:	4461      	add	r1, ip
 8000414:	1b49      	subs	r1, r1, r5
 8000416:	b292      	uxth	r2, r2
 8000418:	fbb1 f5f7 	udiv	r5, r1, r7
 800041c:	fb07 1115 	mls	r1, r7, r5, r1
 8000420:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000424:	fb05 f10e 	mul.w	r1, r5, lr
 8000428:	4291      	cmp	r1, r2
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x282>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f105 38ff 	add.w	r8, r5, #4294967295
 8000434:	d216      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 8000436:	4291      	cmp	r1, r2
 8000438:	d914      	bls.n	8000464 <__udivmoddi4+0x2a8>
 800043a:	3d02      	subs	r5, #2
 800043c:	4462      	add	r2, ip
 800043e:	1a52      	subs	r2, r2, r1
 8000440:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000444:	e738      	b.n	80002b8 <__udivmoddi4+0xfc>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e708      	b.n	800025e <__udivmoddi4+0xa2>
 800044c:	4639      	mov	r1, r7
 800044e:	e6e6      	b.n	800021e <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e6fb      	b.n	800024c <__udivmoddi4+0x90>
 8000454:	4548      	cmp	r0, r9
 8000456:	d2a9      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000458:	ebb9 0802 	subs.w	r8, r9, r2
 800045c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000460:	3b01      	subs	r3, #1
 8000462:	e7a3      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000464:	4645      	mov	r5, r8
 8000466:	e7ea      	b.n	800043e <__udivmoddi4+0x282>
 8000468:	462b      	mov	r3, r5
 800046a:	e794      	b.n	8000396 <__udivmoddi4+0x1da>
 800046c:	4640      	mov	r0, r8
 800046e:	e7d1      	b.n	8000414 <__udivmoddi4+0x258>
 8000470:	46d0      	mov	r8, sl
 8000472:	e77b      	b.n	800036c <__udivmoddi4+0x1b0>
 8000474:	3d02      	subs	r5, #2
 8000476:	4462      	add	r2, ip
 8000478:	e732      	b.n	80002e0 <__udivmoddi4+0x124>
 800047a:	4608      	mov	r0, r1
 800047c:	e70a      	b.n	8000294 <__udivmoddi4+0xd8>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	e742      	b.n	800030a <__udivmoddi4+0x14e>

08000484 <__aeabi_idiv0>:
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop

08000488 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000488:	b5b0      	push	{r4, r5, r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <APPD_EnableCPU2+0x34>)
 8000490:	1d3c      	adds	r4, r7, #4
 8000492:	461d      	mov	r5, r3
 8000494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800049c:	c403      	stmia	r4!, {r0, r1}
 800049e:	8022      	strh	r2, [r4, #0]
 80004a0:	3402      	adds	r4, #2
 80004a2:	0c13      	lsrs	r3, r2, #16
 80004a4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80004a6:	f008 fa37 	bl	8008918 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	4618      	mov	r0, r3
 80004ae:	f007 fcc8 	bl	8007e42 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004b2:	bf00      	nop
}
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ba:	bf00      	nop
 80004bc:	08009ee4 	.word	0x08009ee4

080004c0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004ce:	f023 0207 	bic.w	r2, r3, #7
 80004d2:	4905      	ldr	r1, [pc, #20]	; (80004e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	58000400 	.word	0x58000400

080004ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80004fa:	4905      	ldr	r1, [pc, #20]	; (8000510 <LL_EXTI_EnableIT_32_63+0x24>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	58000800 	.word	0x58000800

08000514 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000522:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800052e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	cafecafe 	.word	0xcafecafe

08000550 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	608b      	str	r3, [r1, #8]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800057c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800058c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80005c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80005d0:	d101      	bne.n	80005d6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80005e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80005f6:	d101      	bne.n	80005fc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80005f8:	2301      	movs	r3, #1
 80005fa:	e000      	b.n	80005fe <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4313      	orrs	r3, r2
 800061e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4013      	ands	r3, r2
 800062a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800062c:	68fb      	ldr	r3, [r7, #12]
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <LL_DBGMCU_GetDeviceID+0x18>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e0042000 	.word	0xe0042000

08000658 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <LL_DBGMCU_GetRevisionID+0x18>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	0c1b      	lsrs	r3, r3, #16
 8000662:	b29b      	uxth	r3, r3
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e0042000 	.word	0xe0042000

08000674 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	041b      	lsls	r3, r3, #16
 8000686:	431a      	orrs	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	605a      	str	r2, [r3, #4]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	431a      	orrs	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	605a      	str	r2, [r3, #4]
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	041b      	lsls	r3, r3, #16
 80006cc:	431a      	orrs	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	615a      	str	r2, [r3, #20]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
 80006e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	431a      	orrs	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	615a      	str	r2, [r3, #20]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	609a      	str	r2, [r3, #8]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	619a      	str	r2, [r3, #24]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	22ff      	movs	r2, #255	; 0xff
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	22ca      	movs	r2, #202	; 0xca
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2253      	movs	r2, #83	; 0x53
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f023 0207 	bic.w	r2, r3, #7
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	609a      	str	r2, [r3, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <MX_APPE_Config+0x18>)
 800079e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007a2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80007a4:	f000 f824 	bl	80007f0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80007a8:	f000 f864 	bl	8000874 <Config_HSE>

  return;
 80007ac:	bf00      	nop
}
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58004000 	.word	0x58004000

080007b4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80007b8:	f000 f870 	bl	800089c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80007bc:	f000 f888 	bl	80008d0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80007c0:	4903      	ldr	r1, [pc, #12]	; (80007d0 <MX_APPE_Init+0x1c>)
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 f9c2 	bl	8000b4c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80007c8:	f000 f890 	bl	80008ec <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80007cc:	bf00      	nop
}
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000016c 	.word	0x2000016c

080007d4 <Init_Smps>:

void Init_Smps(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80007d8:	bf00      	nop
}
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <Init_Exti>:

void Init_Exti(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80007e6:	2050      	movs	r0, #80	; 0x50
 80007e8:	f7ff fe80 	bl	80004ec <LL_EXTI_EnableIT_32_63>

  return;
 80007ec:	bf00      	nop
}
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80007f4:	f000 f804 	bl	8000800 <Reset_BackupDomain>

  Reset_IPCC();
 80007f8:	f000 f81a 	bl	8000830 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80007fc:	bf00      	nop
}
 80007fe:	bd80      	pop	{r7, pc}

08000800 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000804:	f7ff feda 	bl	80005bc <LL_RCC_IsActiveFlag_PINRST>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00d      	beq.n	800082a <Reset_BackupDomain+0x2a>
 800080e:	f7ff fee8 	bl	80005e2 <LL_RCC_IsActiveFlag_SFTRST>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d108      	bne.n	800082a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000818:	f001 ffd4 	bl	80027c4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800081c:	f001 ffd2 	bl	80027c4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000820:	f7ff feaa 	bl	8000578 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000824:	f7ff feb9 	bl	800059a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000828:	bf00      	nop
 800082a:	bf00      	nop
}
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000834:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000838:	f7ff fee6 	bl	8000608 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800083c:	213f      	movs	r1, #63	; 0x3f
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <Reset_IPCC+0x40>)
 8000840:	f7ff ff5e 	bl	8000700 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000844:	213f      	movs	r1, #63	; 0x3f
 8000846:	480a      	ldr	r0, [pc, #40]	; (8000870 <Reset_IPCC+0x40>)
 8000848:	f7ff ff68 	bl	800071c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800084c:	213f      	movs	r1, #63	; 0x3f
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <Reset_IPCC+0x40>)
 8000850:	f7ff ff10 	bl	8000674 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000854:	213f      	movs	r1, #63	; 0x3f
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <Reset_IPCC+0x40>)
 8000858:	f7ff ff2f 	bl	80006ba <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800085c:	213f      	movs	r1, #63	; 0x3f
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <Reset_IPCC+0x40>)
 8000860:	f7ff ff1a 	bl	8000698 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000864:	213f      	movs	r1, #63	; 0x3f
 8000866:	4802      	ldr	r0, [pc, #8]	; (8000870 <Reset_IPCC+0x40>)
 8000868:	f7ff ff39 	bl	80006de <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800086c:	bf00      	nop
}
 800086e:	bd80      	pop	{r7, pc}
 8000870:	58000c00 	.word	0x58000c00

08000874 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800087a:	2000      	movs	r0, #0
 800087c:	f008 f8d8 	bl	8008a30 <OTP_Read>
 8000880:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d005      	beq.n	8000894 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	799b      	ldrb	r3, [r3, #6]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe41 	bl	8000514 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000892:	bf00      	nop
 8000894:	bf00      	nop
}
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <System_Init>:

static void System_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  Init_Smps();
 80008a0:	f7ff ff98 	bl	80007d4 <Init_Smps>

  Init_Exti();
 80008a4:	f7ff ff9d 	bl	80007e2 <Init_Exti>

  Init_Rtc();
 80008a8:	f000 f802 	bl	80008b0 <Init_Rtc>

  return;
 80008ac:	bf00      	nop
}
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <Init_Rtc+0x1c>)
 80008b6:	f7ff ff4c 	bl	8000752 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80008ba:	2100      	movs	r1, #0
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <Init_Rtc+0x1c>)
 80008be:	f7ff ff58 	bl	8000772 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80008c2:	4802      	ldr	r0, [pc, #8]	; (80008cc <Init_Rtc+0x1c>)
 80008c4:	f7ff ff38 	bl	8000738 <LL_RTC_EnableWriteProtection>

  return;
 80008c8:	bf00      	nop
}
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40002800 	.word	0x40002800

080008d0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80008d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80008d8:	f7ff fe3a 	bl	8000550 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80008dc:	f009 f83c 	bl	8009958 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80008e0:	2004      	movs	r0, #4
 80008e2:	f7ff fded 	bl	80004c0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80008e6:	bf00      	nop
}
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80008f2:	f007 fe5b 	bl	80085ac <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <appe_Tl_Init+0x50>)
 80008f8:	2100      	movs	r1, #0
 80008fa:	2004      	movs	r0, #4
 80008fc:	f009 f96a 	bl	8009bd4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <appe_Tl_Init+0x54>)
 8000902:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <appe_Tl_Init+0x58>)
 8000906:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	480e      	ldr	r0, [pc, #56]	; (8000948 <appe_Tl_Init+0x5c>)
 800090e:	f007 fd0f 	bl	8008330 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <appe_Tl_Init+0x60>)
 8000914:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <appe_Tl_Init+0x64>)
 8000918:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <appe_Tl_Init+0x68>)
 800091c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800091e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000922:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4618      	mov	r0, r3
 800092a:	f007 ff81 	bl	8008830 <TL_MM_Init>

  TL_Enable();
 800092e:	f007 fe37 	bl	80085a0 <TL_Enable>

  return;
 8000932:	bf00      	nop
}
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	08008369 	.word	0x08008369
 8000940:	20030734 	.word	0x20030734
 8000944:	08000959 	.word	0x08000959
 8000948:	08000971 	.word	0x08000971
 800094c:	2003094c 	.word	0x2003094c
 8000950:	20030840 	.word	0x20030840
 8000954:	200301f8 	.word	0x200301f8

08000958 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000962:	bf00      	nop
}
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	330b      	adds	r3, #11
 800097e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	b29b      	uxth	r3, r3
 8000986:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800098a:	2b07      	cmp	r3, #7
 800098c:	d81f      	bhi.n	80009ce <APPE_SysUserEvtRx+0x5e>
 800098e:	a201      	add	r2, pc, #4	; (adr r2, 8000994 <APPE_SysUserEvtRx+0x24>)
 8000990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000994:	080009b5 	.word	0x080009b5
 8000998:	080009c7 	.word	0x080009c7
 800099c:	080009cf 	.word	0x080009cf
 80009a0:	080009cf 	.word	0x080009cf
 80009a4:	080009cf 	.word	0x080009cf
 80009a8:	080009cf 	.word	0x080009cf
 80009ac:	080009cf 	.word	0x080009cf
 80009b0:	080009cf 	.word	0x080009cf
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f007 fa6f 	bl	8007e9c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f81b 	bl	80009fa <APPE_SysEvtReadyProcessing>
    break;
 80009c4:	e004      	b.n	80009d0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f806 	bl	80009d8 <APPE_SysEvtError>
    break;
 80009cc:	e000      	b.n	80009d0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80009ce:	bf00      	nop
  }

  return;
 80009d0:	bf00      	nop
}
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	330b      	adds	r3, #11
 80009e6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3302      	adds	r3, #2
 80009ec:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80009ee:	bf00      	nop
}
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b08a      	sub	sp, #40	; 0x28
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	330b      	adds	r3, #11
 8000a1e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	3302      	adds	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d11d      	bne.n	8000a6a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000a2e:	f7ff fd2b 	bl	8000488 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000a32:	230f      	movs	r3, #15
 8000a34:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000a36:	237f      	movs	r3, #127	; 0x7f
 8000a38:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000a3a:	f7ff fe0d 	bl	8000658 <LL_DBGMCU_GetRevisionID>
 8000a3e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000a46:	f7ff fdf9 	bl	800063c <LL_DBGMCU_GetDeviceID>
 8000a4a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 fa0a 	bl	8007e70 <SHCI_C2_Config>

    APP_BLE_Init();
 8000a5c:	f008 f8f2 	bl	8008c44 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000a60:	2100      	movs	r1, #0
 8000a62:	2001      	movs	r0, #1
 8000a64:	f008 ff8a 	bl	800997c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000a68:	e007      	b.n	8000a7a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d103      	bne.n	8000a7a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
  return;
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
}
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8a:	f008 ffa7 	bl	80099dc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000a96:	bf00      	nop
}
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8000aae:	f008 ff95 	bl	80099dc <UTIL_SEQ_Run>
  return;
 8000ab2:	bf00      	nop
}
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2004      	movs	r0, #4
 8000ac6:	f009 f8a7 	bl	8009c18 <UTIL_SEQ_SetTask>
  return;
 8000aca:	bf00      	nop
}
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000ada:	2002      	movs	r0, #2
 8000adc:	f009 f908 	bl	8009cf0 <UTIL_SEQ_SetEvt>
  return;
 8000ae0:	bf00      	nop
}
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f009 f91d 	bl	8009d30 <UTIL_SEQ_WaitEvt>
  return;
 8000af6:	bf00      	nop
}
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <LL_EXTI_EnableIT_0_31>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <LL_EXTI_EnableIT_0_31+0x24>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58000800 	.word	0x58000800

08000b28 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4904      	ldr	r1, [pc, #16]	; (8000b48 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	600b      	str	r3, [r1, #0]

}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	58000800 	.word	0x58000800

08000b4c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000b58:	4b5e      	ldr	r3, [pc, #376]	; (8000cd4 <HW_TS_Init+0x188>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	22ca      	movs	r2, #202	; 0xca
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b60:	4b5c      	ldr	r3, [pc, #368]	; (8000cd4 <HW_TS_Init+0x188>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2253      	movs	r2, #83	; 0x53
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000b68:	4b5b      	ldr	r3, [pc, #364]	; (8000cd8 <HW_TS_Init+0x18c>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	4a5a      	ldr	r2, [pc, #360]	; (8000cd8 <HW_TS_Init+0x18c>)
 8000b6e:	f043 0320 	orr.w	r3, r3, #32
 8000b72:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000b74:	4b58      	ldr	r3, [pc, #352]	; (8000cd8 <HW_TS_Init+0x18c>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f1c3 0304 	rsb	r3, r3, #4
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b55      	ldr	r3, [pc, #340]	; (8000cdc <HW_TS_Init+0x190>)
 8000b88:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000b8a:	4b53      	ldr	r3, [pc, #332]	; (8000cd8 <HW_TS_Init+0x18c>)
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000b92:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000b96:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	fa92 f2a2 	rbit	r2, r2
 8000b9e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d101      	bne.n	8000bae <HW_TS_Init+0x62>
  {
    return 32U;
 8000baa:	2220      	movs	r2, #32
 8000bac:	e003      	b.n	8000bb6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	40d3      	lsrs	r3, r2
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b48      	ldr	r3, [pc, #288]	; (8000ce0 <HW_TS_Init+0x194>)
 8000bc0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000bc2:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <HW_TS_Init+0x18c>)
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	3301      	adds	r3, #1
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b44      	ldr	r3, [pc, #272]	; (8000ce4 <HW_TS_Init+0x198>)
 8000bd4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000bd6:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <HW_TS_Init+0x198>)
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4a40      	ldr	r2, [pc, #256]	; (8000ce0 <HW_TS_Init+0x194>)
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	fb02 f303 	mul.w	r3, r2, r3
 8000be4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000be8:	4a3c      	ldr	r2, [pc, #240]	; (8000cdc <HW_TS_Init+0x190>)
 8000bea:	7812      	ldrb	r2, [r2, #0]
 8000bec:	40d3      	lsrs	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d904      	bls.n	8000c04 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <HW_TS_Init+0x19c>)
 8000bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c00:	801a      	strh	r2, [r3, #0]
 8000c02:	e003      	b.n	8000c0c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <HW_TS_Init+0x19c>)
 8000c0a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c10:	f7ff ff8a 	bl	8000b28 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000c14:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c18:	f7ff ff72 	bl	8000b00 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d13d      	bne.n	8000c9e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c22:	4b32      	ldr	r3, [pc, #200]	; (8000cec <HW_TS_Init+0x1a0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000c28:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <HW_TS_Init+0x1a4>)
 8000c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	77fb      	strb	r3, [r7, #31]
 8000c34:	e00c      	b.n	8000c50 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000c36:	7ffa      	ldrb	r2, [r7, #31]
 8000c38:	492e      	ldr	r1, [pc, #184]	; (8000cf4 <HW_TS_Init+0x1a8>)
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	440b      	add	r3, r1
 8000c44:	330c      	adds	r3, #12
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000c4a:	7ffb      	ldrb	r3, [r7, #31]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	77fb      	strb	r3, [r7, #31]
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	2b05      	cmp	r3, #5
 8000c54:	d9ef      	bls.n	8000c36 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <HW_TS_Init+0x1ac>)
 8000c58:	2206      	movs	r2, #6
 8000c5a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HW_TS_Init+0x188>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HW_TS_Init+0x188>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c6a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HW_TS_Init+0x188>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HW_TS_Init+0x188>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c7c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HW_TS_Init+0x1b0>)
 8000c80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c84:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 ffdd 	bl	8001c46 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HW_TS_Init+0x188>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689a      	ldr	r2, [r3, #8]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HW_TS_Init+0x188>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	e009      	b.n	8000cb2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HW_TS_Init+0x188>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 ffbc 	bl	8001c2a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HW_TS_Init+0x188>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	22ff      	movs	r2, #255	; 0xff
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f000 ff7f 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 ff96 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

  return;
 8000cca:	bf00      	nop
}
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000016c 	.word	0x2000016c
 8000cd8:	40002800 	.word	0x40002800
 8000cdc:	20000129 	.word	0x20000129
 8000ce0:	2000012a 	.word	0x2000012a
 8000ce4:	2000012c 	.word	0x2000012c
 8000ce8:	2000012e 	.word	0x2000012e
 8000cec:	20000128 	.word	0x20000128
 8000cf0:	20000124 	.word	0x20000124
 8000cf4:	20000090 	.word	0x20000090
 8000cf8:	20000120 	.word	0x20000120
 8000cfc:	58000800 	.word	0x58000800

08000d00 <LL_RCC_LSE_SetDriveCapability>:
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d10:	f023 0218 	bic.w	r2, r3, #24
 8000d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_AHB1_GRP1_EnableClock>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d50:	68fb      	ldr	r3, [r7, #12]
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <LL_AHB2_GRP1_EnableClock>:
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fd78 	bl	8001888 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000d98:	f7ff fcfe 	bl	8000798 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f828 	bl	8000df0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000da0:	f000 f89e 	bl	8000ee0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8000da4:	f000 f8bc 	bl	8000f20 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da8:	f000 fa60 	bl	800126c <MX_GPIO_Init>
  MX_DMA_Init();
 8000dac:	f000 fa4c 	bl	8001248 <MX_DMA_Init>
  MX_USB_PCD_Init();
 8000db0:	f000 fa22 	bl	80011f8 <MX_USB_PCD_Init>
  MX_MEMORYMAP_Init();
 8000db4:	f000 f8c8 	bl	8000f48 <MX_MEMORYMAP_Init>
  MX_RTC_Init();
 8000db8:	f000 f8d4 	bl	8000f64 <MX_RTC_Init>
  MX_TIM1_Init();
 8000dbc:	f000 f906 	bl	8000fcc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000dc0:	f000 f9cc 	bl	800115c <MX_USART1_UART_Init>
  MX_RF_Init();
 8000dc4:	f000 f8c7 	bl	8000f56 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4808      	ldr	r0, [pc, #32]	; (8000dec <main+0x5c>)
 8000dcc:	f003 fd30 	bl	8004830 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <main+0x5c>)
 8000dd4:	f003 fd2c 	bl	8004830 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <main+0x5c>)
 8000ddc:	f003 fd28 	bl	8004830 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8000de0:	f7ff fce8 	bl	80007b4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8000de4:	f7ff fe4d 	bl	8000a82 <MX_APPE_Process>
 8000de8:	e7fc      	b.n	8000de4 <main+0x54>
 8000dea:	bf00      	nop
 8000dec:	20000190 	.word	0x20000190

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09a      	sub	sp, #104	; 0x68
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	2248      	movs	r2, #72	; 0x48
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f009 f82a 	bl	8009e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e24:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f023 0303 	bic.w	r3, r3, #3
 8000e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e3a:	f001 fcc3 	bl	80027c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff ff5e 	bl	8000d00 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <SystemClock_Config+0xec>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e4c:	4a23      	ldr	r2, [pc, #140]	; (8000edc <SystemClock_Config+0xec>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <SystemClock_Config+0xec>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000e60:	232f      	movs	r3, #47	; 0x2f
 8000e62:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e74:	2301      	movs	r3, #1
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e78:	2340      	movs	r3, #64	; 0x40
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e80:	2360      	movs	r3, #96	; 0x60
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e84:	2305      	movs	r3, #5
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 f82b 	bl	8002eec <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e9c:	f000 fa2e 	bl	80012fc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000ea0:	236f      	movs	r3, #111	; 0x6f
 8000ea2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fb87 	bl	80035d4 <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ecc:	f000 fa16 	bl	80012fc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ed0:	f003 f942 	bl	8004158 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ed4:	bf00      	nop
 8000ed6:	3768      	adds	r7, #104	; 0x68
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	58000400 	.word	0x58000400

08000ee0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2250      	movs	r2, #80	; 0x50
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f008 ffb3 	bl	8009e58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000ef2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ef6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8000ef8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000efc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000efe:	2300      	movs	r3, #0
 8000f00:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	463b      	mov	r3, r7
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 ffaf 	bl	8003e6c <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000f14:	f000 f9f2 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f18:	bf00      	nop
 8000f1a:	3750      	adds	r7, #80	; 0x50
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_IPCC_Init+0x20>)
 8000f26:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <MX_IPCC_Init+0x24>)
 8000f28:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_IPCC_Init+0x20>)
 8000f2c:	f001 fac0 	bl	80024b0 <HAL_IPCC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000f36:	f000 f9e1 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000130 	.word	0x20000130
 8000f44:	58000c00 	.word	0x58000c00

08000f48 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f6a:	4a17      	ldr	r2, [pc, #92]	; (8000fc8 <MX_RTC_Init+0x64>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f76:	220f      	movs	r2, #15
 8000f78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f9a:	480a      	ldr	r0, [pc, #40]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000f9c:	f003 f9f4 	bl	8004388 <HAL_RTC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000fa6:	f000 f9a9 	bl	80012fc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_RTC_Init+0x60>)
 8000fb0:	f003 faea 	bl	8004588 <HAL_RTCEx_SetWakeUpTimer>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8000fba:	f000 f99f 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000016c 	.word	0x2000016c
 8000fc8:	40002800 	.word	0x40002800

08000fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09c      	sub	sp, #112	; 0x70
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2234      	movs	r2, #52	; 0x34
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f008 ff26 	bl	8009e58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100c:	4b51      	ldr	r3, [pc, #324]	; (8001154 <MX_TIM1_Init+0x188>)
 800100e:	4a52      	ldr	r2, [pc, #328]	; (8001158 <MX_TIM1_Init+0x18c>)
 8001010:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001012:	4b50      	ldr	r3, [pc, #320]	; (8001154 <MX_TIM1_Init+0x188>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <MX_TIM1_Init+0x188>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256;
 800101e:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <MX_TIM1_Init+0x188>)
 8001020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001024:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b4b      	ldr	r3, [pc, #300]	; (8001154 <MX_TIM1_Init+0x188>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102c:	4b49      	ldr	r3, [pc, #292]	; (8001154 <MX_TIM1_Init+0x188>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b48      	ldr	r3, [pc, #288]	; (8001154 <MX_TIM1_Init+0x188>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001038:	4846      	ldr	r0, [pc, #280]	; (8001154 <MX_TIM1_Init+0x188>)
 800103a:	f003 fb40 	bl	80046be <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001044:	f000 f95a 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001052:	4619      	mov	r1, r3
 8001054:	483f      	ldr	r0, [pc, #252]	; (8001154 <MX_TIM1_Init+0x188>)
 8001056:	f003 fdd9 	bl	8004c0c <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001060:	f000 f94c 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001064:	483b      	ldr	r0, [pc, #236]	; (8001154 <MX_TIM1_Init+0x188>)
 8001066:	f003 fb81 	bl	800476c <HAL_TIM_PWM_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001070:	f000 f944 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001080:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001084:	4619      	mov	r1, r3
 8001086:	4833      	ldr	r0, [pc, #204]	; (8001154 <MX_TIM1_Init+0x188>)
 8001088:	f004 fa2e 	bl	80054e8 <HAL_TIMEx_MasterConfigSynchronization>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001092:	f000 f933 	bl	80012fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001096:	2360      	movs	r3, #96	; 0x60
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4826      	ldr	r0, [pc, #152]	; (8001154 <MX_TIM1_Init+0x188>)
 80010bc:	f003 fc92 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010c6:	f000 f919 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ce:	2204      	movs	r2, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4820      	ldr	r0, [pc, #128]	; (8001154 <MX_TIM1_Init+0x188>)
 80010d4:	f003 fc86 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010de:	f000 f90d 	bl	80012fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010e6:	2208      	movs	r2, #8
 80010e8:	4619      	mov	r1, r3
 80010ea:	481a      	ldr	r0, [pc, #104]	; (8001154 <MX_TIM1_Init+0x188>)
 80010ec:	f003 fc7a 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80010f6:	f000 f901 	bl	80012fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM1_Init+0x188>)
 8001138:	f004 fa36 	bl	80055a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001142:	f000 f8db 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM1_Init+0x188>)
 8001148:	f000 f9c6 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 800114c:	bf00      	nop
 800114e:	3770      	adds	r7, #112	; 0x70
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000190 	.word	0x20000190
 8001158:	40012c00 	.word	0x40012c00

0800115c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <MX_USART1_UART_Init+0x98>)
 8001164:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 8001168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800116c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 8001170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001174:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 8001184:	220c      	movs	r2, #12
 8001186:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 80011a8:	f004 faae 	bl	8005708 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80011b2:	f000 f8a3 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 80011ba:	f005 fb12 	bl	80067e2 <HAL_UARTEx_SetTxFifoThreshold>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80011c4:	f000 f89a 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 80011cc:	f005 fb47 	bl	800685e <HAL_UARTEx_SetRxFifoThreshold>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80011d6:	f000 f891 	bl	80012fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART1_UART_Init+0x94>)
 80011dc:	f005 fac8 	bl	8006770 <HAL_UARTEx_DisableFifoMode>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80011e6:	f000 f889 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200001dc 	.word	0x200001dc
 80011f4:	40013800 	.word	0x40013800

080011f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USB_PCD_Init+0x48>)
 80011fe:	4a11      	ldr	r2, [pc, #68]	; (8001244 <MX_USB_PCD_Init+0x4c>)
 8001200:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_USB_PCD_Init+0x48>)
 8001204:	2208      	movs	r2, #8
 8001206:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <MX_USB_PCD_Init+0x48>)
 800120a:	2202      	movs	r2, #2
 800120c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USB_PCD_Init+0x48>)
 8001210:	2202      	movs	r2, #2
 8001212:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <MX_USB_PCD_Init+0x48>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USB_PCD_Init+0x48>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_USB_PCD_Init+0x48>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USB_PCD_Init+0x48>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <MX_USB_PCD_Init+0x48>)
 800122e:	f001 f9c5 	bl	80025bc <HAL_PCD_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001238:	f000 f860 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200002d0 	.word	0x200002d0
 8001244:	40006800 	.word	0x40006800

08001248 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800124c:	2004      	movs	r0, #4
 800124e:	f7ff fd6d 	bl	8000d2c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff fd6a 	bl	8000d2c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	200b      	movs	r0, #11
 800125e:	f000 fcb0 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001262:	200b      	movs	r0, #11
 8001264:	f000 fcc7 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001280:	2004      	movs	r0, #4
 8001282:	f7ff fd6c 	bl	8000d5e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff fd69 	bl	8000d5e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	2002      	movs	r0, #2
 800128e:	f7ff fd66 	bl	8000d5e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	2008      	movs	r0, #8
 8001294:	f7ff fd63 	bl	8000d5e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2123      	movs	r1, #35	; 0x23
 800129c:	4814      	ldr	r0, [pc, #80]	; (80012f0 <MX_GPIO_Init+0x84>)
 800129e:	f001 f8cb 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012a2:	2310      	movs	r3, #16
 80012a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4810      	ldr	r0, [pc, #64]	; (80012f4 <MX_GPIO_Init+0x88>)
 80012b4:	f000 ff50 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80012b8:	2323      	movs	r3, #35	; 0x23
 80012ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <MX_GPIO_Init+0x84>)
 80012ce:	f000 ff43 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80012d2:	2303      	movs	r3, #3
 80012d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012da:	2301      	movs	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_GPIO_Init+0x8c>)
 80012e4:	f000 ff38 	bl	8002158 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	48000400 	.word	0x48000400
 80012f4:	48000800 	.word	0x48000800
 80012f8:	48000c00 	.word	0x48000c00

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>

08001306 <LL_RCC_EnableRTC>:
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_AHB2_GRP1_EnableClock>:
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4313      	orrs	r3, r2
 800133e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800134c:	68fb      	ldr	r3, [r7, #12]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_AHB3_GRP1_EnableClock>:
{
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4313      	orrs	r3, r2
 8001370:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4013      	ands	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001398:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800139a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b0:	68fb      	ldr	r3, [r7, #12]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4013      	ands	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80013f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013f8:	f7ff ffaf 	bl	800135a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	202e      	movs	r0, #46	; 0x2e
 8001402:	f000 fbde 	bl	8001bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001406:	202e      	movs	r0, #46	; 0x2e
 8001408:	f000 fbf5 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <HAL_IPCC_MspInit+0x44>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d113      	bne.n	800144a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001422:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001426:	f7ff ff98 	bl	800135a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	202c      	movs	r0, #44	; 0x2c
 8001430:	f000 fbc7 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001434:	202c      	movs	r0, #44	; 0x2c
 8001436:	f000 fbde 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	202d      	movs	r0, #45	; 0x2d
 8001440:	f000 fbbf 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001444:	202d      	movs	r0, #45	; 0x2d
 8001446:	f000 fbd6 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	58000c00 	.word	0x58000c00

08001458 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b096      	sub	sp, #88	; 0x58
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2250      	movs	r2, #80	; 0x50
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f008 fcf5 	bl	8009e58 <memset>
  if(hrtc->Instance==RTC)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_RTC_MspInit+0x54>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d115      	bne.n	80014a4 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800147c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800147e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001482:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fcef 	bl	8003e6c <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001494:	f7ff ff32 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001498:	f7ff ff35 	bl	8001306 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800149c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014a0:	f7ff ff74 	bl	800138c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3758      	adds	r7, #88	; 0x58
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40002800 	.word	0x40002800

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <HAL_TIM_Base_MspInit+0x24>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d103      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80014c6:	f7ff ff7a 	bl	80013be <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40012c00 	.word	0x40012c00

080014d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_TIM_MspPostInit+0x54>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d114      	bne.n	8001524 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff ff14 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001500:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001504:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001512:	2301      	movs	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f000 fe1a 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40012c00 	.word	0x40012c00

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b09c      	sub	sp, #112	; 0x70
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2250      	movs	r2, #80	; 0x50
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f008 fc81 	bl	8009e58 <memset>
  if(huart->Instance==USART1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <HAL_UART_MspInit+0xe4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d155      	bne.n	800160c <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001560:	2301      	movs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fc7d 	bl	8003e6c <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001578:	f7ff fec0 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800157c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001580:	f7ff ff1d 	bl	80013be <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	2002      	movs	r0, #2
 8001586:	f7ff fecf 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800158a:	23c0      	movs	r3, #192	; 0xc0
 800158c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001592:	2301      	movs	r3, #1
 8001594:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800159a:	2307      	movs	r3, #7
 800159c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a2:	4619      	mov	r1, r3
 80015a4:	481c      	ldr	r0, [pc, #112]	; (8001618 <HAL_UART_MspInit+0xe8>)
 80015a6:	f000 fdd7 	bl	8002158 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_UART_MspInit+0xec>)
 80015ac:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <HAL_UART_MspInit+0xf0>)
 80015ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_UART_MspInit+0xec>)
 80015b2:	220f      	movs	r2, #15
 80015b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_UART_MspInit+0xec>)
 80015b8:	2210      	movs	r2, #16
 80015ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_UART_MspInit+0xec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_UART_MspInit+0xec>)
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_UART_MspInit+0xec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_UART_MspInit+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_UART_MspInit+0xec>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_UART_MspInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <HAL_UART_MspInit+0xec>)
 80015e2:	f000 fb3f 	bl	8001c64 <HAL_DMA_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80015ec:	f7ff fe86 	bl	80012fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_UART_MspInit+0xec>)
 80015f4:	67da      	str	r2, [r3, #124]	; 0x7c
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_UART_MspInit+0xec>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2024      	movs	r0, #36	; 0x24
 8001602:	f000 fade 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001606:	2024      	movs	r0, #36	; 0x24
 8001608:	f000 faf5 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3770      	adds	r7, #112	; 0x70
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40013800 	.word	0x40013800
 8001618:	48000400 	.word	0x48000400
 800161c:	20000270 	.word	0x20000270
 8001620:	40020008 	.word	0x40020008

08001624 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b09c      	sub	sp, #112	; 0x70
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2250      	movs	r2, #80	; 0x50
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f008 fc07 	bl	8009e58 <memset>
  if(hpcd->Instance==USB)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <HAL_PCD_MspInit+0xa8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d136      	bne.n	80016c2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001658:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800165a:	2318      	movs	r3, #24
 800165c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800165e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001662:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001668:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800166a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800166e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001674:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001676:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fbf3 	bl	8003e6c <HAL_RCCEx_PeriphCLKConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800168c:	f7ff fe36 	bl	80012fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fe49 	bl	8001328 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001696:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800169a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80016a8:	230a      	movs	r3, #10
 80016aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b6:	f000 fd4f 	bl	8002158 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80016ba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80016be:	f7ff fe65 	bl	800138c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3770      	adds	r7, #112	; 0x70
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40006800 	.word	0x40006800

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171c:	f000 f90e 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA1_Channel1_IRQHandler+0x10>)
 800172a:	f000 fc01 	bl	8001f30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000270 	.word	0x20000270

08001738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USART1_IRQHandler+0x10>)
 800173e:	f004 f833 	bl	80057a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200001dc 	.word	0x200001dc

0800174c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001750:	f007 ffc4 	bl	80096dc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800175c:	f007 fff4 	bl	8009748 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001768:	f000 fe7e 	bl	8002468 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <SystemInit+0x98>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800177a:	4a23      	ldr	r2, [pc, #140]	; (8001808 <SystemInit+0x98>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001798:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800179c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800179e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <SystemInit+0x9c>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ba:	f023 0305 	bic.w	r3, r3, #5
 80017be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017da:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <SystemInit+0xa0>)
 80017dc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <SystemInit+0xa0>)
 80017e4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	faf6fefb 	.word	0xfaf6fefb
 8001810:	22041000 	.word	0x22041000

08001814 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001814:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001816:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001818:	3304      	adds	r3, #4

0800181a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800181e:	d3f9      	bcc.n	8001814 <CopyDataInit>
  bx lr
 8001820:	4770      	bx	lr

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001822:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001824:	3004      	adds	r0, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001826:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>
  bx lr
 800182a:	4770      	bx	lr

0800182c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800182e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001830:	f7ff ff9e 	bl	8001770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <LoopForever+0x6>)
 8001836:	490c      	ldr	r1, [pc, #48]	; (8001868 <LoopForever+0xa>)
 8001838:	4a0c      	ldr	r2, [pc, #48]	; (800186c <LoopForever+0xe>)
 800183a:	2300      	movs	r3, #0
 800183c:	f7ff ffed 	bl	800181a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <LoopForever+0x12>)
 8001842:	490c      	ldr	r1, [pc, #48]	; (8001874 <LoopForever+0x16>)
 8001844:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <LoopForever+0x1a>)
 8001846:	2300      	movs	r3, #0
 8001848:	f7ff ffe7 	bl	800181a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <LoopForever+0x1e>)
 800184e:	490c      	ldr	r1, [pc, #48]	; (8001880 <LoopForever+0x22>)
 8001850:	2300      	movs	r3, #0
 8001852:	f7ff ffe8 	bl	8001826 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001856:	f008 fb07 	bl	8009e68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800185a:	f7ff fa99 	bl	8000d90 <main>

0800185e <LoopForever>:

LoopForever:
  b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   r0, =_estack
 8001860:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001864:	20000008 	.word	0x20000008
 8001868:	20000028 	.word	0x20000028
 800186c:	0800a1b4 	.word	0x0800a1b4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001870:	200301e4 	.word	0x200301e4
 8001874:	20030a67 	.word	0x20030a67
 8001878:	0800a21a 	.word	0x0800a21a
  INIT_BSS _sbss, _ebss
 800187c:	20000074 	.word	0x20000074
 8001880:	20000780 	.word	0x20000780

08001884 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC1_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_Init+0x3c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_Init+0x3c>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189e:	2003      	movs	r0, #3
 80018a0:	f000 f984 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 f80f 	bl	80018c8 <HAL_InitTick>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	e001      	b.n	80018ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b6:	f7ff fd9b 	bl	80013f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ba:	79fb      	ldrb	r3, [r7, #7]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	58004000 	.word	0x58004000

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_InitTick+0x6c>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d024      	beq.n	8001926 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018dc:	f002 f826 	bl	800392c <HAL_RCC_GetHCLKFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_InitTick+0x6c>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f98c 	bl	8001c12 <HAL_SYSTICK_Config>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	d809      	bhi.n	800191a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001906:	2200      	movs	r2, #0
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
 800190e:	f000 f958 	bl	8001bc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_InitTick+0x70>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e007      	b.n	800192a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e004      	b.n	800192a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e001      	b.n	800192a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000010 	.word	0x20000010
 8001938:	2000000c 	.word	0x2000000c

0800193c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000010 	.word	0x20000010
 8001960:	200005c4 	.word	0x200005c4

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200005c4 	.word	0x200005c4

0800197c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_GetTickPrio+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000000c 	.word	0x2000000c

08001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c6:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	60d3      	str	r3, [r2, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <__NVIC_GetPriorityGrouping+0x18>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0a1b      	lsrs	r3, r3, #8
 80019e6:	f003 0307 	and.w	r3, r3, #7
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db0b      	blt.n	8001a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	f003 021f 	and.w	r2, r3, #31
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <__NVIC_EnableIRQ+0x38>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	095b      	lsrs	r3, r3, #5
 8001a18:	2001      	movs	r0, #1
 8001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000e100 	.word	0xe000e100

08001a34 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0c      	blt.n	8001a60 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <__NVIC_SetPendingIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	3340      	adds	r3, #64	; 0x40
 8001a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0c      	blt.n	8001a9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <__NVIC_ClearPendingIRQ+0x38>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	3360      	adds	r3, #96	; 0x60
 8001a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	; (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff8e 	bl	8001aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff feed 	bl	8001994 <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff04 	bl	80019dc <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff90 	bl	8001b00 <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5f 	bl	8001aac <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fef7 	bl	80019f8 <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa4 	bl	8001b68 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fefb 	bl	8001a34 <__NVIC_SetPendingIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff0b 	bl	8001a70 <__NVIC_ClearPendingIRQ>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e08e      	b.n	8001d94 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_DMA_Init+0x138>)
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d80f      	bhi.n	8001ca2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b45      	ldr	r3, [pc, #276]	; (8001da0 <HAL_DMA_Init+0x13c>)
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a45      	ldr	r2, [pc, #276]	; (8001da4 <HAL_DMA_Init+0x140>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	009a      	lsls	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <HAL_DMA_Init+0x144>)
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001ca0:	e00e      	b.n	8001cc0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <HAL_DMA_Init+0x148>)
 8001caa:	4413      	add	r3, r2
 8001cac:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <HAL_DMA_Init+0x140>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	009a      	lsls	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a3c      	ldr	r2, [pc, #240]	; (8001db0 <HAL_DMA_Init+0x14c>)
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f9bc 	bl	8002090 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d20:	d102      	bne.n	8001d28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001d34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <HAL_DMA_Init+0x106>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d80c      	bhi.n	8001d6a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f9db 	bl	800210c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	e008      	b.n	8001d7c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40020407 	.word	0x40020407
 8001da0:	bffdfff8 	.word	0xbffdfff8
 8001da4:	cccccccd 	.word	0xcccccccd
 8001da8:	40020000 	.word	0x40020000
 8001dac:	bffdfbf8 	.word	0xbffdfbf8
 8001db0:	40020400 	.word	0x40020400

08001db4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e04f      	b.n	8001e66 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d008      	beq.n	8001de4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e040      	b.n	8001e66 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 020e 	bic.w	r2, r2, #14
 8001df2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	f003 021c 	and.w	r2, r3, #28
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d005      	beq.n	8001e96 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e047      	b.n	8001f26 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 020e 	bic.w	r2, r2, #14
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f003 021c 	and.w	r2, r3, #28
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ee2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00c      	beq.n	8001f06 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001efa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
    }
  }
  return status;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f003 031c 	and.w	r3, r3, #28
 8001f50:	2204      	movs	r2, #4
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d026      	beq.n	8001faa <HAL_DMA_IRQHandler+0x7a>
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d021      	beq.n	8001faa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d107      	bne.n	8001f84 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0204 	bic.w	r2, r2, #4
 8001f82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	f003 021c 	and.w	r2, r3, #28
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2104      	movs	r1, #4
 8001f92:	fa01 f202 	lsl.w	r2, r1, r2
 8001f96:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d071      	beq.n	8002084 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001fa8:	e06c      	b.n	8002084 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f003 031c 	and.w	r3, r3, #28
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d02e      	beq.n	800201c <HAL_DMA_IRQHandler+0xec>
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d029      	beq.n	800201c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10b      	bne.n	8001fee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 020a 	bic.w	r2, r2, #10
 8001fe4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f003 021c 	and.w	r2, r3, #28
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8002000:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d038      	beq.n	8002084 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800201a:	e033      	b.n	8002084 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f003 031c 	and.w	r3, r3, #28
 8002024:	2208      	movs	r2, #8
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d02a      	beq.n	8002086 <HAL_DMA_IRQHandler+0x156>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d025      	beq.n	8002086 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 020e 	bic.w	r2, r2, #14
 8002048:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f003 021c 	and.w	r2, r3, #28
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f202 	lsl.w	r2, r1, r2
 800205c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002084:	bf00      	nop
 8002086:	bf00      	nop
}
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d80a      	bhi.n	80020ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6493      	str	r3, [r2, #72]	; 0x48
 80020b8:	e007      	b.n	80020ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	009a      	lsls	r2, r3, #2
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80020c4:	4413      	add	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3b08      	subs	r3, #8
 80020d2:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80020e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	2201      	movs	r2, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40020407 	.word	0x40020407
 8002100:	4002081c 	.word	0x4002081c
 8002104:	cccccccd 	.word	0xcccccccd
 8002108:	40020880 	.word	0x40020880

0800210c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800211c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	461a      	mov	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002130:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3b01      	subs	r3, #1
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2201      	movs	r2, #1
 800213c:	409a      	lsls	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	1000823f 	.word	0x1000823f
 8002154:	40020940 	.word	0x40020940

08002158 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002166:	e14c      	b.n	8002402 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 813e 	beq.w	80023fc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d005      	beq.n	8002198 <HAL_GPIO_Init+0x40>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 0201 	and.w	r2, r3, #1
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b03      	cmp	r3, #3
 8002204:	d017      	beq.n	8002236 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d123      	bne.n	800228a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	6939      	ldr	r1, [r7, #16]
 8002286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0203 	and.w	r2, r3, #3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8098 	beq.w	80023fc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80022cc:	4a54      	ldr	r2, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x2c8>)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022f6:	d019      	beq.n	800232c <HAL_GPIO_Init+0x1d4>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a4a      	ldr	r2, [pc, #296]	; (8002424 <HAL_GPIO_Init+0x2cc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d013      	beq.n	8002328 <HAL_GPIO_Init+0x1d0>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a49      	ldr	r2, [pc, #292]	; (8002428 <HAL_GPIO_Init+0x2d0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00d      	beq.n	8002324 <HAL_GPIO_Init+0x1cc>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_GPIO_Init+0x2d4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <HAL_GPIO_Init+0x1c8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a47      	ldr	r2, [pc, #284]	; (8002430 <HAL_GPIO_Init+0x2d8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_GPIO_Init+0x1c4>
 8002318:	2304      	movs	r3, #4
 800231a:	e008      	b.n	800232e <HAL_GPIO_Init+0x1d6>
 800231c:	2307      	movs	r3, #7
 800231e:	e006      	b.n	800232e <HAL_GPIO_Init+0x1d6>
 8002320:	2303      	movs	r3, #3
 8002322:	e004      	b.n	800232e <HAL_GPIO_Init+0x1d6>
 8002324:	2302      	movs	r3, #2
 8002326:	e002      	b.n	800232e <HAL_GPIO_Init+0x1d6>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_GPIO_Init+0x1d6>
 800232c:	2300      	movs	r3, #0
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	f002 0203 	and.w	r2, r2, #3
 8002334:	0092      	lsls	r2, r2, #2
 8002336:	4093      	lsls	r3, r2
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800233e:	4938      	ldr	r1, [pc, #224]	; (8002420 <HAL_GPIO_Init+0x2c8>)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800234c:	4b39      	ldr	r3, [pc, #228]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002370:	4a30      	ldr	r2, [pc, #192]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002376:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800239a:	4a26      	ldr	r2, [pc, #152]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 80023a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023c6:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 80023d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_GPIO_Init+0x2dc>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	f47f aeab 	bne.w	8002168 <HAL_GPIO_Init+0x10>
  }
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40010000 	.word	0x40010000
 8002424:	48000400 	.word	0x48000400
 8002428:	48000800 	.word	0x48000800
 800242c:	48000c00 	.word	0x48000c00
 8002430:	48001000 	.word	0x48001000
 8002434:	58000800 	.word	0x58000800

08002438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002454:	e002      	b.n	800245c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_HSEM_IRQHandler+0x30>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_HSEM_IRQHandler+0x30>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	43db      	mvns	r3, r3
 800247c:	4906      	ldr	r1, [pc, #24]	; (8002498 <HAL_HSEM_IRQHandler+0x30>)
 800247e:	4013      	ands	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <HAL_HSEM_IRQHandler+0x30>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f807 	bl	800249c <HAL_HSEM_FreeCallback>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	58001500 	.word	0x58001500

0800249c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01e      	beq.n	8002500 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_IPCC_Init+0x60>)
 80024c4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe ff9c 	bl	8001410 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80024d8:	68b8      	ldr	r0, [r7, #8]
 80024da:	f000 f85b 	bl	8002594 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f82c 	bl	8002548 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80024fe:	e001      	b.n	8002504 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	58000c00 	.word	0x58000c00

08002514 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	4613      	mov	r3, r2
 8002520:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800252e:	b480      	push	{r7}
 8002530:	b085      	sub	sp, #20
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e00f      	b.n	8002576 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <IPCC_SetDefaultCallbacks+0x44>)
 8002560:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3306      	adds	r3, #6
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <IPCC_SetDefaultCallbacks+0x48>)
 800256e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3301      	adds	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b05      	cmp	r3, #5
 800257a:	d9ec      	bls.n	8002556 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	08002515 	.word	0x08002515
 8002590:	0800252f 	.word	0x0800252f

08002594 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80025a8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	223f      	movs	r2, #63	; 0x3f
 80025ae:	609a      	str	r2, [r3, #8]
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025be:	b08b      	sub	sp, #44	; 0x2c
 80025c0:	af06      	add	r7, sp, #24
 80025c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0cb      	b.n	8002766 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff f81e 	bl	8001624 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2203      	movs	r2, #3
 80025ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f004 f9bf 	bl	8006978 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e040      	b.n	8002682 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	440b      	add	r3, r1
 8002610:	3301      	adds	r3, #1
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	3303      	adds	r3, #3
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	3338      	adds	r3, #56	; 0x38
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	333c      	adds	r3, #60	; 0x3c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	3340      	adds	r3, #64	; 0x40
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	3301      	adds	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	d3b9      	bcc.n	8002600 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
 8002690:	e044      	b.n	800271c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	440b      	add	r3, r1
 80026cc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d3b5      	bcc.n	8002692 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	687e      	ldr	r6, [r7, #4]
 800272e:	466d      	mov	r5, sp
 8002730:	f106 0410 	add.w	r4, r6, #16
 8002734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	602b      	str	r3, [r5, #0]
 800273c:	1d33      	adds	r3, r6, #4
 800273e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002740:	6838      	ldr	r0, [r7, #0]
 8002742:	f004 f934 	bl	80069ae <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f805 	bl	800276e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800276e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800276e:	b480      	push	{r7}
 8002770:	b085      	sub	sp, #20
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002792:	b29b      	uxth	r3, r3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	58000400 	.word	0x58000400

080027e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <HAL_PWREx_GetVoltageRange+0x18>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	58000400 	.word	0x58000400

08002800 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002812:	d101      	bne.n	8002818 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_RCC_HSE_Enable>:
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_RCC_HSE_Disable>:
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_RCC_HSE_IsReady>:
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002872:	d101      	bne.n	8002878 <LL_RCC_HSE_IsReady+0x18>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <LL_RCC_HSE_IsReady+0x1a>
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_RCC_HSI_Enable>:
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_RCC_HSI_Disable>:
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_HSI_IsReady>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d101      	bne.n	80028d8 <LL_RCC_HSI_IsReady+0x18>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <LL_RCC_HSI_IsReady+0x1a>
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_RCC_HSI48_Enable>:
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800291a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_RCC_HSI48_Disable>:
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_RCC_HSI48_IsReady>:
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d101      	bne.n	800296a <LL_RCC_HSI48_IsReady+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_RCC_HSI48_IsReady+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_RCC_LSE_Enable>:
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_RCC_LSE_Disable>:
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_LSE_EnableBypass>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029d2:	bf00      	nop
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_RCC_LSE_DisableBypass>:
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <LL_RCC_LSE_IsReady>:
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d101      	bne.n	8002a16 <LL_RCC_LSE_IsReady+0x18>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <LL_RCC_LSE_IsReady+0x1a>
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_LSI1_Enable>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_RCC_LSI1_Disable>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_RCC_LSI1_IsReady>:
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d101      	bne.n	8002a7e <LL_RCC_LSI1_IsReady+0x18>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <LL_RCC_LSI1_IsReady+0x1a>
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_RCC_LSI2_Enable>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_LSI2_Disable>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_LSI2_IsReady>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d101      	bne.n	8002ae6 <LL_RCC_LSI2_IsReady+0x18>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <LL_RCC_LSI2_IsReady+0x1a>
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_RCC_LSI2_SetTrimming>:
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_RCC_MSI_Enable>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_MSI_Disable>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6013      	str	r3, [r2, #0]
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_RCC_MSI_IsReady>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d101      	bne.n	8002b72 <LL_RCC_MSI_IsReady+0x16>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_RCC_MSI_IsReady+0x18>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_MSI_SetRange>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_RCC_MSI_GetRange>:
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2bb0      	cmp	r3, #176	; 0xb0
 8002bbc:	d901      	bls.n	8002bc2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002bbe:	23b0      	movs	r3, #176	; 0xb0
 8002bc0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002bc2:	687b      	ldr	r3, [r7, #4]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_RCC_SetSysClkSource>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 0203 	bic.w	r2, r3, #3
 8002c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_RCC_GetSysClkSource>:
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_SetAHBPrescaler>:
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_RCC_SetAHB4Prescaler>:
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c9e:	f023 020f 	bic.w	r2, r3, #15
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_RCC_SetAPB1Prescaler>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_SetAPB2Prescaler>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_RCC_GetAHBPrescaler>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_GetAHB4Prescaler>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_RCC_GetAPB1Prescaler>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_RCC_GetAPB2Prescaler>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_RCC_PLL_Enable>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_RCC_PLL_Disable>:
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da0:	6013      	str	r3, [r2, #0]
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_RCC_PLL_IsReady>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dbe:	d101      	bne.n	8002dc4 <LL_RCC_PLL_IsReady+0x18>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <LL_RCC_PLL_IsReady+0x1a>
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_RCC_PLL_GetN>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_PLL_GetR>:
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_PLL_GetDivider>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <LL_RCC_PLL_GetMainSource>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0303 	and.w	r3, r3, #3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_RCC_IsActiveFlag_HPRE>:
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d101      	bne.n	8002e4a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e6a:	d101      	bne.n	8002e70 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d101      	bne.n	8002e96 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eb4:	d101      	bne.n	8002eba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ed8:	d101      	bne.n	8002ede <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b08d      	sub	sp, #52	; 0x34
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e363      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 808d 	beq.w	8003026 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f0c:	f7ff fe89 	bl	8002c22 <LL_RCC_GetSysClkSource>
 8002f10:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f12:	f7ff ff82 	bl	8002e1a <LL_RCC_PLL_GetMainSource>
 8002f16:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x3e>
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d147      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d144      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e347      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002f3a:	f7ff fe34 	bl	8002ba6 <LL_RCC_MSI_GetRange>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	429c      	cmp	r4, r3
 8002f42:	d914      	bls.n	8002f6e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fd2f 	bl	80039ac <RCC_SetFlashLatencyFromMSIRange>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e336      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fe0e 	bl	8002b7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fe32 	bl	8002bd0 <LL_RCC_MSI_SetCalibTrimming>
 8002f6c:	e013      	b.n	8002f96 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fe03 	bl	8002b7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fe27 	bl	8002bd0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fd10 	bl	80039ac <RCC_SetFlashLatencyFromMSIRange>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e317      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f96:	f000 fcc9 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4aa4      	ldr	r2, [pc, #656]	; (8003230 <HAL_RCC_OscConfig+0x344>)
 8002f9e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fa0:	4ba4      	ldr	r3, [pc, #656]	; (8003234 <HAL_RCC_OscConfig+0x348>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fc8f 	bl	80018c8 <HAL_InitTick>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d039      	beq.n	8003024 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e308      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01e      	beq.n	8002ffa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fbc:	f7ff fdb0 	bl	8002b20 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fcd0 	bl	8001964 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fccc 	bl	8001964 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e2f5      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002fda:	f7ff fdbf 	bl	8002b5c <LL_RCC_MSI_IsReady>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f1      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fdc8 	bl	8002b7e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fdec 	bl	8002bd0 <LL_RCC_MSI_SetCalibTrimming>
 8002ff8:	e015      	b.n	8003026 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ffa:	f7ff fda0 	bl	8002b3e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fcb1 	bl	8001964 <HAL_GetTick>
 8003002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003006:	f7fe fcad 	bl	8001964 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e2d6      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003018:	f7ff fda0 	bl	8002b5c <LL_RCC_MSI_IsReady>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f1      	bne.n	8003006 <HAL_RCC_OscConfig+0x11a>
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003024:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d047      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003032:	f7ff fdf6 	bl	8002c22 <LL_RCC_GetSysClkSource>
 8003036:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003038:	f7ff feef 	bl	8002e1a <LL_RCC_PLL_GetMainSource>
 800303c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d005      	beq.n	8003050 <HAL_RCC_OscConfig+0x164>
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d108      	bne.n	800305c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d105      	bne.n	800305c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d134      	bne.n	80030c2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e2b4      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003064:	d102      	bne.n	800306c <HAL_RCC_OscConfig+0x180>
 8003066:	f7ff fbdd 	bl	8002824 <LL_RCC_HSE_Enable>
 800306a:	e001      	b.n	8003070 <HAL_RCC_OscConfig+0x184>
 800306c:	f7ff fbe9 	bl	8002842 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe fc74 	bl	8001964 <HAL_GetTick>
 800307c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003080:	f7fe fc70 	bl	8001964 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e299      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003092:	f7ff fbe5 	bl	8002860 <LL_RCC_HSE_IsReady>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f1      	beq.n	8003080 <HAL_RCC_OscConfig+0x194>
 800309c:	e011      	b.n	80030c2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fe fc61 	bl	8001964 <HAL_GetTick>
 80030a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a6:	f7fe fc5d 	bl	8001964 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b64      	cmp	r3, #100	; 0x64
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e286      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80030b8:	f7ff fbd2 	bl	8002860 <LL_RCC_HSE_IsReady>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f1      	bne.n	80030a6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d04c      	beq.n	8003168 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ce:	f7ff fda8 	bl	8002c22 <LL_RCC_GetSysClkSource>
 80030d2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d4:	f7ff fea1 	bl	8002e1a <LL_RCC_PLL_GetMainSource>
 80030d8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x200>
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d10e      	bne.n	8003104 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d10b      	bne.n	8003104 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e266      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fbf1 	bl	80028e4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003102:	e031      	b.n	8003168 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d019      	beq.n	8003140 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800310c:	f7ff fbba 	bl	8002884 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fc28 	bl	8001964 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003118:	f7fe fc24 	bl	8001964 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e24d      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800312a:	f7ff fbc9 	bl	80028c0 <LL_RCC_HSI_IsReady>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f1      	beq.n	8003118 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fbd3 	bl	80028e4 <LL_RCC_HSI_SetCalibTrimming>
 800313e:	e013      	b.n	8003168 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003140:	f7ff fbaf 	bl	80028a2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fc0e 	bl	8001964 <HAL_GetTick>
 8003148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe fc0a 	bl	8001964 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e233      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800315e:	f7ff fbaf 	bl	80028c0 <LL_RCC_HSI_IsReady>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f1      	bne.n	800314c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a3 	beq.w	80032c8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d076      	beq.n	8003278 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d046      	beq.n	8003224 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003196:	f7ff fc66 	bl	8002a66 <LL_RCC_LSI1_IsReady>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d113      	bne.n	80031c8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80031a0:	f7ff fc3f 	bl	8002a22 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a4:	f7fe fbde 	bl	8001964 <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80031ac:	f7fe fbda 	bl	8001964 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e203      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80031be:	f7ff fc52 	bl	8002a66 <LL_RCC_LSI1_IsReady>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f1      	beq.n	80031ac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80031c8:	f7ff fc5f 	bl	8002a8a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fe fbca 	bl	8001964 <HAL_GetTick>
 80031d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031d4:	f7fe fbc6 	bl	8001964 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e1ef      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80031e6:	f7ff fc72 	bl	8002ace <LL_RCC_LSI2_IsReady>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f1      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fc7c 	bl	8002af2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80031fa:	f7ff fc23 	bl	8002a44 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fe fbb1 	bl	8001964 <HAL_GetTick>
 8003202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003206:	f7fe fbad 	bl	8001964 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1d6      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003218:	f7ff fc25 	bl	8002a66 <LL_RCC_LSI1_IsReady>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f1      	bne.n	8003206 <HAL_RCC_OscConfig+0x31a>
 8003222:	e051      	b.n	80032c8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003224:	f7ff fbfd 	bl	8002a22 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe fb9c 	bl	8001964 <HAL_GetTick>
 800322c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800322e:	e00c      	b.n	800324a <HAL_RCC_OscConfig+0x35e>
 8003230:	20000008 	.word	0x20000008
 8003234:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003238:	f7fe fb94 	bl	8001964 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1bd      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800324a:	f7ff fc0c 	bl	8002a66 <LL_RCC_LSI1_IsReady>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f1      	beq.n	8003238 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003254:	f7ff fc2a 	bl	8002aac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800325a:	f7fe fb83 	bl	8001964 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1ac      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800326c:	f7ff fc2f 	bl	8002ace <LL_RCC_LSI2_IsReady>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f1      	bne.n	800325a <HAL_RCC_OscConfig+0x36e>
 8003276:	e027      	b.n	80032c8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003278:	f7ff fc18 	bl	8002aac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe fb72 	bl	8001964 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003284:	f7fe fb6e 	bl	8001964 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b03      	cmp	r3, #3
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e197      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003296:	f7ff fc1a 	bl	8002ace <LL_RCC_LSI2_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f1      	bne.n	8003284 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80032a0:	f7ff fbd0 	bl	8002a44 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fe fb5e 	bl	8001964 <HAL_GetTick>
 80032a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032ac:	f7fe fb5a 	bl	8001964 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e183      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80032be:	f7ff fbd2 	bl	8002a66 <LL_RCC_LSI1_IsReady>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f1      	bne.n	80032ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d05b      	beq.n	800338c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d4:	4ba7      	ldr	r3, [pc, #668]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d114      	bne.n	800330a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80032e0:	f7ff fa70 	bl	80027c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e4:	f7fe fb3e 	bl	8001964 <HAL_GetTick>
 80032e8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fe fb3a 	bl	8001964 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e163      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fe:	4b9d      	ldr	r3, [pc, #628]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_RCC_OscConfig+0x42c>
 8003312:	f7ff fb30 	bl	8002976 <LL_RCC_LSE_Enable>
 8003316:	e00c      	b.n	8003332 <HAL_RCC_OscConfig+0x446>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b05      	cmp	r3, #5
 800331e:	d104      	bne.n	800332a <HAL_RCC_OscConfig+0x43e>
 8003320:	f7ff fb4b 	bl	80029ba <LL_RCC_LSE_EnableBypass>
 8003324:	f7ff fb27 	bl	8002976 <LL_RCC_LSE_Enable>
 8003328:	e003      	b.n	8003332 <HAL_RCC_OscConfig+0x446>
 800332a:	f7ff fb35 	bl	8002998 <LL_RCC_LSE_Disable>
 800332e:	f7ff fb55 	bl	80029dc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d014      	beq.n	8003364 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe fb13 	bl	8001964 <HAL_GetTick>
 800333e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fb0f 	bl	8001964 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e136      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003358:	f7ff fb51 	bl	80029fe <LL_RCC_LSE_IsReady>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ef      	beq.n	8003342 <HAL_RCC_OscConfig+0x456>
 8003362:	e013      	b.n	800338c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe fafe 	bl	8001964 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe fafa 	bl	8001964 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e121      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003382:	f7ff fb3c 	bl	80029fe <LL_RCC_LSE_IsReady>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ef      	bne.n	800336c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02c      	beq.n	80033f2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d014      	beq.n	80033ca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033a0:	f7ff fab5 	bl	800290e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe fade 	bl	8001964 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ac:	f7fe fada 	bl	8001964 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e103      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80033be:	f7ff fac8 	bl	8002952 <LL_RCC_HSI48_IsReady>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0f1      	beq.n	80033ac <HAL_RCC_OscConfig+0x4c0>
 80033c8:	e013      	b.n	80033f2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ca:	f7ff fab1 	bl	8002930 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe fac9 	bl	8001964 <HAL_GetTick>
 80033d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d6:	f7fe fac5 	bl	8001964 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0ee      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80033e8:	f7ff fab3 	bl	8002952 <LL_RCC_HSI48_IsReady>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f1      	bne.n	80033d6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80e4 	beq.w	80035c4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fc:	f7ff fc11 	bl	8002c22 <LL_RCC_GetSysClkSource>
 8003400:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	2b02      	cmp	r3, #2
 8003410:	f040 80b4 	bne.w	800357c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0203 	and.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	429a      	cmp	r2, r3
 8003420:	d123      	bne.n	800346a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d11c      	bne.n	800346a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d114      	bne.n	800346a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d10d      	bne.n	800346a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d106      	bne.n	800346a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d05d      	beq.n	8003526 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d058      	beq.n	8003522 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0a1      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003482:	f7ff fc84 	bl	8002d8e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003486:	f7fe fa6d 	bl	8001964 <HAL_GetTick>
 800348a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe fa69 	bl	8001964 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e092      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ef      	bne.n	800348e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	4b30      	ldr	r3, [pc, #192]	; (8003578 <HAL_RCC_OscConfig+0x68c>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034c6:	0212      	lsls	r2, r2, #8
 80034c8:	4311      	orrs	r1, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034da:	430a      	orrs	r2, r1
 80034dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034e4:	f7ff fc44 	bl	8002d70 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034f8:	f7fe fa34 	bl	8001964 <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fa30 	bl	8001964 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e059      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003520:	e050      	b.n	80035c4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e04f      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d147      	bne.n	80035c4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003534:	f7ff fc1c 	bl	8002d70 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003546:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003548:	f7fe fa0c 	bl	8001964 <HAL_GetTick>
 800354c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003550:	f7fe fa08 	bl	8001964 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e031      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ef      	beq.n	8003550 <HAL_RCC_OscConfig+0x664>
 8003570:	e028      	b.n	80035c4 <HAL_RCC_OscConfig+0x6d8>
 8003572:	bf00      	nop
 8003574:	58000400 	.word	0x58000400
 8003578:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d01e      	beq.n	80035c0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	f7ff fc04 	bl	8002d8e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fe f9ed 	bl	8001964 <HAL_GetTick>
 800358a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fe f9e9 	bl	8001964 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e012      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1ef      	bne.n	800358e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCC_OscConfig+0x6e4>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	60cb      	str	r3, [r1, #12]
 80035be:	e001      	b.n	80035c4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3734      	adds	r7, #52	; 0x34
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd90      	pop	{r4, r7, pc}
 80035ce:	bf00      	nop
 80035d0:	eefefffc 	.word	0xeefefffc

080035d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e12d      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e8:	4b98      	ldr	r3, [pc, #608]	; (800384c <HAL_RCC_ClockConfig+0x278>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d91b      	bls.n	800362e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b95      	ldr	r3, [pc, #596]	; (800384c <HAL_RCC_ClockConfig+0x278>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 0207 	bic.w	r2, r3, #7
 80035fe:	4993      	ldr	r1, [pc, #588]	; (800384c <HAL_RCC_ClockConfig+0x278>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003606:	f7fe f9ad 	bl	8001964 <HAL_GetTick>
 800360a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360c:	e008      	b.n	8003620 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800360e:	f7fe f9a9 	bl	8001964 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e111      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003620:	4b8a      	ldr	r3, [pc, #552]	; (800384c <HAL_RCC_ClockConfig+0x278>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d1ef      	bne.n	800360e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d016      	beq.n	8003668 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fafb 	bl	8002c3a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003644:	f7fe f98e 	bl	8001964 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800364c:	f7fe f98a 	bl	8001964 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e0f2      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800365e:	f7ff fbe8 	bl	8002e32 <LL_RCC_IsActiveFlag_HPRE>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f1      	beq.n	800364c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d016      	beq.n	80036a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff faf2 	bl	8002c62 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800367e:	f7fe f971 	bl	8001964 <HAL_GetTick>
 8003682:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003686:	f7fe f96d 	bl	8001964 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e0d5      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003698:	f7ff fbdd 	bl	8002e56 <LL_RCC_IsActiveFlag_C2HPRE>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f1      	beq.n	8003686 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d016      	beq.n	80036dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff faeb 	bl	8002c8e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036b8:	f7fe f954 	bl	8001964 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036c0:	f7fe f950 	bl	8001964 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e0b8      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80036d2:	f7ff fbd3 	bl	8002e7c <LL_RCC_IsActiveFlag_SHDHPRE>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f1      	beq.n	80036c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d016      	beq.n	8003716 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fae5 	bl	8002cbc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036f2:	f7fe f937 	bl	8001964 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036fa:	f7fe f933 	bl	8001964 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e09b      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800370c:	f7ff fbc9 	bl	8002ea2 <LL_RCC_IsActiveFlag_PPRE1>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f1      	beq.n	80036fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d017      	beq.n	8003752 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fadb 	bl	8002ce4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800372e:	f7fe f919 	bl	8001964 <HAL_GetTick>
 8003732:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003736:	f7fe f915 	bl	8001964 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e07d      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003748:	f7ff fbbd 	bl	8002ec6 <LL_RCC_IsActiveFlag_PPRE2>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f1      	beq.n	8003736 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d043      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d106      	bne.n	8003774 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003766:	f7ff f87b 	bl	8002860 <LL_RCC_HSE_IsReady>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11e      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e067      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d106      	bne.n	800378a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800377c:	f7ff fb16 	bl	8002dac <LL_RCC_PLL_IsReady>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d113      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e05c      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003792:	f7ff f9e3 	bl	8002b5c <LL_RCC_MSI_IsReady>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d108      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e051      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80037a0:	f7ff f88e 	bl	80028c0 <LL_RCC_HSI_IsReady>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e04a      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fa21 	bl	8002bfa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b8:	f7fe f8d4 	bl	8001964 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c0:	f7fe f8d0 	bl	8001964 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e036      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	f7ff fa24 	bl	8002c22 <LL_RCC_GetSysClkSource>
 80037da:	4602      	mov	r2, r0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d1ec      	bne.n	80037c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037e6:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_ClockConfig+0x278>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d21b      	bcs.n	800382c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f4:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_RCC_ClockConfig+0x278>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 0207 	bic.w	r2, r3, #7
 80037fc:	4913      	ldr	r1, [pc, #76]	; (800384c <HAL_RCC_ClockConfig+0x278>)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003804:	f7fe f8ae 	bl	8001964 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	e008      	b.n	800381e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800380c:	f7fe f8aa 	bl	8001964 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e012      	b.n	8003844 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_ClockConfig+0x278>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d1ef      	bne.n	800380c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800382c:	f000 f87e 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003830:	4603      	mov	r3, r0
 8003832:	4a07      	ldr	r2, [pc, #28]	; (8003850 <HAL_RCC_ClockConfig+0x27c>)
 8003834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003836:	f7fe f8a1 	bl	800197c <HAL_GetTickPrio>
 800383a:	4603      	mov	r3, r0
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe f843 	bl	80018c8 <HAL_InitTick>
 8003842:	4603      	mov	r3, r0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	58004000 	.word	0x58004000
 8003850:	20000008 	.word	0x20000008

08003854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385a:	f7ff f9e2 	bl	8002c22 <LL_RCC_GetSysClkSource>
 800385e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003866:	f7ff f99e 	bl	8002ba6 <LL_RCC_MSI_GetRange>
 800386a:	4603      	mov	r3, r0
 800386c:	091b      	lsrs	r3, r3, #4
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	4a2b      	ldr	r2, [pc, #172]	; (8003920 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e04b      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d102      	bne.n	8003888 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e045      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d10a      	bne.n	80038a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800388e:	f7fe ffb7 	bl	8002800 <LL_RCC_HSE_IsEnabledDiv2>
 8003892:	4603      	mov	r3, r0
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003898:	4b22      	ldr	r3, [pc, #136]	; (8003924 <HAL_RCC_GetSysClockFreq+0xd0>)
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e03a      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800389e:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_RCC_GetSysClockFreq+0xd4>)
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e037      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80038a4:	f7ff fab9 	bl	8002e1a <LL_RCC_PLL_GetMainSource>
 80038a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d003      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x64>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d003      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x6a>
 80038b6:	e00d      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80038b8:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038ba:	60bb      	str	r3, [r7, #8]
        break;
 80038bc:	e015      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038be:	f7fe ff9f 	bl	8002800 <LL_RCC_HSE_IsEnabledDiv2>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d102      	bne.n	80038ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80038c8:	4b16      	ldr	r3, [pc, #88]	; (8003924 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80038cc:	e00d      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_RCC_GetSysClockFreq+0xd4>)
 80038d0:	60bb      	str	r3, [r7, #8]
        break;
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80038d4:	f7ff f967 	bl	8002ba6 <LL_RCC_MSI_GetRange>
 80038d8:	4603      	mov	r3, r0
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 030f 	and.w	r3, r3, #15
 80038e0:	4a0f      	ldr	r2, [pc, #60]	; (8003920 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	60bb      	str	r3, [r7, #8]
        break;
 80038e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80038ea:	f7ff fa71 	bl	8002dd0 <LL_RCC_PLL_GetN>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	fb03 f402 	mul.w	r4, r3, r2
 80038f6:	f7ff fa84 	bl	8002e02 <LL_RCC_PLL_GetDivider>
 80038fa:	4603      	mov	r3, r0
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	3301      	adds	r3, #1
 8003900:	fbb4 f4f3 	udiv	r4, r4, r3
 8003904:	f7ff fa71 	bl	8002dea <LL_RCC_PLL_GetR>
 8003908:	4603      	mov	r3, r0
 800390a:	0f5b      	lsrs	r3, r3, #29
 800390c:	3301      	adds	r3, #1
 800390e:	fbb4 f3f3 	udiv	r3, r4, r3
 8003912:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003914:	68fb      	ldr	r3, [r7, #12]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bd90      	pop	{r4, r7, pc}
 800391e:	bf00      	nop
 8003920:	0800a104 	.word	0x0800a104
 8003924:	00f42400 	.word	0x00f42400
 8003928:	01e84800 	.word	0x01e84800

0800392c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800392c:	b598      	push	{r3, r4, r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003930:	f7ff ff90 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003934:	4604      	mov	r4, r0
 8003936:	f7ff f9e9 	bl	8002d0c <LL_RCC_GetAHBPrescaler>
 800393a:	4603      	mov	r3, r0
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	4a03      	ldr	r2, [pc, #12]	; (8003950 <HAL_RCC_GetHCLKFreq+0x24>)
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd98      	pop	{r3, r4, r7, pc}
 8003950:	0800a0a4 	.word	0x0800a0a4

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b598      	push	{r3, r4, r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003958:	f7ff ffe8 	bl	800392c <HAL_RCC_GetHCLKFreq>
 800395c:	4604      	mov	r4, r0
 800395e:	f7ff f9ef 	bl	8002d40 <LL_RCC_GetAPB1Prescaler>
 8003962:	4603      	mov	r3, r0
 8003964:	0a1b      	lsrs	r3, r3, #8
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <HAL_RCC_GetPCLK1Freq+0x28>)
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd98      	pop	{r3, r4, r7, pc}
 800397c:	0800a0e4 	.word	0x0800a0e4

08003980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003980:	b598      	push	{r3, r4, r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003984:	f7ff ffd2 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003988:	4604      	mov	r4, r0
 800398a:	f7ff f9e5 	bl	8002d58 <LL_RCC_GetAPB2Prescaler>
 800398e:	4603      	mov	r3, r0
 8003990:	0adb      	lsrs	r3, r3, #11
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd98      	pop	{r3, r4, r7, pc}
 80039a8:	0800a0e4 	.word	0x0800a0e4

080039ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2bb0      	cmp	r3, #176	; 0xb0
 80039b8:	d903      	bls.n	80039c2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e007      	b.n	80039d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	091b      	lsrs	r3, r3, #4
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80039d2:	f7ff f9a7 	bl	8002d24 <LL_RCC_GetAHB4Prescaler>
 80039d6:	4603      	mov	r3, r0
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a0d      	ldr	r2, [pc, #52]	; (8003a14 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	0c9c      	lsrs	r4, r3, #18
 80039f6:	f7fe fef5 	bl	80027e4 <HAL_PWREx_GetVoltageRange>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4619      	mov	r1, r3
 80039fe:	4620      	mov	r0, r4
 8003a00:	f000 f80c 	bl	8003a1c <RCC_SetFlashLatency>
 8003a04:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd90      	pop	{r4, r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	0800a104 	.word	0x0800a104
 8003a14:	0800a0a4 	.word	0x0800a0a4
 8003a18:	431bde83 	.word	0x431bde83

08003a1c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b093      	sub	sp, #76	; 0x4c
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003a26:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <RCC_SetFlashLatency+0xe8>)
 8003a28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003a2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003a32:	4a35      	ldr	r2, [pc, #212]	; (8003b08 <RCC_SetFlashLatency+0xec>)
 8003a34:	f107 031c 	add.w	r3, r7, #28
 8003a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <RCC_SetFlashLatency+0xf0>)
 8003a40:	f107 040c 	add.w	r4, r7, #12
 8003a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a54:	d11a      	bne.n	8003a8c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a56:	2300      	movs	r3, #0
 8003a58:	643b      	str	r3, [r7, #64]	; 0x40
 8003a5a:	e013      	b.n	8003a84 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	3348      	adds	r3, #72	; 0x48
 8003a62:	443b      	add	r3, r7
 8003a64:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d807      	bhi.n	8003a7e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	3348      	adds	r3, #72	; 0x48
 8003a74:	443b      	add	r3, r7
 8003a76:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003a7a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003a7c:	e020      	b.n	8003ac0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a80:	3301      	adds	r3, #1
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40
 8003a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d9e8      	bls.n	8003a5c <RCC_SetFlashLatency+0x40>
 8003a8a:	e019      	b.n	8003ac0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a90:	e013      	b.n	8003aba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	3348      	adds	r3, #72	; 0x48
 8003a98:	443b      	add	r3, r7
 8003a9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d807      	bhi.n	8003ab4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	3348      	adds	r3, #72	; 0x48
 8003aaa:	443b      	add	r3, r7
 8003aac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ab0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ab2:	e005      	b.n	8003ac0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d9e8      	bls.n	8003a92 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <RCC_SetFlashLatency+0xf4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 0207 	bic.w	r2, r3, #7
 8003ac8:	4911      	ldr	r1, [pc, #68]	; (8003b10 <RCC_SetFlashLatency+0xf4>)
 8003aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ad0:	f7fd ff48 	bl	8001964 <HAL_GetTick>
 8003ad4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ad6:	e008      	b.n	8003aea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ad8:	f7fd ff44 	bl	8001964 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e007      	b.n	8003afa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <RCC_SetFlashLatency+0xf4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1ef      	bne.n	8003ad8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	374c      	adds	r7, #76	; 0x4c
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}
 8003b02:	bf00      	nop
 8003b04:	08009f00 	.word	0x08009f00
 8003b08:	08009f10 	.word	0x08009f10
 8003b0c:	08009f1c 	.word	0x08009f1c
 8003b10:	58004000 	.word	0x58004000

08003b14 <LL_RCC_LSE_IsEnabled>:
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <LL_RCC_LSE_IsEnabled+0x18>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <LL_RCC_LSE_IsEnabled+0x1a>
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <LL_RCC_LSE_IsReady>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d101      	bne.n	8003b50 <LL_RCC_LSE_IsReady+0x18>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <LL_RCC_LSE_IsReady+0x1a>
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <LL_RCC_MSI_EnablePLLMode>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b6a:	f043 0304 	orr.w	r3, r3, #4
 8003b6e:	6013      	str	r3, [r2, #0]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_RCC_SetRFWKPClockSource>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_SetSMPSClockSource>:
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f023 0203 	bic.w	r2, r3, #3
 8003bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <LL_RCC_SetSMPSPrescaler>:
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003be0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <LL_RCC_SetUSARTClockSource>:
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <LL_RCC_SetLPUARTClockSource>:
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_SetI2CClockSource>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003c66:	43db      	mvns	r3, r3
 8003c68:	401a      	ands	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <LL_RCC_SetLPTIMClockSource>:
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0c1b      	lsrs	r3, r3, #16
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_RCC_SetSAIClockSource>:
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_SetRNGClockSource>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_RCC_SetCLK48ClockSource>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_RCC_SetUSBClockSource>:
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ffe3 	bl	8003d14 <LL_RCC_SetCLK48ClockSource>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <LL_RCC_SetADCClockSource>:
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_RCC_SetRTCClockSource>:
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_RCC_GetRTCClockSource>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_RCC_ForceBackupDomainReset>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_RCC_ReleaseBackupDomainReset>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <LL_RCC_PLLSAI1_Enable>:
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_PLLSAI1_Disable>:
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e3c:	6013      	str	r3, [r2, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_RCC_PLLSAI1_IsReady>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5a:	d101      	bne.n	8003e60 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d034      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e90:	d021      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003e92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e96:	d81b      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e9c:	d01d      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ea2:	d815      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eac:	d110      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ebe:	e00d      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f94d 	bl	8004164 <RCCEx_PLLSAI1_ConfigNP>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ece:	e005      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	77fb      	strb	r3, [r7, #31]
        break;
 8003ed4:	e002      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003edc:	7ffb      	ldrb	r3, [r7, #31]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fee8 	bl	8003cbc <LL_RCC_SetSAIClockSource>
 8003eec:	e001      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
 8003ef0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d046      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003efe:	f7ff ff56 	bl	8003dae <LL_RCC_GetRTCClockSource>
 8003f02:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d03c      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003f0e:	f7fe fc59 	bl	80027c4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff30 	bl	8003d82 <LL_RCC_SetRTCClockSource>
 8003f22:	e02e      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003f2e:	f7ff ff4b 	bl	8003dc8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003f32:	f7ff ff5a 	bl	8003dea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003f4e:	f7ff fde1 	bl	8003b14 <LL_RCC_LSE_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d114      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f58:	f7fd fd04 	bl	8001964 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f5e:	e00b      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fd fd00 	bl	8001964 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d902      	bls.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	77fb      	strb	r3, [r7, #31]
              break;
 8003f76:	e004      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f78:	f7ff fdde 	bl	8003b38 <LL_RCC_LSE_IsReady>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d1ee      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003f82:	7ffb      	ldrb	r3, [r7, #31]
 8003f84:	77bb      	strb	r3, [r7, #30]
 8003f86:	e001      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	7ffb      	ldrb	r3, [r7, #31]
 8003f8a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fe2a 	bl	8003bf6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d004      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fe35 	bl	8003c22 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fe5d 	bl	8003c88 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fe52 	bl	8003c88 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fe2a 	bl	8003c4e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fe1f 	bl	8003c4e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d022      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fe8d 	bl	8003d40 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402e:	d107      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004048:	d10b      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f000 f8e3 	bl	800421a <RCCEx_PLLSAI1_ConfigNQ>
 8004054:	4603      	mov	r3, r0
 8004056:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004058:	7ffb      	ldrb	r3, [r7, #31]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02b      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d008      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004080:	d003      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	2b00      	cmp	r3, #0
 8004088:	d105      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fe2a 	bl	8003ce8 <LL_RCC_SetRNGClockSource>
 8004094:	e00a      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7ff fe21 	bl	8003ce8 <LL_RCC_SetRNGClockSource>
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff fe34 	bl	8003d14 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80040b4:	d107      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d022      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fe3d 	bl	8003d56 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e4:	d107      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040fe:	d10b      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f8e3 	bl	80042d0 <RCCEx_PLLSAI1_ConfigNR>
 800410a:	4603      	mov	r3, r0
 800410c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800410e:	7ffb      	ldrb	r3, [r7, #31]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004114:	7ffb      	ldrb	r3, [r7, #31]
 8004116:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff fd26 	bl	8003b7a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fd45 	bl	8003bce <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fd2c 	bl	8003ba6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800414e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800415c:	f7ff fcfe 	bl	8003b5c <LL_RCC_MSI_EnablePLLMode>
}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}

08004164 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004170:	f7ff fe5b 	bl	8003e2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004174:	f7fd fbf6 	bl	8001964 <HAL_GetTick>
 8004178:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800417a:	e009      	b.n	8004190 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800417c:	f7fd fbf2 	bl	8001964 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d902      	bls.n	8004190 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	73fb      	strb	r3, [r7, #15]
      break;
 800418e:	e004      	b.n	800419a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004190:	f7ff fe5a 	bl	8003e48 <LL_RCC_PLLSAI1_IsReady>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d137      	bne.n	8004210 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b4:	4313      	orrs	r3, r2
 80041b6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80041b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ca:	4313      	orrs	r3, r2
 80041cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80041ce:	f7ff fe1d 	bl	8003e0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d2:	f7fd fbc7 	bl	8001964 <HAL_GetTick>
 80041d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041d8:	e009      	b.n	80041ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041da:	f7fd fbc3 	bl	8001964 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d902      	bls.n	80041ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	73fb      	strb	r3, [r7, #15]
        break;
 80041ec:	e004      	b.n	80041f8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041ee:	f7ff fe2b 	bl	8003e48 <LL_RCC_PLLSAI1_IsReady>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d1f0      	bne.n	80041da <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d108      	bne.n	8004210 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800420c:	4313      	orrs	r3, r2
 800420e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004226:	f7ff fe00 	bl	8003e2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800422a:	f7fd fb9b 	bl	8001964 <HAL_GetTick>
 800422e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004230:	e009      	b.n	8004246 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004232:	f7fd fb97 	bl	8001964 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d902      	bls.n	8004246 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	e004      	b.n	8004250 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004246:	f7ff fdff 	bl	8003e48 <LL_RCC_PLLSAI1_IsReady>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f0      	bne.n	8004232 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d137      	bne.n	80042c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004280:	4313      	orrs	r3, r2
 8004282:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004284:	f7ff fdc2 	bl	8003e0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004288:	f7fd fb6c 	bl	8001964 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800428e:	e009      	b.n	80042a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004290:	f7fd fb68 	bl	8001964 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d902      	bls.n	80042a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	73fb      	strb	r3, [r7, #15]
        break;
 80042a2:	e004      	b.n	80042ae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042a4:	f7ff fdd0 	bl	8003e48 <LL_RCC_PLLSAI1_IsReady>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d1f0      	bne.n	8004290 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d108      	bne.n	80042c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	4313      	orrs	r3, r2
 80042c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042dc:	f7ff fda5 	bl	8003e2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042e0:	f7fd fb40 	bl	8001964 <HAL_GetTick>
 80042e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042e6:	e009      	b.n	80042fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042e8:	f7fd fb3c 	bl	8001964 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	73fb      	strb	r3, [r7, #15]
      break;
 80042fa:	e004      	b.n	8004306 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042fc:	f7ff fda4 	bl	8003e48 <LL_RCC_PLLSAI1_IsReady>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d137      	bne.n	800437c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800430c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004320:	4313      	orrs	r3, r2
 8004322:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800433a:	f7ff fd67 	bl	8003e0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433e:	f7fd fb11 	bl	8001964 <HAL_GetTick>
 8004342:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004344:	e009      	b.n	800435a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004346:	f7fd fb0d 	bl	8001964 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d902      	bls.n	800435a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	73fb      	strb	r3, [r7, #15]
        break;
 8004358:	e004      	b.n	8004364 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800435a:	f7ff fd75 	bl	8003e48 <LL_RCC_PLLSAI1_IsReady>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d1f0      	bne.n	8004346 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d108      	bne.n	800437c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004378:	4313      	orrs	r3, r2
 800437a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e09f      	b.n	80044da <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fd f852 	bl	8001458 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80043bc:	4b49      	ldr	r3, [pc, #292]	; (80044e4 <HAL_RTC_Init+0x15c>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d07e      	beq.n	80044c6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	22ca      	movs	r2, #202	; 0xca
 80043ce:	625a      	str	r2, [r3, #36]	; 0x24
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2253      	movs	r2, #83	; 0x53
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f8ab 	bl	8004534 <RTC_EnterInitMode>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	22ff      	movs	r2, #255	; 0xff
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2204      	movs	r2, #4
 80043f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e067      	b.n	80044ca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6899      	ldr	r1, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68d2      	ldr	r2, [r2, #12]
 8004434:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6919      	ldr	r1, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	041a      	lsls	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004458:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0203 	bic.w	r2, r2, #3
 8004468:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	431a      	orrs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d113      	bne.n	80044b8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f829 	bl	80044e8 <HAL_RTC_WaitForSynchro>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	22ff      	movs	r2, #255	; 0xff
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2204      	movs	r2, #4
 80044a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e010      	b.n	80044da <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	22ff      	movs	r2, #255	; 0xff
 80044be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	73fb      	strb	r3, [r7, #15]
 80044c4:	e001      	b.n	80044ca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40002800 	.word	0x40002800

080044e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004500:	f7fd fa30 	bl	8001964 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004506:	e009      	b.n	800451c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004508:	f7fd fa2c 	bl	8001964 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004516:	d901      	bls.n	800451c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e007      	b.n	800452c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ee      	beq.n	8004508 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d119      	bne.n	800457e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f04f 32ff 	mov.w	r2, #4294967295
 8004552:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004554:	f7fd fa06 	bl	8001964 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800455a:	e009      	b.n	8004570 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800455c:	f7fd fa02 	bl	8001964 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800456a:	d901      	bls.n	8004570 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e007      	b.n	8004580 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ee      	beq.n	800455c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e089      	b.n	80046b6 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2202      	movs	r2, #2
 80045ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	22ca      	movs	r2, #202	; 0xca
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2253      	movs	r2, #83	; 0x53
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80045d0:	f7fd f9c8 	bl	8001964 <HAL_GetTick>
 80045d4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80045d6:	e015      	b.n	8004604 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045d8:	f7fd f9c4 	bl	8001964 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e6:	d90d      	bls.n	8004604 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	22ff      	movs	r2, #255	; 0xff
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2203      	movs	r2, #3
 80045f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e058      	b.n	80046b6 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e2      	bne.n	80045d8 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004620:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004622:	f7fd f99f 	bl	8001964 <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004628:	e015      	b.n	8004656 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800462a:	f7fd f99b 	bl	8001964 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004638:	d90d      	bls.n	8004656 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	22ff      	movs	r2, #255	; 0xff
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2203      	movs	r2, #3
 8004646:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e02f      	b.n	80046b6 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0e2      	beq.n	800462a <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0207 	bic.w	r2, r2, #7
 8004672:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6899      	ldr	r1, [r3, #8]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	430a      	orrs	r2, r1
 8004682:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800469a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	22ff      	movs	r2, #255	; 0xff
 80046a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e049      	b.n	8004764 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fc fee3 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f000 fb4f 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e049      	b.n	8004812 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f841 	bl	800481a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f000 faf8 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x24>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e03c      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d109      	bne.n	800486e <HAL_TIM_PWM_Start+0x3e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e02f      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d109      	bne.n	8004888 <HAL_TIM_PWM_Start+0x58>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	bf14      	ite	ne
 8004880:	2301      	movne	r3, #1
 8004882:	2300      	moveq	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e022      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d109      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x72>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	e015      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d109      	bne.n	80048bc <HAL_TIM_PWM_Start+0x8c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	bf14      	ite	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2300      	moveq	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e008      	b.n	80048ce <HAL_TIM_PWM_Start+0x9e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e079      	b.n	80049ca <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xb6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	e023      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0xc6>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	e01b      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0xd6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	e013      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xe6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004914:	e00b      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xf6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004924:	e003      	b.n	800492e <HAL_TIM_PWM_Start+0xfe>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2201      	movs	r2, #1
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fdb0 	bl	800549c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <HAL_TIM_PWM_Start+0x1a4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_TIM_PWM_Start+0x12a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a23      	ldr	r2, [pc, #140]	; (80049d8 <HAL_TIM_PWM_Start+0x1a8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d004      	beq.n	800495a <HAL_TIM_PWM_Start+0x12a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a21      	ldr	r2, [pc, #132]	; (80049dc <HAL_TIM_PWM_Start+0x1ac>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d101      	bne.n	800495e <HAL_TIM_PWM_Start+0x12e>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_TIM_PWM_Start+0x130>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_TIM_PWM_Start+0x1a4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_TIM_PWM_Start+0x158>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004986:	d115      	bne.n	80049b4 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <HAL_TIM_PWM_Start+0x1b0>)
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b06      	cmp	r3, #6
 8004998:	d015      	beq.n	80049c6 <HAL_TIM_PWM_Start+0x196>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d011      	beq.n	80049c6 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b2:	e008      	b.n	80049c6 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	e000      	b.n	80049c8 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800
 80049e0:	00010007 	.word	0x00010007

080049e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e0ff      	b.n	8004c02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b14      	cmp	r3, #20
 8004a0e:	f200 80f0 	bhi.w	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	08004bf3 	.word	0x08004bf3
 8004a20:	08004bf3 	.word	0x08004bf3
 8004a24:	08004bf3 	.word	0x08004bf3
 8004a28:	08004aad 	.word	0x08004aad
 8004a2c:	08004bf3 	.word	0x08004bf3
 8004a30:	08004bf3 	.word	0x08004bf3
 8004a34:	08004bf3 	.word	0x08004bf3
 8004a38:	08004aef 	.word	0x08004aef
 8004a3c:	08004bf3 	.word	0x08004bf3
 8004a40:	08004bf3 	.word	0x08004bf3
 8004a44:	08004bf3 	.word	0x08004bf3
 8004a48:	08004b2f 	.word	0x08004b2f
 8004a4c:	08004bf3 	.word	0x08004bf3
 8004a50:	08004bf3 	.word	0x08004bf3
 8004a54:	08004bf3 	.word	0x08004bf3
 8004a58:	08004b71 	.word	0x08004b71
 8004a5c:	08004bf3 	.word	0x08004bf3
 8004a60:	08004bf3 	.word	0x08004bf3
 8004a64:	08004bf3 	.word	0x08004bf3
 8004a68:	08004bb1 	.word	0x08004bb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f9f8 	bl	8004e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0208 	orr.w	r2, r2, #8
 8004a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0204 	bic.w	r2, r2, #4
 8004a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6999      	ldr	r1, [r3, #24]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	619a      	str	r2, [r3, #24]
      break;
 8004aaa:	e0a5      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fa54 	bl	8004f60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	021a      	lsls	r2, r3, #8
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	619a      	str	r2, [r3, #24]
      break;
 8004aec:	e084      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 faad 	bl	8005054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0208 	orr.w	r2, r2, #8
 8004b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0204 	bic.w	r2, r2, #4
 8004b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69d9      	ldr	r1, [r3, #28]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	61da      	str	r2, [r3, #28]
      break;
 8004b2c:	e064      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fb05 	bl	8005144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69d9      	ldr	r1, [r3, #28]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	021a      	lsls	r2, r3, #8
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	61da      	str	r2, [r3, #28]
      break;
 8004b6e:	e043      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fb42 	bl	8005200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bae:	e023      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fb7a 	bl	80052b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bf0:	e002      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop

08004c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_TIM_ConfigClockSource+0x1c>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e0b6      	b.n	8004d96 <HAL_TIM_ConfigClockSource+0x18a>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c64:	d03e      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0xd8>
 8004c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6a:	f200 8087 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x170>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c72:	f000 8086 	beq.w	8004d82 <HAL_TIM_ConfigClockSource+0x176>
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	d87f      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x170>
 8004c7c:	2b70      	cmp	r3, #112	; 0x70
 8004c7e:	d01a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0xaa>
 8004c80:	2b70      	cmp	r3, #112	; 0x70
 8004c82:	d87b      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x170>
 8004c84:	2b60      	cmp	r3, #96	; 0x60
 8004c86:	d050      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x11e>
 8004c88:	2b60      	cmp	r3, #96	; 0x60
 8004c8a:	d877      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x170>
 8004c8c:	2b50      	cmp	r3, #80	; 0x50
 8004c8e:	d03c      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0xfe>
 8004c90:	2b50      	cmp	r3, #80	; 0x50
 8004c92:	d873      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x170>
 8004c94:	2b40      	cmp	r3, #64	; 0x40
 8004c96:	d058      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x13e>
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d86f      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x170>
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d064      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15e>
 8004ca0:	2b30      	cmp	r3, #48	; 0x30
 8004ca2:	d86b      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x170>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d060      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15e>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d867      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x170>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05c      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15e>
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d05a      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15e>
 8004cb4:	e062      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc6:	f000 fbc9 	bl	800545c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	609a      	str	r2, [r3, #8]
      break;
 8004ce2:	e04f      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf4:	f000 fbb2 	bl	800545c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d06:	609a      	str	r2, [r3, #8]
      break;
 8004d08:	e03c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 fb24 	bl	8005364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2150      	movs	r1, #80	; 0x50
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fb7d 	bl	8005422 <TIM_ITRx_SetConfig>
      break;
 8004d28:	e02c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 fb43 	bl	80053c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2160      	movs	r1, #96	; 0x60
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fb6d 	bl	8005422 <TIM_ITRx_SetConfig>
      break;
 8004d48:	e01c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fb04 	bl	8005364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2140      	movs	r1, #64	; 0x40
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fb5d 	bl	8005422 <TIM_ITRx_SetConfig>
      break;
 8004d68:	e00c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f000 fb54 	bl	8005422 <TIM_ITRx_SetConfig>
      break;
 8004d7a:	e003      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d80:	e000      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a2a      	ldr	r2, [pc, #168]	; (8004e5c <TIM_Base_SetConfig+0xbc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0x20>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d108      	bne.n	8004dd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a21      	ldr	r2, [pc, #132]	; (8004e5c <TIM_Base_SetConfig+0xbc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <TIM_Base_SetConfig+0x52>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d007      	beq.n	8004df2 <TIM_Base_SetConfig+0x52>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <TIM_Base_SetConfig+0xc0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_Base_SetConfig+0x52>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <TIM_Base_SetConfig+0xc4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d108      	bne.n	8004e04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <TIM_Base_SetConfig+0xbc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d007      	beq.n	8004e40 <TIM_Base_SetConfig+0xa0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <TIM_Base_SetConfig+0xc0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_Base_SetConfig+0xa0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <TIM_Base_SetConfig+0xc4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d103      	bne.n	8004e48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	615a      	str	r2, [r3, #20]
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40014400 	.word	0x40014400
 8004e64:	40014800 	.word	0x40014800

08004e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f023 0201 	bic.w	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f023 0302 	bic.w	r3, r3, #2
 8004eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a24      	ldr	r2, [pc, #144]	; (8004f54 <TIM_OC1_SetConfig+0xec>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d007      	beq.n	8004ed8 <TIM_OC1_SetConfig+0x70>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a23      	ldr	r2, [pc, #140]	; (8004f58 <TIM_OC1_SetConfig+0xf0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d003      	beq.n	8004ed8 <TIM_OC1_SetConfig+0x70>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a22      	ldr	r2, [pc, #136]	; (8004f5c <TIM_OC1_SetConfig+0xf4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d10c      	bne.n	8004ef2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f023 0308 	bic.w	r3, r3, #8
 8004ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f023 0304 	bic.w	r3, r3, #4
 8004ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <TIM_OC1_SetConfig+0xec>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_OC1_SetConfig+0xa2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a17      	ldr	r2, [pc, #92]	; (8004f5c <TIM_OC1_SetConfig+0xf4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC1_SetConfig+0xa2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <TIM_OC1_SetConfig+0xf0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d111      	bne.n	8004f2e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40014800 	.word	0x40014800
 8004f5c:	40014400 	.word	0x40014400

08004f60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f023 0210 	bic.w	r2, r3, #16
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0320 	bic.w	r3, r3, #32
 8004fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a22      	ldr	r2, [pc, #136]	; (8005048 <TIM_OC2_SetConfig+0xe8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10d      	bne.n	8004fe0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a19      	ldr	r2, [pc, #100]	; (8005048 <TIM_OC2_SetConfig+0xe8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_OC2_SetConfig+0x98>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a18      	ldr	r2, [pc, #96]	; (800504c <TIM_OC2_SetConfig+0xec>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_OC2_SetConfig+0x98>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <TIM_OC2_SetConfig+0xf0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d113      	bne.n	8005020 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a21      	ldr	r2, [pc, #132]	; (8005138 <TIM_OC3_SetConfig+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d10d      	bne.n	80050d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <TIM_OC3_SetConfig+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d007      	beq.n	80050ea <TIM_OC3_SetConfig+0x96>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a17      	ldr	r2, [pc, #92]	; (800513c <TIM_OC3_SetConfig+0xe8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d003      	beq.n	80050ea <TIM_OC3_SetConfig+0x96>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <TIM_OC3_SetConfig+0xec>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d113      	bne.n	8005112 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	621a      	str	r2, [r3, #32]
}
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800

08005144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800517e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	031b      	lsls	r3, r3, #12
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a14      	ldr	r2, [pc, #80]	; (80051f4 <TIM_OC4_SetConfig+0xb0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d007      	beq.n	80051b8 <TIM_OC4_SetConfig+0x74>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <TIM_OC4_SetConfig+0xb4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_OC4_SetConfig+0x74>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a12      	ldr	r2, [pc, #72]	; (80051fc <TIM_OC4_SetConfig+0xb8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d109      	bne.n	80051cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	019b      	lsls	r3, r3, #6
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005244:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <TIM_OC5_SetConfig+0xa4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d007      	beq.n	800526a <TIM_OC5_SetConfig+0x6a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a12      	ldr	r2, [pc, #72]	; (80052a8 <TIM_OC5_SetConfig+0xa8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_OC5_SetConfig+0x6a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a11      	ldr	r2, [pc, #68]	; (80052ac <TIM_OC5_SetConfig+0xac>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d109      	bne.n	800527e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005270:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	621a      	str	r2, [r3, #32]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800

080052b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	051b      	lsls	r3, r3, #20
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a14      	ldr	r2, [pc, #80]	; (8005358 <TIM_OC6_SetConfig+0xa8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d007      	beq.n	800531c <TIM_OC6_SetConfig+0x6c>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a13      	ldr	r2, [pc, #76]	; (800535c <TIM_OC6_SetConfig+0xac>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_OC6_SetConfig+0x6c>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a12      	ldr	r2, [pc, #72]	; (8005360 <TIM_OC6_SetConfig+0xb0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d109      	bne.n	8005330 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005322:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00
 800535c:	40014400 	.word	0x40014400
 8005360:	40014800 	.word	0x40014800

08005364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0201 	bic.w	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800538e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f023 030a 	bic.w	r3, r3, #10
 80053a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b087      	sub	sp, #28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	f023 0210 	bic.w	r2, r3, #16
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	031b      	lsls	r3, r3, #12
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	f043 0307 	orr.w	r3, r3, #7
 8005448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	609a      	str	r2, [r3, #8]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	431a      	orrs	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4313      	orrs	r3, r2
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	609a      	str	r2, [r3, #8]
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 031f 	and.w	r3, r3, #31
 80054ae:	2201      	movs	r2, #1
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1a      	ldr	r2, [r3, #32]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	43db      	mvns	r3, r3
 80054be:	401a      	ands	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1a      	ldr	r2, [r3, #32]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	431a      	orrs	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e04a      	b.n	8005596 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d108      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005530:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a12      	ldr	r2, [pc, #72]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005568:	d10c      	bne.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4313      	orrs	r3, r2
 800557a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40012c00 	.word	0x40012c00

080055a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e078      	b.n	80056b6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	041b      	lsls	r3, r3, #16
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a20      	ldr	r2, [pc, #128]	; (80056c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d106      	bne.n	8005656 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1a      	ldr	r2, [pc, #104]	; (80056c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d121      	bne.n	80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	051b      	lsls	r3, r3, #20
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d106      	bne.n	80056a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40012c00 	.word	0x40012c00

080056c8 <LL_RCC_GetUSARTClockSource>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80056d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4013      	ands	r3, r2
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_RCC_GetLPUARTClockSource>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4013      	ands	r3, r2
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e042      	b.n	80057a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fb feff 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2224      	movs	r2, #36	; 0x24
 8005736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fd94 	bl	8006280 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fb69 	bl	8005e30 <UART_SetConfig>
 800575e:	4603      	mov	r3, r0
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e01b      	b.n	80057a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005776:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005786:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fe13 	bl	80063c4 <UART_CheckIdleState>
 800579e:	4603      	mov	r3, r0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b0ba      	sub	sp, #232	; 0xe8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80057d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80057d6:	4013      	ands	r3, r2
 80057d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80057dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11b      	bne.n	800581c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d105      	bne.n	8005808 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d009      	beq.n	800581c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 82e3 	beq.w	8005dd8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	4798      	blx	r3
      }
      return;
 800581a:	e2dd      	b.n	8005dd8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800581c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8123 	beq.w	8005a6c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005826:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800582a:	4b8d      	ldr	r3, [pc, #564]	; (8005a60 <HAL_UART_IRQHandler+0x2b8>)
 800582c:	4013      	ands	r3, r2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005836:	4b8b      	ldr	r3, [pc, #556]	; (8005a64 <HAL_UART_IRQHandler+0x2bc>)
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8116 	beq.w	8005a6c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d011      	beq.n	8005870 <HAL_UART_IRQHandler+0xc8>
 800584c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005866:	f043 0201 	orr.w	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d011      	beq.n	80058a0 <HAL_UART_IRQHandler+0xf8>
 800587c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2202      	movs	r2, #2
 800588e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005896:	f043 0204 	orr.w	r2, r3, #4
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d011      	beq.n	80058d0 <HAL_UART_IRQHandler+0x128>
 80058ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2204      	movs	r2, #4
 80058be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	f043 0202 	orr.w	r2, r3, #2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d017      	beq.n	800590c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80058ec:	4b5c      	ldr	r3, [pc, #368]	; (8005a60 <HAL_UART_IRQHandler+0x2b8>)
 80058ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00b      	beq.n	800590c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2208      	movs	r2, #8
 80058fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f043 0208 	orr.w	r2, r3, #8
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800590c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005914:	2b00      	cmp	r3, #0
 8005916:	d012      	beq.n	800593e <HAL_UART_IRQHandler+0x196>
 8005918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800591c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00c      	beq.n	800593e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800592c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8249 	beq.w	8005ddc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d013      	beq.n	800597e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d005      	beq.n	80059a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800599a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d054      	beq.n	8005a4c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fe1f 	bl	80065e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d146      	bne.n	8005a44 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3308      	adds	r3, #8
 80059bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1d9      	bne.n	80059b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d017      	beq.n	8005a3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <HAL_UART_IRQHandler+0x2c0>)
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fc fa28 	bl	8001e72 <HAL_DMA_Abort_IT>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d019      	beq.n	8005a5c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005a36:	4610      	mov	r0, r2
 8005a38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3a:	e00f      	b.n	8005a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f9e1 	bl	8005e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a42:	e00b      	b.n	8005a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f9dd 	bl	8005e04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	e007      	b.n	8005a5c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f9d9 	bl	8005e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005a5a:	e1bf      	b.n	8005ddc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5c:	bf00      	nop
    return;
 8005a5e:	e1bd      	b.n	8005ddc <HAL_UART_IRQHandler+0x634>
 8005a60:	10000001 	.word	0x10000001
 8005a64:	04000120 	.word	0x04000120
 8005a68:	080066b3 	.word	0x080066b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 8153 	bne.w	8005d1c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 814c 	beq.w	8005d1c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8145 	beq.w	8005d1c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2210      	movs	r2, #16
 8005a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	f040 80bb 	bne.w	8005c20 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ab8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 818f 	beq.w	8005de0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ac8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005acc:	429a      	cmp	r2, r3
 8005ace:	f080 8187 	bcs.w	8005de0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f040 8087 	bne.w	8005bfe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b2a:	e841 2300 	strex	r3, r2, [r1]
 8005b2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1da      	bne.n	8005af0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3308      	adds	r3, #8
 8005b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e1      	bne.n	8005b3a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ba0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e3      	bne.n	8005b76 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bcc:	f023 0310 	bic.w	r3, r3, #16
 8005bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bde:	65bb      	str	r3, [r7, #88]	; 0x58
 8005be0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e4      	bne.n	8005bbc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fc f8db 	bl	8001db4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f8fd 	bl	8005e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c1e:	e0df      	b.n	8005de0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80d1 	beq.w	8005de4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005c42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 80cc 	beq.w	8005de4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e4      	bne.n	8005c4c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	623b      	str	r3, [r7, #32]
   return(result);
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005caa:	633a      	str	r2, [r7, #48]	; 0x30
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e1      	bne.n	8005c82 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0310 	bic.w	r3, r3, #16
 8005ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cf4:	61fb      	str	r3, [r7, #28]
 8005cf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	69b9      	ldr	r1, [r7, #24]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	617b      	str	r3, [r7, #20]
   return(result);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e4      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f87f 	bl	8005e18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d1a:	e063      	b.n	8005de4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <HAL_UART_IRQHandler+0x59e>
 8005d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fcf8 	bl	8006734 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d44:	e051      	b.n	8005dea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d014      	beq.n	8005d7c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d03a      	beq.n	8005de8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	4798      	blx	r3
    }
    return;
 8005d7a:	e035      	b.n	8005de8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <HAL_UART_IRQHandler+0x5f4>
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d003      	beq.n	8005d9c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fca2 	bl	80066de <UART_EndTransmit_IT>
    return;
 8005d9a:	e026      	b.n	8005dea <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d009      	beq.n	8005dbc <HAL_UART_IRQHandler+0x614>
 8005da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fcd1 	bl	800675c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dba:	e016      	b.n	8005dea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d010      	beq.n	8005dea <HAL_UART_IRQHandler+0x642>
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	da0c      	bge.n	8005dea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fcb9 	bl	8006748 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dd6:	e008      	b.n	8005dea <HAL_UART_IRQHandler+0x642>
      return;
 8005dd8:	bf00      	nop
 8005dda:	e006      	b.n	8005dea <HAL_UART_IRQHandler+0x642>
    return;
 8005ddc:	bf00      	nop
 8005dde:	e004      	b.n	8005dea <HAL_UART_IRQHandler+0x642>
      return;
 8005de0:	bf00      	nop
 8005de2:	e002      	b.n	8005dea <HAL_UART_IRQHandler+0x642>
      return;
 8005de4:	bf00      	nop
 8005de6:	e000      	b.n	8005dea <HAL_UART_IRQHandler+0x642>
    return;
 8005de8:	bf00      	nop
  }
}
 8005dea:	37e8      	adds	r7, #232	; 0xe8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e34:	b08c      	sub	sp, #48	; 0x30
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4baf      	ldr	r3, [pc, #700]	; (800611c <UART_SetConfig+0x2ec>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4aa4      	ldr	r2, [pc, #656]	; (8006120 <UART_SetConfig+0x2f0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ea6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	6812      	ldr	r2, [r2, #0]
 8005eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	f023 010f 	bic.w	r1, r3, #15
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a95      	ldr	r2, [pc, #596]	; (8006124 <UART_SetConfig+0x2f4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d125      	bne.n	8005f20 <UART_SetConfig+0xf0>
 8005ed4:	2003      	movs	r0, #3
 8005ed6:	f7ff fbf7 	bl	80056c8 <LL_RCC_GetUSARTClockSource>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d81b      	bhi.n	8005f18 <UART_SetConfig+0xe8>
 8005ee0:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <UART_SetConfig+0xb8>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005ef9 	.word	0x08005ef9
 8005eec:	08005f09 	.word	0x08005f09
 8005ef0:	08005f01 	.word	0x08005f01
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efe:	e042      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f06:	e03e      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f0e:	e03a      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f16:	e036      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1e:	e032      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a7e      	ldr	r2, [pc, #504]	; (8006120 <UART_SetConfig+0x2f0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d12a      	bne.n	8005f80 <UART_SetConfig+0x150>
 8005f2a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005f2e:	f7ff fbdb 	bl	80056e8 <LL_RCC_GetLPUARTClockSource>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f38:	d01a      	beq.n	8005f70 <UART_SetConfig+0x140>
 8005f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f3e:	d81b      	bhi.n	8005f78 <UART_SetConfig+0x148>
 8005f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f44:	d00c      	beq.n	8005f60 <UART_SetConfig+0x130>
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4a:	d815      	bhi.n	8005f78 <UART_SetConfig+0x148>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <UART_SetConfig+0x128>
 8005f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f54:	d008      	beq.n	8005f68 <UART_SetConfig+0x138>
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x148>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5e:	e012      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f60:	2302      	movs	r3, #2
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f66:	e00e      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6e:	e00a      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f76:	e006      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f7e:	e002      	b.n	8005f86 <UART_SetConfig+0x156>
 8005f80:	2310      	movs	r3, #16
 8005f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a65      	ldr	r2, [pc, #404]	; (8006120 <UART_SetConfig+0x2f0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	f040 8097 	bne.w	80060c0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f96:	2b08      	cmp	r3, #8
 8005f98:	d823      	bhi.n	8005fe2 <UART_SetConfig+0x1b2>
 8005f9a:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <UART_SetConfig+0x170>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fe3 	.word	0x08005fe3
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fe3 	.word	0x08005fe3
 8005fb0:	08005fd3 	.word	0x08005fd3
 8005fb4:	08005fe3 	.word	0x08005fe3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005fe3 	.word	0x08005fe3
 8005fc0:	08005fdb 	.word	0x08005fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7fd fcc6 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fca:	e010      	b.n	8005fee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fcc:	4b56      	ldr	r3, [pc, #344]	; (8006128 <UART_SetConfig+0x2f8>)
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fd0:	e00d      	b.n	8005fee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd2:	f7fd fc3f 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fd8:	e009      	b.n	8005fee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fe0:	e005      	b.n	8005fee <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 812b 	beq.w	800624c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	4a4c      	ldr	r2, [pc, #304]	; (800612c <UART_SetConfig+0x2fc>)
 8005ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006000:	461a      	mov	r2, r3
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	fbb3 f3f2 	udiv	r3, r3, r2
 8006008:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	4413      	add	r3, r2
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	429a      	cmp	r2, r3
 8006018:	d305      	bcc.n	8006026 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	429a      	cmp	r2, r3
 8006024:	d903      	bls.n	800602e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800602c:	e10e      	b.n	800624c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	2200      	movs	r2, #0
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	60fa      	str	r2, [r7, #12]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	4a3c      	ldr	r2, [pc, #240]	; (800612c <UART_SetConfig+0x2fc>)
 800603c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006040:	b29b      	uxth	r3, r3
 8006042:	2200      	movs	r2, #0
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006050:	f7fa f89c 	bl	800018c <__aeabi_uldivmod>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	020b      	lsls	r3, r1, #8
 8006066:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800606a:	0202      	lsls	r2, r0, #8
 800606c:	6979      	ldr	r1, [r7, #20]
 800606e:	6849      	ldr	r1, [r1, #4]
 8006070:	0849      	lsrs	r1, r1, #1
 8006072:	2000      	movs	r0, #0
 8006074:	460c      	mov	r4, r1
 8006076:	4605      	mov	r5, r0
 8006078:	eb12 0804 	adds.w	r8, r2, r4
 800607c:	eb43 0905 	adc.w	r9, r3, r5
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	469a      	mov	sl, r3
 8006088:	4693      	mov	fp, r2
 800608a:	4652      	mov	r2, sl
 800608c:	465b      	mov	r3, fp
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa f87b 	bl	800018c <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4613      	mov	r3, r2
 800609c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060a4:	d308      	bcc.n	80060b8 <UART_SetConfig+0x288>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ac:	d204      	bcs.n	80060b8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	e0c9      	b.n	800624c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060be:	e0c5      	b.n	800624c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c8:	d16d      	bne.n	80061a6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80060ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060ce:	3b01      	subs	r3, #1
 80060d0:	2b07      	cmp	r3, #7
 80060d2:	d82d      	bhi.n	8006130 <UART_SetConfig+0x300>
 80060d4:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <UART_SetConfig+0x2ac>)
 80060d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060da:	bf00      	nop
 80060dc:	080060fd 	.word	0x080060fd
 80060e0:	08006105 	.word	0x08006105
 80060e4:	08006131 	.word	0x08006131
 80060e8:	0800610b 	.word	0x0800610b
 80060ec:	08006131 	.word	0x08006131
 80060f0:	08006131 	.word	0x08006131
 80060f4:	08006131 	.word	0x08006131
 80060f8:	08006113 	.word	0x08006113
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fd fc40 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 8006100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006102:	e01b      	b.n	800613c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b08      	ldr	r3, [pc, #32]	; (8006128 <UART_SetConfig+0x2f8>)
 8006106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006108:	e018      	b.n	800613c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7fd fba3 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 800610e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006110:	e014      	b.n	800613c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006118:	e010      	b.n	800613c <UART_SetConfig+0x30c>
 800611a:	bf00      	nop
 800611c:	cfff69f3 	.word	0xcfff69f3
 8006120:	40008000 	.word	0x40008000
 8006124:	40013800 	.word	0x40013800
 8006128:	00f42400 	.word	0x00f42400
 800612c:	0800a144 	.word	0x0800a144
      default:
        pclk = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800613a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 8084 	beq.w	800624c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	4a4b      	ldr	r2, [pc, #300]	; (8006278 <UART_SetConfig+0x448>)
 800614a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800614e:	461a      	mov	r2, r3
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	fbb3 f3f2 	udiv	r3, r3, r2
 8006156:	005a      	lsls	r2, r3, #1
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	441a      	add	r2, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	2b0f      	cmp	r3, #15
 800616e:	d916      	bls.n	800619e <UART_SetConfig+0x36e>
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006176:	d212      	bcs.n	800619e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f023 030f 	bic.w	r3, r3, #15
 8006180:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	b29b      	uxth	r3, r3
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	b29a      	uxth	r2, r3
 800618e:	8bfb      	ldrh	r3, [r7, #30]
 8006190:	4313      	orrs	r3, r2
 8006192:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	8bfa      	ldrh	r2, [r7, #30]
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	e056      	b.n	800624c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061a4:	e052      	b.n	800624c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061aa:	3b01      	subs	r3, #1
 80061ac:	2b07      	cmp	r3, #7
 80061ae:	d822      	bhi.n	80061f6 <UART_SetConfig+0x3c6>
 80061b0:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <UART_SetConfig+0x388>)
 80061b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b6:	bf00      	nop
 80061b8:	080061d9 	.word	0x080061d9
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061f7 	.word	0x080061f7
 80061c4:	080061e7 	.word	0x080061e7
 80061c8:	080061f7 	.word	0x080061f7
 80061cc:	080061f7 	.word	0x080061f7
 80061d0:	080061f7 	.word	0x080061f7
 80061d4:	080061ef 	.word	0x080061ef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d8:	f7fd fbd2 	bl	8003980 <HAL_RCC_GetPCLK2Freq>
 80061dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061de:	e010      	b.n	8006202 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061e0:	4b26      	ldr	r3, [pc, #152]	; (800627c <UART_SetConfig+0x44c>)
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061e4:	e00d      	b.n	8006202 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e6:	f7fd fb35 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061ec:	e009      	b.n	8006202 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061f4:	e005      	b.n	8006202 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006200:	bf00      	nop
    }

    if (pclk != 0U)
 8006202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006204:	2b00      	cmp	r3, #0
 8006206:	d021      	beq.n	800624c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <UART_SetConfig+0x448>)
 800620e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006212:	461a      	mov	r2, r3
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	fbb3 f2f2 	udiv	r2, r3, r2
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	441a      	add	r2, r3
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b0f      	cmp	r3, #15
 8006230:	d909      	bls.n	8006246 <UART_SetConfig+0x416>
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d205      	bcs.n	8006246 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	b29a      	uxth	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60da      	str	r2, [r3, #12]
 8006244:	e002      	b.n	800624c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2201      	movs	r2, #1
 8006250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2201      	movs	r2, #1
 8006258:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2200      	movs	r2, #0
 8006260:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006268:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800626c:	4618      	mov	r0, r3
 800626e:	3730      	adds	r7, #48	; 0x30
 8006270:	46bd      	mov	sp, r7
 8006272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006276:	bf00      	nop
 8006278:	0800a144 	.word	0x0800a144
 800627c:	00f42400 	.word	0x00f42400

08006280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01a      	beq.n	8006396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637e:	d10a      	bne.n	8006396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b098      	sub	sp, #96	; 0x60
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d4:	f7fb fac6 	bl	8001964 <HAL_GetTick>
 80063d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d12f      	bne.n	8006448 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f0:	2200      	movs	r2, #0
 80063f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f88e 	bl	8006518 <UART_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d022      	beq.n	8006448 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006416:	653b      	str	r3, [r7, #80]	; 0x50
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006420:	647b      	str	r3, [r7, #68]	; 0x44
 8006422:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800642e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e6      	bne.n	8006402 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e063      	b.n	8006510 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b04      	cmp	r3, #4
 8006454:	d149      	bne.n	80064ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006456:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800645e:	2200      	movs	r2, #0
 8006460:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f857 	bl	8006518 <UART_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d03c      	beq.n	80064ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	623b      	str	r3, [r7, #32]
   return(result);
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
 8006490:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e6      	bne.n	8006470 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3308      	adds	r3, #8
 80064a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3308      	adds	r3, #8
 80064c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c2:	61fa      	str	r2, [r7, #28]
 80064c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c6:	69b9      	ldr	r1, [r7, #24]
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	617b      	str	r3, [r7, #20]
   return(result);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e5      	bne.n	80064a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e012      	b.n	8006510 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3758      	adds	r7, #88	; 0x58
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006528:	e049      	b.n	80065be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d045      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fb fa17 	bl	8001964 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <UART_WaitOnFlagUntilTimeout+0x30>
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e048      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d031      	beq.n	80065be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b08      	cmp	r3, #8
 8006566:	d110      	bne.n	800658a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2208      	movs	r2, #8
 800656e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f838 	bl	80065e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2208      	movs	r2, #8
 800657a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e029      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006598:	d111      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f81e 	bl	80065e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e00f      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4013      	ands	r3, r2
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d0a6      	beq.n	800652a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b095      	sub	sp, #84	; 0x54
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660c:	643b      	str	r3, [r7, #64]	; 0x40
 800660e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e6      	bne.n	80065ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3308      	adds	r3, #8
 8006626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	64bb      	str	r3, [r7, #72]	; 0x48
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006644:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800664a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e3      	bne.n	8006620 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d118      	bne.n	8006692 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	60bb      	str	r3, [r7, #8]
   return(result);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f023 0310 	bic.w	r3, r3, #16
 8006674:	647b      	str	r3, [r7, #68]	; 0x44
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6979      	ldr	r1, [r7, #20]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	613b      	str	r3, [r7, #16]
   return(result);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e6      	bne.n	8006660 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80066a6:	bf00      	nop
 80066a8:	3754      	adds	r7, #84	; 0x54
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f7ff fb97 	bl	8005e04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d6:	bf00      	nop
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b088      	sub	sp, #32
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066fa:	61fb      	str	r3, [r7, #28]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6979      	ldr	r1, [r7, #20]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	613b      	str	r3, [r7, #16]
   return(result);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff fb62 	bl	8005df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800672c:	bf00      	nop
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_UARTEx_DisableFifoMode+0x16>
 8006782:	2302      	movs	r3, #2
 8006784:	e027      	b.n	80067d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2224      	movs	r2, #36	; 0x24
 8006792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80067b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e02d      	b.n	8006856 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2224      	movs	r2, #36	; 0x24
 8006806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0201 	bic.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f850 	bl	80068dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2220      	movs	r2, #32
 8006848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006872:	2302      	movs	r3, #2
 8006874:	e02d      	b.n	80068d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2224      	movs	r2, #36	; 0x24
 8006882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	683a      	ldr	r2, [r7, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f812 	bl	80068dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d108      	bne.n	80068fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068fc:	e031      	b.n	8006962 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068fe:	2308      	movs	r3, #8
 8006900:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006902:	2308      	movs	r3, #8
 8006904:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	0e5b      	lsrs	r3, r3, #25
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	0f5b      	lsrs	r3, r3, #29
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	7b3a      	ldrb	r2, [r7, #12]
 800692a:	4911      	ldr	r1, [pc, #68]	; (8006970 <UARTEx_SetNbDataToProcess+0x94>)
 800692c:	5c8a      	ldrb	r2, [r1, r2]
 800692e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006932:	7b3a      	ldrb	r2, [r7, #12]
 8006934:	490f      	ldr	r1, [pc, #60]	; (8006974 <UARTEx_SetNbDataToProcess+0x98>)
 8006936:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006938:	fb93 f3f2 	sdiv	r3, r3, r2
 800693c:	b29a      	uxth	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	7b7a      	ldrb	r2, [r7, #13]
 8006948:	4909      	ldr	r1, [pc, #36]	; (8006970 <UARTEx_SetNbDataToProcess+0x94>)
 800694a:	5c8a      	ldrb	r2, [r1, r2]
 800694c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006950:	7b7a      	ldrb	r2, [r7, #13]
 8006952:	4908      	ldr	r1, [pc, #32]	; (8006974 <UARTEx_SetNbDataToProcess+0x98>)
 8006954:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006956:	fb93 f3f2 	sdiv	r3, r3, r2
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	0800a15c 	.word	0x0800a15c
 8006974:	0800a164 	.word	0x0800a164

08006978 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006980:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006984:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	b29b      	uxth	r3, r3
 8006992:	43db      	mvns	r3, r3
 8006994:	b29b      	uxth	r3, r3
 8006996:	4013      	ands	r3, r2
 8006998:	b29a      	uxth	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069ae:	b084      	sub	sp, #16
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	f107 0014 	add.w	r0, r7, #20
 80069bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	b004      	add	sp, #16
 80069ee:	4770      	bx	lr

080069f0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	2218      	movs	r2, #24
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 f8d8 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a08:	233f      	movs	r3, #63	; 0x3f
 8006a0a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006a0c:	2381      	movs	r3, #129	; 0x81
 8006a0e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006a10:	1dfb      	adds	r3, r7, #7
 8006a12:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006a14:	2301      	movs	r3, #1
 8006a16:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a18:	f107 0308 	add.w	r3, r7, #8
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 fb54 	bl	80080cc <hci_send_req>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da01      	bge.n	8006a2e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006a2a:	23ff      	movs	r3, #255	; 0xff
 8006a2c:	e000      	b.n	8006a30 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006a38:	b5b0      	push	{r4, r5, r7, lr}
 8006a3a:	b0ce      	sub	sp, #312	; 0x138
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4605      	mov	r5, r0
 8006a40:	460c      	mov	r4, r1
 8006a42:	4610      	mov	r0, r2
 8006a44:	4619      	mov	r1, r3
 8006a46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a4a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006a4e:	462a      	mov	r2, r5
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a56:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a62:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006a66:	4602      	mov	r2, r0
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a6e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006a72:	460a      	mov	r2, r1
 8006a74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006a76:	f107 0310 	add.w	r3, r7, #16
 8006a7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006a7e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006a82:	3308      	adds	r3, #8
 8006a84:	f107 0210 	add.w	r2, r7, #16
 8006a88:	4413      	add	r3, r2
 8006a8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006a8e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006a92:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006a96:	4413      	add	r3, r2
 8006a98:	3309      	adds	r3, #9
 8006a9a:	f107 0210 	add.w	r2, r7, #16
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006aa4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006aa8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006aac:	2200      	movs	r2, #0
 8006aae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006ab6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006aba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006abe:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006ac2:	7812      	ldrb	r2, [r2, #0]
 8006ac4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006aca:	3301      	adds	r3, #1
 8006acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006ad0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ad4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006ad8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006adc:	8812      	ldrh	r2, [r2, #0]
 8006ade:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006ae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006aec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006af0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006af4:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006af8:	8812      	ldrh	r2, [r2, #0]
 8006afa:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b02:	3302      	adds	r3, #2
 8006b04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b0c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006b10:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006b14:	7812      	ldrb	r2, [r2, #0]
 8006b16:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006b18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006b22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b26:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006b2a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b30:	3301      	adds	r3, #1
 8006b32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006b36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b3a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006b3e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b44:	3301      	adds	r3, #1
 8006b46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006b4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b4e:	3308      	adds	r3, #8
 8006b50:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006b54:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 f81d 	bl	8007b98 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006b5e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006b62:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006b66:	4413      	add	r3, r2
 8006b68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006b6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b70:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006b74:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006b80:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b84:	3301      	adds	r3, #1
 8006b86:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006b8a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f001 f802 	bl	8007b98 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006b94:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006b98:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006baa:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006bbe:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006bc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bce:	2218      	movs	r2, #24
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fff0 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bd8:	233f      	movs	r3, #63	; 0x3f
 8006bda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006bde:	2383      	movs	r3, #131	; 0x83
 8006be0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006be4:	f107 0310 	add.w	r3, r7, #16
 8006be8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006bec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bf0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006bf4:	f107 030f 	add.w	r3, r7, #15
 8006bf8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c06:	2100      	movs	r1, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f001 fa5f 	bl	80080cc <hci_send_req>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	da01      	bge.n	8006c18 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006c14:	23ff      	movs	r3, #255	; 0xff
 8006c16:	e004      	b.n	8006c22 <aci_gap_set_discoverable+0x1ea>
  return status;
 8006c18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c1c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c20:	781b      	ldrb	r3, [r3, #0]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bdb0      	pop	{r4, r5, r7, pc}

08006c2c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b0cc      	sub	sp, #304	; 0x130
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4602      	mov	r2, r0
 8006c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c38:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006c3e:	f107 0310 	add.w	r3, r7, #16
 8006c42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c60:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c76:	2218      	movs	r2, #24
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 ff9c 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c80:	233f      	movs	r3, #63	; 0x3f
 8006c82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006c86:	2385      	movs	r3, #133	; 0x85
 8006c88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c8c:	f107 0310 	add.w	r3, r7, #16
 8006c90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c9c:	f107 030f 	add.w	r3, r7, #15
 8006ca0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006caa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 fa0b 	bl	80080cc <hci_send_req>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	da01      	bge.n	8006cc0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006cbc:	23ff      	movs	r3, #255	; 0xff
 8006cbe:	e004      	b.n	8006cca <aci_gap_set_io_capability+0x9e>
  return status;
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006cc8:	781b      	ldrb	r3, [r3, #0]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006cd4:	b5b0      	push	{r4, r5, r7, lr}
 8006cd6:	b0cc      	sub	sp, #304	; 0x130
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	4605      	mov	r5, r0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006cea:	462a      	mov	r2, r5
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfe:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006d02:	4602      	mov	r2, r0
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d0e:	460a      	mov	r2, r1
 8006d10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006d12:	f107 0310 	add.w	r3, r7, #16
 8006d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d34:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006d38:	7812      	ldrb	r2, [r2, #0]
 8006d3a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d40:	3301      	adds	r3, #1
 8006d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d4e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006d52:	7812      	ldrb	r2, [r2, #0]
 8006d54:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d68:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006d6c:	7812      	ldrb	r2, [r2, #0]
 8006d6e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d74:	3301      	adds	r3, #1
 8006d76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d82:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006d8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d98:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006d9c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006da2:	3301      	adds	r3, #1
 8006da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dac:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006db0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006db6:	3301      	adds	r3, #1
 8006db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006dc4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dca:	3301      	adds	r3, #1
 8006dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006dd8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006ddc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006de0:	3304      	adds	r3, #4
 8006de2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dea:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006dee:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006df0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006df4:	3301      	adds	r3, #1
 8006df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006dfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dfe:	2218      	movs	r2, #24
 8006e00:	2100      	movs	r1, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 fed8 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e08:	233f      	movs	r3, #63	; 0x3f
 8006e0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006e0e:	2386      	movs	r3, #134	; 0x86
 8006e10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e14:	f107 0310 	add.w	r3, r7, #16
 8006e18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e24:	f107 030f 	add.w	r3, r7, #15
 8006e28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e36:	2100      	movs	r1, #0
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f001 f947 	bl	80080cc <hci_send_req>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	da01      	bge.n	8006e48 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006e44:	23ff      	movs	r3, #255	; 0xff
 8006e46:	e004      	b.n	8006e52 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e50:	781b      	ldrb	r3, [r3, #0]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bdb0      	pop	{r4, r5, r7, pc}

08006e5c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b0cc      	sub	sp, #304	; 0x130
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4602      	mov	r2, r0
 8006e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6c:	6019      	str	r1, [r3, #0]
 8006e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006e76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006e78:	f107 0310 	add.w	r3, r7, #16
 8006e7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e84:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e9a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006e9e:	8812      	ldrh	r2, [r2, #0]
 8006ea0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ea6:	3302      	adds	r3, #2
 8006ea8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eb4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ec8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ecc:	2218      	movs	r2, #24
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fe71 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ed6:	233f      	movs	r3, #63	; 0x3f
 8006ed8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006edc:	2388      	movs	r3, #136	; 0x88
 8006ede:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ee2:	f107 0310 	add.w	r3, r7, #16
 8006ee6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ef2:	f107 030f 	add.w	r3, r7, #15
 8006ef6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f04:	2100      	movs	r1, #0
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 f8e0 	bl	80080cc <hci_send_req>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	da01      	bge.n	8006f16 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006f12:	23ff      	movs	r3, #255	; 0xff
 8006f14:	e004      	b.n	8006f20 <aci_gap_pass_key_resp+0xc4>
  return status;
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f1e:	781b      	ldrb	r3, [r3, #0]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006f2a:	b590      	push	{r4, r7, lr}
 8006f2c:	b0cd      	sub	sp, #308	; 0x134
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	4604      	mov	r4, r0
 8006f32:	4608      	mov	r0, r1
 8006f34:	4611      	mov	r1, r2
 8006f36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f3a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f44:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f48:	4622      	mov	r2, r4
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f50:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f54:	4602      	mov	r2, r0
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006f60:	460a      	mov	r2, r1
 8006f62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006f64:	f107 0310 	add.w	r3, r7, #16
 8006f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006f6c:	f107 0308 	add.w	r3, r7, #8
 8006f70:	2207      	movs	r2, #7
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fe1f 	bl	8007bb8 <Osal_MemSet>
  int index_input = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f88:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006f8c:	7812      	ldrb	r2, [r2, #0]
 8006f8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f94:	3301      	adds	r3, #1
 8006f96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fa2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fae:	3301      	adds	r3, #1
 8006fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fbc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006fc0:	7812      	ldrb	r2, [r2, #0]
 8006fc2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fc8:	3301      	adds	r3, #1
 8006fca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fd2:	2218      	movs	r2, #24
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fdee 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fdc:	233f      	movs	r3, #63	; 0x3f
 8006fde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006fe2:	238a      	movs	r3, #138	; 0x8a
 8006fe4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006ff8:	f107 0308 	add.w	r3, r7, #8
 8006ffc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007000:	2307      	movs	r3, #7
 8007002:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007006:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f001 f85d 	bl	80080cc <hci_send_req>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	da01      	bge.n	800701c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007018:	23ff      	movs	r3, #255	; 0xff
 800701a:	e02e      	b.n	800707a <aci_gap_init+0x150>
  if ( resp.Status )
 800701c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007020:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <aci_gap_init+0x10c>
    return resp.Status;
 800702a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	e021      	b.n	800707a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800703e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007042:	b29a      	uxth	r2, r3
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007054:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007058:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800705c:	b29a      	uxth	r2, r3
 800705e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007062:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007068:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800706c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007070:	b29a      	uxth	r2, r3
 8007072:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007076:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007080:	46bd      	mov	sp, r7
 8007082:	bd90      	pop	{r4, r7, pc}

08007084 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b0cc      	sub	sp, #304	; 0x130
 8007088:	af00      	add	r7, sp, #0
 800708a:	4602      	mov	r2, r0
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	6019      	str	r1, [r3, #0]
 8007096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800709e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80070a0:	f107 0310 	add.w	r3, r7, #16
 80070a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80070a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80070ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070c2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80070c6:	7812      	ldrb	r2, [r2, #0]
 80070c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070ce:	3301      	adds	r3, #1
 80070d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80070d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d8:	1c58      	adds	r0, r3, #1
 80070da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ec:	6819      	ldr	r1, [r3, #0]
 80070ee:	f000 fd53 	bl	8007b98 <Osal_MemCpy>
  index_input += AdvDataLen;
 80070f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007100:	4413      	add	r3, r2
 8007102:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007106:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800710a:	2218      	movs	r2, #24
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fd52 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007114:	233f      	movs	r3, #63	; 0x3f
 8007116:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800711a:	238e      	movs	r3, #142	; 0x8e
 800711c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007120:	f107 0310 	add.w	r3, r7, #16
 8007124:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007128:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800712c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007130:	f107 030f 	add.w	r3, r7, #15
 8007134:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007138:	2301      	movs	r3, #1
 800713a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800713e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f000 ffc1 	bl	80080cc <hci_send_req>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	da01      	bge.n	8007154 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007150:	23ff      	movs	r3, #255	; 0xff
 8007152:	e004      	b.n	800715e <aci_gap_update_adv_data+0xda>
  return status;
 8007154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007158:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800715c:	781b      	ldrb	r3, [r3, #0]
}
 800715e:	4618      	mov	r0, r3
 8007160:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	2218      	movs	r2, #24
 8007178:	2100      	movs	r1, #0
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fd1c 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007180:	233f      	movs	r3, #63	; 0x3f
 8007182:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007184:	2392      	movs	r3, #146	; 0x92
 8007186:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007188:	1dfb      	adds	r3, r7, #7
 800718a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800718c:	2301      	movs	r3, #1
 800718e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007190:	f107 0308 	add.w	r3, r7, #8
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f000 ff98 	bl	80080cc <hci_send_req>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da01      	bge.n	80071a6 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80071a2:	23ff      	movs	r3, #255	; 0xff
 80071a4:	e000      	b.n	80071a8 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80071a6:	79fb      	ldrb	r3, [r7, #7]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b0cc      	sub	sp, #304	; 0x130
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4602      	mov	r2, r0
 80071b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071bc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80071c0:	801a      	strh	r2, [r3, #0]
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80071ca:	460a      	mov	r2, r1
 80071cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80071ce:	f107 0310 	add.w	r3, r7, #16
 80071d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80071d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80071e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071f0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80071f4:	8812      	ldrh	r2, [r2, #0]
 80071f6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80071f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071fc:	3302      	adds	r3, #2
 80071fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007206:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800720a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007216:	3301      	adds	r3, #1
 8007218:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800721c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007220:	2218      	movs	r2, #24
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fcc7 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800722a:	233f      	movs	r3, #63	; 0x3f
 800722c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007230:	23a5      	movs	r3, #165	; 0xa5
 8007232:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007236:	f107 0310 	add.w	r3, r7, #16
 800723a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800723e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007242:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007246:	f107 030f 	add.w	r3, r7, #15
 800724a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800724e:	2301      	movs	r3, #1
 8007250:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007254:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f000 ff36 	bl	80080cc <hci_send_req>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	da01      	bge.n	800726a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8007266:	23ff      	movs	r3, #255	; 0xff
 8007268:	e004      	b.n	8007274 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800726a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007272:	781b      	ldrb	r3, [r3, #0]
}
 8007274:	4618      	mov	r0, r3
 8007276:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b088      	sub	sp, #32
 8007282:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007288:	f107 0308 	add.w	r3, r7, #8
 800728c:	2218      	movs	r2, #24
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fc91 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007296:	233f      	movs	r3, #63	; 0x3f
 8007298:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800729a:	f240 1301 	movw	r3, #257	; 0x101
 800729e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80072a0:	1dfb      	adds	r3, r7, #7
 80072a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80072a4:	2301      	movs	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072a8:	f107 0308 	add.w	r3, r7, #8
 80072ac:	2100      	movs	r1, #0
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 ff0c 	bl	80080cc <hci_send_req>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da01      	bge.n	80072be <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80072ba:	23ff      	movs	r3, #255	; 0xff
 80072bc:	e000      	b.n	80072c0 <aci_gatt_init+0x42>
  return status;
 80072be:	79fb      	ldrb	r3, [r7, #7]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80072c8:	b590      	push	{r4, r7, lr}
 80072ca:	b0cf      	sub	sp, #316	; 0x13c
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4604      	mov	r4, r0
 80072d0:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80072d4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80072d8:	6001      	str	r1, [r0, #0]
 80072da:	4610      	mov	r0, r2
 80072dc:	4619      	mov	r1, r3
 80072de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072e2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80072e6:	4622      	mov	r2, r4
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072ee:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80072f2:	4602      	mov	r2, r0
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072fa:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80072fe:	460a      	mov	r2, r1
 8007300:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007302:	f107 0310 	add.w	r3, r7, #16
 8007306:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800730a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800730e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d00a      	beq.n	800732e <aci_gatt_add_service+0x66>
 8007318:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800731c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d101      	bne.n	800732a <aci_gatt_add_service+0x62>
 8007326:	2311      	movs	r3, #17
 8007328:	e002      	b.n	8007330 <aci_gatt_add_service+0x68>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <aci_gatt_add_service+0x68>
 800732e:	2303      	movs	r3, #3
 8007330:	f107 0210 	add.w	r2, r7, #16
 8007334:	4413      	add	r3, r2
 8007336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800733a:	f107 030c 	add.w	r3, r7, #12
 800733e:	2203      	movs	r2, #3
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fc38 	bl	8007bb8 <Osal_MemSet>
  int index_input = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800734e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007352:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007356:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800735a:	7812      	ldrb	r2, [r2, #0]
 800735c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800735e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007362:	3301      	adds	r3, #1
 8007364:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007368:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800736c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d002      	beq.n	800737c <aci_gatt_add_service+0xb4>
 8007376:	2b02      	cmp	r3, #2
 8007378:	d004      	beq.n	8007384 <aci_gatt_add_service+0xbc>
 800737a:	e007      	b.n	800738c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800737c:	2302      	movs	r3, #2
 800737e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007382:	e005      	b.n	8007390 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007384:	2310      	movs	r3, #16
 8007386:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800738a:	e001      	b.n	8007390 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800738c:	2397      	movs	r3, #151	; 0x97
 800738e:	e06c      	b.n	800746a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007390:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007394:	1c58      	adds	r0, r3, #1
 8007396:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800739a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800739e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	f000 fbf8 	bl	8007b98 <Osal_MemCpy>
    index_input += size;
 80073a8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80073ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80073b0:	4413      	add	r3, r2
 80073b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80073b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073be:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80073c2:	7812      	ldrb	r2, [r2, #0]
 80073c4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80073c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ca:	3301      	adds	r3, #1
 80073cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80073d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073d8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80073e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073e4:	3301      	adds	r3, #1
 80073e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073ee:	2218      	movs	r2, #24
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fbe0 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073f8:	233f      	movs	r3, #63	; 0x3f
 80073fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80073fe:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007402:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007406:	f107 0310 	add.w	r3, r7, #16
 800740a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800740e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007412:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007416:	f107 030c 	add.w	r3, r7, #12
 800741a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800741e:	2303      	movs	r3, #3
 8007420:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007424:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fe4e 	bl	80080cc <hci_send_req>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	da01      	bge.n	800743a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8007436:	23ff      	movs	r3, #255	; 0xff
 8007438:	e017      	b.n	800746a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800743a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800743e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007448:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800744c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	e00a      	b.n	800746a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007454:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007458:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800745c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007460:	b29a      	uxth	r2, r3
 8007462:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007466:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007470:	46bd      	mov	sp, r7
 8007472:	bd90      	pop	{r4, r7, pc}

08007474 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b0d1      	sub	sp, #324	; 0x144
 8007478:	af00      	add	r7, sp, #0
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007482:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8007486:	600a      	str	r2, [r1, #0]
 8007488:	4619      	mov	r1, r3
 800748a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800748e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007492:	4622      	mov	r2, r4
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800749a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800749e:	4602      	mov	r2, r0
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80074a6:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80074aa:	460a      	mov	r2, r1
 80074ac:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80074ae:	f107 0318 	add.w	r3, r7, #24
 80074b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80074b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80074ba:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d00a      	beq.n	80074da <aci_gatt_add_char+0x66>
 80074c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80074c8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d101      	bne.n	80074d6 <aci_gatt_add_char+0x62>
 80074d2:	2313      	movs	r3, #19
 80074d4:	e002      	b.n	80074dc <aci_gatt_add_char+0x68>
 80074d6:	2303      	movs	r3, #3
 80074d8:	e000      	b.n	80074dc <aci_gatt_add_char+0x68>
 80074da:	2305      	movs	r3, #5
 80074dc:	f107 0218 	add.w	r2, r7, #24
 80074e0:	4413      	add	r3, r2
 80074e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80074e6:	f107 0314 	add.w	r3, r7, #20
 80074ea:	2203      	movs	r2, #3
 80074ec:	2100      	movs	r1, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 fb62 	bl	8007bb8 <Osal_MemSet>
  int index_input = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80074fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80074fe:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007502:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007506:	8812      	ldrh	r2, [r2, #0]
 8007508:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800750a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800750e:	3302      	adds	r3, #2
 8007510:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007514:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007518:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800751c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007520:	7812      	ldrb	r2, [r2, #0]
 8007522:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007524:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007528:	3301      	adds	r3, #1
 800752a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800752e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007532:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d002      	beq.n	8007542 <aci_gatt_add_char+0xce>
 800753c:	2b02      	cmp	r3, #2
 800753e:	d004      	beq.n	800754a <aci_gatt_add_char+0xd6>
 8007540:	e007      	b.n	8007552 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007542:	2302      	movs	r3, #2
 8007544:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007548:	e005      	b.n	8007556 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800754a:	2310      	movs	r3, #16
 800754c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007550:	e001      	b.n	8007556 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007552:	2397      	movs	r3, #151	; 0x97
 8007554:	e091      	b.n	800767a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007556:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800755a:	1cd8      	adds	r0, r3, #3
 800755c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007560:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007564:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007568:	6819      	ldr	r1, [r3, #0]
 800756a:	f000 fb15 	bl	8007b98 <Osal_MemCpy>
    index_input += size;
 800756e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007572:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007576:	4413      	add	r3, r2
 8007578:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800757c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007580:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007584:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007588:	8812      	ldrh	r2, [r2, #0]
 800758a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800758c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007590:	3302      	adds	r3, #2
 8007592:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007596:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800759a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800759e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80075a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075a4:	3301      	adds	r3, #1
 80075a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80075aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075ae:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80075b2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80075b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075b8:	3301      	adds	r3, #1
 80075ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80075be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075c2:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80075c6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80075c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075cc:	3301      	adds	r3, #1
 80075ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80075d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075d6:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80075da:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80075dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075e0:	3301      	adds	r3, #1
 80075e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80075e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075ea:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80075ee:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80075f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075f4:	3301      	adds	r3, #1
 80075f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075fe:	2218      	movs	r2, #24
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fad8 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007608:	233f      	movs	r3, #63	; 0x3f
 800760a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800760e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007612:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007616:	f107 0318 	add.w	r3, r7, #24
 800761a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800761e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007622:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007626:	f107 0314 	add.w	r3, r7, #20
 800762a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800762e:	2303      	movs	r3, #3
 8007630:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007634:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007638:	2100      	movs	r1, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fd46 	bl	80080cc <hci_send_req>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	da01      	bge.n	800764a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007646:	23ff      	movs	r3, #255	; 0xff
 8007648:	e017      	b.n	800767a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800764a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800764e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007658:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800765c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	e00a      	b.n	800767a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007664:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007668:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800766c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007670:	b29a      	uxth	r2, r3
 8007672:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007676:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007680:	46bd      	mov	sp, r7
 8007682:	bd90      	pop	{r4, r7, pc}

08007684 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007684:	b5b0      	push	{r4, r5, r7, lr}
 8007686:	b0cc      	sub	sp, #304	; 0x130
 8007688:	af00      	add	r7, sp, #0
 800768a:	4605      	mov	r5, r0
 800768c:	460c      	mov	r4, r1
 800768e:	4610      	mov	r0, r2
 8007690:	4619      	mov	r1, r3
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800769a:	462a      	mov	r2, r5
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076a6:	4622      	mov	r2, r4
 80076a8:	801a      	strh	r2, [r3, #0]
 80076aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ae:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80076b2:	4602      	mov	r2, r0
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80076be:	460a      	mov	r2, r1
 80076c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80076c2:	f107 0310 	add.w	r3, r7, #16
 80076c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80076dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076e4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80076e8:	8812      	ldrh	r2, [r2, #0]
 80076ea:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80076ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076f0:	3302      	adds	r3, #2
 80076f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80076f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076fe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007702:	8812      	ldrh	r2, [r2, #0]
 8007704:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007706:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800770a:	3302      	adds	r3, #2
 800770c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007714:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007718:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007724:	3301      	adds	r3, #1
 8007726:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800772a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007732:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007736:	7812      	ldrb	r2, [r2, #0]
 8007738:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800773a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800773e:	3301      	adds	r3, #1
 8007740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007748:	1d98      	adds	r0, r3, #6
 800774a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800775a:	f000 fa1d 	bl	8007b98 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800775e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007762:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800776c:	4413      	add	r3, r2
 800776e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007772:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007776:	2218      	movs	r2, #24
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fa1c 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007780:	233f      	movs	r3, #63	; 0x3f
 8007782:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007786:	f44f 7383 	mov.w	r3, #262	; 0x106
 800778a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800778e:	f107 0310 	add.w	r3, r7, #16
 8007792:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800779a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800779e:	f107 030f 	add.w	r3, r7, #15
 80077a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077b0:	2100      	movs	r1, #0
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fc8a 	bl	80080cc <hci_send_req>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	da01      	bge.n	80077c2 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80077be:	23ff      	movs	r3, #255	; 0xff
 80077c0:	e004      	b.n	80077cc <aci_gatt_update_char_value+0x148>
  return status;
 80077c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80077ca:	781b      	ldrb	r3, [r3, #0]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bdb0      	pop	{r4, r5, r7, pc}

080077d6 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b0cc      	sub	sp, #304	; 0x130
 80077da:	af00      	add	r7, sp, #0
 80077dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80077ee:	4602      	mov	r2, r0
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80077fa:	460a      	mov	r2, r1
 80077fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80077fe:	f107 0310 	add.w	r3, r7, #16
 8007802:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800781c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007820:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007824:	7812      	ldrb	r2, [r2, #0]
 8007826:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007828:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800782c:	3301      	adds	r3, #1
 800782e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800783a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800783e:	7812      	ldrb	r2, [r2, #0]
 8007840:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007842:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007846:	3301      	adds	r3, #1
 8007848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800784c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007850:	1c98      	adds	r0, r3, #2
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007864:	6819      	ldr	r1, [r3, #0]
 8007866:	f000 f997 	bl	8007b98 <Osal_MemCpy>
  index_input += Length;
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007878:	4413      	add	r3, r2
 800787a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800787e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007882:	2218      	movs	r2, #24
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f996 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800788c:	233f      	movs	r3, #63	; 0x3f
 800788e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007892:	230c      	movs	r3, #12
 8007894:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007898:	f107 0310 	add.w	r3, r7, #16
 800789c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078a8:	f107 030f 	add.w	r3, r7, #15
 80078ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078b0:	2301      	movs	r3, #1
 80078b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fc05 	bl	80080cc <hci_send_req>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	da01      	bge.n	80078cc <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80078c8:	23ff      	movs	r3, #255	; 0xff
 80078ca:	e004      	b.n	80078d6 <aci_hal_write_config_data+0x100>
  return status;
 80078cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80078d4:	781b      	ldrb	r3, [r3, #0]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b0cc      	sub	sp, #304	; 0x130
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4602      	mov	r2, r0
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80078f0:	701a      	strb	r2, [r3, #0]
 80078f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80078fa:	460a      	mov	r2, r1
 80078fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80078fe:	f107 0310 	add.w	r3, r7, #16
 8007902:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007912:	2300      	movs	r3, #0
 8007914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007920:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007924:	7812      	ldrb	r2, [r2, #0]
 8007926:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007928:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800792c:	3301      	adds	r3, #1
 800792e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007936:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800793a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007946:	3301      	adds	r3, #1
 8007948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800794c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007950:	2218      	movs	r2, #24
 8007952:	2100      	movs	r1, #0
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f92f 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800795a:	233f      	movs	r3, #63	; 0x3f
 800795c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007960:	230f      	movs	r3, #15
 8007962:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007966:	f107 0310 	add.w	r3, r7, #16
 800796a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800796e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007972:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007976:	f107 030f 	add.w	r3, r7, #15
 800797a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800797e:	2301      	movs	r3, #1
 8007980:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fb9e 	bl	80080cc <hci_send_req>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	da01      	bge.n	800799a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007996:	23ff      	movs	r3, #255	; 0xff
 8007998:	e004      	b.n	80079a4 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800799a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079a2:	781b      	ldrb	r3, [r3, #0]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b0cc      	sub	sp, #304	; 0x130
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	4602      	mov	r2, r0
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80079be:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80079c0:	f107 0310 	add.w	r3, r7, #16
 80079c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80079da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079e2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80079e6:	8812      	ldrh	r2, [r2, #0]
 80079e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80079ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079ee:	3302      	adds	r3, #2
 80079f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079f8:	2218      	movs	r2, #24
 80079fa:	2100      	movs	r1, #0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f8db 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a02:	233f      	movs	r3, #63	; 0x3f
 8007a04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007a08:	2318      	movs	r3, #24
 8007a0a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a0e:	f107 0310 	add.w	r3, r7, #16
 8007a12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a1e:	f107 030f 	add.w	r3, r7, #15
 8007a22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a26:	2301      	movs	r3, #1
 8007a28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a30:	2100      	movs	r1, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fb4a 	bl	80080cc <hci_send_req>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	da01      	bge.n	8007a42 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007a3e:	23ff      	movs	r3, #255	; 0xff
 8007a40:	e004      	b.n	8007a4c <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a46:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a4a:	781b      	ldrb	r3, [r3, #0]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b088      	sub	sp, #32
 8007a5a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a60:	f107 0308 	add.w	r3, r7, #8
 8007a64:	2218      	movs	r2, #24
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f8a5 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x03;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007a72:	2303      	movs	r3, #3
 8007a74:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a76:	1dfb      	adds	r3, r7, #7
 8007a78:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a7e:	f107 0308 	add.w	r3, r7, #8
 8007a82:	2100      	movs	r1, #0
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fb21 	bl	80080cc <hci_send_req>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	da01      	bge.n	8007a94 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007a90:	23ff      	movs	r3, #255	; 0xff
 8007a92:	e000      	b.n	8007a96 <hci_reset+0x40>
  return status;
 8007a94:	79fb      	ldrb	r3, [r7, #7]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007a9e:	b590      	push	{r4, r7, lr}
 8007aa0:	b0cd      	sub	sp, #308	; 0x134
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	4608      	mov	r0, r1
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007ab2:	4622      	mov	r2, r4
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007abe:	4602      	mov	r2, r0
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007aca:	460a      	mov	r2, r1
 8007acc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007ace:	f107 0310 	add.w	r3, r7, #16
 8007ad2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ada:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007af0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007af4:	7812      	ldrb	r2, [r2, #0]
 8007af6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007afc:	3301      	adds	r3, #1
 8007afe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b0a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007b0e:	7812      	ldrb	r2, [r2, #0]
 8007b10:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b16:	3301      	adds	r3, #1
 8007b18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b24:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b30:	3301      	adds	r3, #1
 8007b32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b3a:	2218      	movs	r2, #24
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 f83a 	bl	8007bb8 <Osal_MemSet>
  rq.ogf = 0x08;
 8007b44:	2308      	movs	r3, #8
 8007b46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007b4a:	2331      	movs	r3, #49	; 0x31
 8007b4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b50:	f107 0310 	add.w	r3, r7, #16
 8007b54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b60:	f107 030f 	add.w	r3, r7, #15
 8007b64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b72:	2100      	movs	r1, #0
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 faa9 	bl	80080cc <hci_send_req>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	da01      	bge.n	8007b84 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007b80:	23ff      	movs	r3, #255	; 0xff
 8007b82:	e004      	b.n	8007b8e <hci_le_set_default_phy+0xf0>
  return status;
 8007b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b88:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b8c:	781b      	ldrb	r3, [r3, #0]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd90      	pop	{r4, r7, pc}

08007b98 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f002 f981 	bl	8009eb0 <memcpy>
 8007bae:	4603      	mov	r3, r0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f002 f945 	bl	8009e58 <memset>
 8007bce:	4603      	mov	r3, r0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
  return;
 8007bdc:	bf00      	nop
}
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007be6:	b480      	push	{r7}
 8007be8:	af00      	add	r7, sp, #0
  return;
 8007bea:	bf00      	nop
}
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  return;
 8007bf8:	bf00      	nop
}
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007c02:	b480      	push	{r7}
 8007c04:	af00      	add	r7, sp, #0
  return;
 8007c06:	bf00      	nop
}
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  return;
 8007c14:	bf00      	nop
}
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007c1e:	b480      	push	{r7}
 8007c20:	af00      	add	r7, sp, #0
  return;
 8007c22:	bf00      	nop
}
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  return;
 8007c30:	bf00      	nop
}
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	af00      	add	r7, sp, #0
  return;
 8007c3e:	bf00      	nop
}
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  return;
 8007c4c:	bf00      	nop
}
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007c56:	b480      	push	{r7}
 8007c58:	af00      	add	r7, sp, #0
  return;
 8007c5a:	bf00      	nop
}
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
  return;
 8007c68:	bf00      	nop
}
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007c72:	b480      	push	{r7}
 8007c74:	af00      	add	r7, sp, #0
  return;
 8007c76:	bf00      	nop
}
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007c80:	b480      	push	{r7}
 8007c82:	af00      	add	r7, sp, #0
  return;
 8007c84:	bf00      	nop
}
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007c8e:	b480      	push	{r7}
 8007c90:	af00      	add	r7, sp, #0
  return;
 8007c92:	bf00      	nop
}
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  return;
 8007ca0:	bf00      	nop
}
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007caa:	b480      	push	{r7}
 8007cac:	af00      	add	r7, sp, #0
  return;
 8007cae:	bf00      	nop
}
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	af00      	add	r7, sp, #0
  return;
 8007cbc:	bf00      	nop
}
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
	...

08007cc8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007ccc:	4b04      	ldr	r3, [pc, #16]	; (8007ce0 <SVCCTL_Init+0x18>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007cd2:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <SVCCTL_Init+0x1c>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007cd8:	f000 f806 	bl	8007ce8 <SVCCTL_SvcInit>

  return;
 8007cdc:	bf00      	nop
}
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000028 	.word	0x20000028
 8007ce4:	20000048 	.word	0x20000048

08007ce8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  BAS_Init();
 8007cec:	f7ff ff74 	bl	8007bd8 <BAS_Init>

  BLS_Init();
 8007cf0:	f7ff ff79 	bl	8007be6 <BLS_Init>

  CRS_STM_Init();
 8007cf4:	f7ff ff7e 	bl	8007bf4 <CRS_STM_Init>

  DIS_Init();
 8007cf8:	f7ff ff83 	bl	8007c02 <DIS_Init>

  EDS_STM_Init();
 8007cfc:	f7ff ff88 	bl	8007c10 <EDS_STM_Init>

  HIDS_Init();
 8007d00:	f7ff ff8d 	bl	8007c1e <HIDS_Init>

  HRS_Init();
 8007d04:	f7ff ff92 	bl	8007c2c <HRS_Init>

  HTS_Init();
 8007d08:	f7ff ff97 	bl	8007c3a <HTS_Init>

  IAS_Init();
 8007d0c:	f7ff ff9c 	bl	8007c48 <IAS_Init>

  LLS_Init();
 8007d10:	f7ff ffa1 	bl	8007c56 <LLS_Init>

  TPS_Init();
 8007d14:	f7ff ffa6 	bl	8007c64 <TPS_Init>

  MOTENV_STM_Init();
 8007d18:	f7ff ffab 	bl	8007c72 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007d1c:	f7ff ffb0 	bl	8007c80 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007d20:	f7ff ffb5 	bl	8007c8e <ZDD_STM_Init>

  OTAS_STM_Init();
 8007d24:	f7ff ffba 	bl	8007c9c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007d28:	f7ff ffc6 	bl	8007cb8 <BVOPUS_STM_Init>

  MESH_Init();
 8007d2c:	f7ff ffbd 	bl	8007caa <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007d30:	f001 fadc 	bl	80092ec <SVCCTL_InitCustomSvc>
  
  return;
 8007d34:	bf00      	nop
}
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007d40:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d42:	7f1b      	ldrb	r3, [r3, #28]
 8007d44:	4619      	mov	r1, r3
 8007d46:	4a08      	ldr	r2, [pc, #32]	; (8007d68 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007d4e:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d50:	7f1b      	ldrb	r3, [r3, #28]
 8007d52:	3301      	adds	r3, #1
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <SVCCTL_RegisterSvcHandler+0x30>)
 8007d58:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007d5a:	bf00      	nop
}
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20000028 	.word	0x20000028

08007d6c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3301      	adds	r3, #1
 8007d78:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2bff      	cmp	r3, #255	; 0xff
 8007d84:	d125      	bne.n	8007dd2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3302      	adds	r3, #2
 8007d8a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d9a:	d118      	bne.n	8007dce <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	757b      	strb	r3, [r7, #21]
 8007da0:	e00d      	b.n	8007dbe <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007da2:	7d7b      	ldrb	r3, [r7, #21]
 8007da4:	4a1a      	ldr	r2, [pc, #104]	; (8007e10 <SVCCTL_UserEvtRx+0xa4>)
 8007da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d108      	bne.n	8007dca <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007db8:	7d7b      	ldrb	r3, [r7, #21]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	757b      	strb	r3, [r7, #21]
 8007dbe:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <SVCCTL_UserEvtRx+0xa4>)
 8007dc0:	7f1b      	ldrb	r3, [r3, #28]
 8007dc2:	7d7a      	ldrb	r2, [r7, #21]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d3ec      	bcc.n	8007da2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007dc8:	e002      	b.n	8007dd0 <SVCCTL_UserEvtRx+0x64>
              break;
 8007dca:	bf00      	nop
          break;
 8007dcc:	e000      	b.n	8007dd0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007dce:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007dd0:	e000      	b.n	8007dd4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007dd2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d00f      	beq.n	8007dfa <SVCCTL_UserEvtRx+0x8e>
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	dc10      	bgt.n	8007e00 <SVCCTL_UserEvtRx+0x94>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <SVCCTL_UserEvtRx+0x7c>
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d006      	beq.n	8007df4 <SVCCTL_UserEvtRx+0x88>
 8007de6:	e00b      	b.n	8007e00 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 ff85 	bl	8008cf8 <SVCCTL_App_Notification>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75bb      	strb	r3, [r7, #22]
      break;
 8007df2:	e008      	b.n	8007e06 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007df4:	2301      	movs	r3, #1
 8007df6:	75bb      	strb	r3, [r7, #22]
      break;
 8007df8:	e005      	b.n	8007e06 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75bb      	strb	r3, [r7, #22]
      break;
 8007dfe:	e002      	b.n	8007e06 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75bb      	strb	r3, [r7, #22]
      break;
 8007e04:	bf00      	nop
  }

  return (return_status);
 8007e06:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000028 	.word	0x20000028

08007e14 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e1c:	f107 030c 	add.w	r3, r7, #12
 8007e20:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	212e      	movs	r1, #46	; 0x2e
 8007e2c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007e30:	f000 fae8 	bl	8008404 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	330b      	adds	r3, #11
 8007e38:	78db      	ldrb	r3, [r3, #3]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3720      	adds	r7, #32
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b088      	sub	sp, #32
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e4a:	f107 030c 	add.w	r3, r7, #12
 8007e4e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	210f      	movs	r1, #15
 8007e5a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007e5e:	f000 fad1 	bl	8008404 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	330b      	adds	r3, #11
 8007e66:	78db      	ldrb	r3, [r3, #3]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	2110      	movs	r1, #16
 8007e84:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007e88:	f000 fabc 	bl	8008404 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	330b      	adds	r3, #11
 8007e90:	78db      	ldrb	r3, [r3, #3]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b08b      	sub	sp, #44	; 0x2c
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007ec4:	4b4a      	ldr	r3, [pc, #296]	; (8007ff0 <SHCI_GetWirelessFwInfo+0x154>)
 8007ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007ecc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007ed6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a44      	ldr	r2, [pc, #272]	; (8007ff4 <SHCI_GetWirelessFwInfo+0x158>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d10f      	bne.n	8007f08 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	617b      	str	r3, [r7, #20]
 8007f06:	e01a      	b.n	8007f3e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007f10:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007f14:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	0e1b      	lsrs	r3, r3, #24
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	0c1b      	lsrs	r3, r3, #16
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	0a1b      	lsrs	r3, r3, #8
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	091b      	lsrs	r3, r3, #4
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 030f 	and.w	r3, r3, #15
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	0e1b      	lsrs	r3, r3, #24
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	0c1b      	lsrs	r3, r3, #16
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	0a1b      	lsrs	r3, r3, #8
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	0e1b      	lsrs	r3, r3, #24
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	0c1b      	lsrs	r3, r3, #16
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	0a1b      	lsrs	r3, r3, #8
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	0e1b      	lsrs	r3, r3, #24
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	0c1b      	lsrs	r3, r3, #16
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	372c      	adds	r7, #44	; 0x2c
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	58004000 	.word	0x58004000
 8007ff4:	a94656b9 	.word	0xa94656b9

08007ff8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	4a08      	ldr	r2, [pc, #32]	; (8008028 <hci_init+0x30>)
 8008008:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800800a:	4a08      	ldr	r2, [pc, #32]	; (800802c <hci_init+0x34>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008010:	4806      	ldr	r0, [pc, #24]	; (800802c <hci_init+0x34>)
 8008012:	f000 f979 	bl	8008308 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f8da 	bl	80081d4 <TlInit>

  return;
 8008020:	bf00      	nop
}
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	200005f0 	.word	0x200005f0
 800802c:	200005c8 	.word	0x200005c8

08008030 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008036:	4822      	ldr	r0, [pc, #136]	; (80080c0 <hci_user_evt_proc+0x90>)
 8008038:	f000 fd32 	bl	8008aa0 <LST_is_empty>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d12b      	bne.n	800809a <hci_user_evt_proc+0x6a>
 8008042:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <hci_user_evt_proc+0x94>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d027      	beq.n	800809a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800804a:	f107 030c 	add.w	r3, r7, #12
 800804e:	4619      	mov	r1, r3
 8008050:	481b      	ldr	r0, [pc, #108]	; (80080c0 <hci_user_evt_proc+0x90>)
 8008052:	f000 fdb4 	bl	8008bbe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008056:	4b1c      	ldr	r3, [pc, #112]	; (80080c8 <hci_user_evt_proc+0x98>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00c      	beq.n	8008078 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008062:	2301      	movs	r3, #1
 8008064:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008066:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <hci_user_evt_proc+0x98>)
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	1d3a      	adds	r2, r7, #4
 800806c:	4610      	mov	r0, r2
 800806e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008070:	793a      	ldrb	r2, [r7, #4]
 8008072:	4b14      	ldr	r3, [pc, #80]	; (80080c4 <hci_user_evt_proc+0x94>)
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	e002      	b.n	800807e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008078:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <hci_user_evt_proc+0x94>)
 800807a:	2201      	movs	r2, #1
 800807c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800807e:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <hci_user_evt_proc+0x94>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d004      	beq.n	8008090 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fc0d 	bl	80088a8 <TL_MM_EvtDone>
 800808e:	e004      	b.n	800809a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4619      	mov	r1, r3
 8008094:	480a      	ldr	r0, [pc, #40]	; (80080c0 <hci_user_evt_proc+0x90>)
 8008096:	f000 fd25 	bl	8008ae4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800809a:	4809      	ldr	r0, [pc, #36]	; (80080c0 <hci_user_evt_proc+0x90>)
 800809c:	f000 fd00 	bl	8008aa0 <LST_is_empty>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d107      	bne.n	80080b6 <hci_user_evt_proc+0x86>
 80080a6:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <hci_user_evt_proc+0x94>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80080ae:	4804      	ldr	r0, [pc, #16]	; (80080c0 <hci_user_evt_proc+0x90>)
 80080b0:	f001 f83a 	bl	8009128 <hci_notify_asynch_evt>
  }


  return;
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
}
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000050 	.word	0x20000050
 80080c4:	2000005c 	.word	0x2000005c
 80080c8:	200005c8 	.word	0x200005c8

080080cc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80080d8:	2000      	movs	r0, #0
 80080da:	f000 f8d1 	bl	8008280 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80080de:	2300      	movs	r3, #0
 80080e0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	b21b      	sxth	r3, r3
 80080e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ec:	b21a      	sxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	029b      	lsls	r3, r3, #10
 80080f4:	b21b      	sxth	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b21b      	sxth	r3, r3
 80080fa:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80080fc:	4b33      	ldr	r3, [pc, #204]	; (80081cc <hci_send_req+0x100>)
 80080fe:	2201      	movs	r2, #1
 8008100:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	b2d9      	uxtb	r1, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	8bbb      	ldrh	r3, [r7, #28]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f890 	bl	8008234 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008114:	e04e      	b.n	80081b4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008116:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800811a:	f001 f81c 	bl	8009156 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800811e:	e043      	b.n	80081a8 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	4619      	mov	r1, r3
 8008126:	482a      	ldr	r0, [pc, #168]	; (80081d0 <hci_send_req+0x104>)
 8008128:	f000 fd49 	bl	8008bbe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	7a5b      	ldrb	r3, [r3, #9]
 8008130:	2b0f      	cmp	r3, #15
 8008132:	d114      	bne.n	800815e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	330b      	adds	r3, #11
 8008138:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	885b      	ldrh	r3, [r3, #2]
 800813e:	b29b      	uxth	r3, r3
 8008140:	8bba      	ldrh	r2, [r7, #28]
 8008142:	429a      	cmp	r2, r3
 8008144:	d104      	bne.n	8008150 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	7812      	ldrb	r2, [r2, #0]
 800814e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d027      	beq.n	80081a8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008158:	2301      	movs	r3, #1
 800815a:	77fb      	strb	r3, [r7, #31]
 800815c:	e024      	b.n	80081a8 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	330b      	adds	r3, #11
 8008162:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800816a:	b29b      	uxth	r3, r3
 800816c:	8bba      	ldrh	r2, [r7, #28]
 800816e:	429a      	cmp	r2, r3
 8008170:	d114      	bne.n	800819c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	7a9b      	ldrb	r3, [r3, #10]
 8008176:	3b03      	subs	r3, #3
 8008178:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695a      	ldr	r2, [r3, #20]
 800817e:	7dfb      	ldrb	r3, [r7, #23]
 8008180:	429a      	cmp	r2, r3
 8008182:	bfa8      	it	ge
 8008184:	461a      	movge	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6918      	ldr	r0, [r3, #16]
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	1cd9      	adds	r1, r3, #3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	461a      	mov	r2, r3
 8008198:	f001 fe8a 	bl	8009eb0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80081a4:	2301      	movs	r3, #1
 80081a6:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80081a8:	4809      	ldr	r0, [pc, #36]	; (80081d0 <hci_send_req+0x104>)
 80081aa:	f000 fc79 	bl	8008aa0 <LST_is_empty>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0b5      	beq.n	8008120 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80081b4:	7ffb      	ldrb	r3, [r7, #31]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0ad      	beq.n	8008116 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80081ba:	2001      	movs	r0, #1
 80081bc:	f000 f860 	bl	8008280 <NotifyCmdStatus>

  return 0;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	200005f4 	.word	0x200005f4
 80081d0:	200005e8 	.word	0x200005e8

080081d4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80081dc:	480f      	ldr	r0, [pc, #60]	; (800821c <TlInit+0x48>)
 80081de:	f000 fc4f 	bl	8008a80 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80081e2:	4a0f      	ldr	r2, [pc, #60]	; (8008220 <TlInit+0x4c>)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80081e8:	480e      	ldr	r0, [pc, #56]	; (8008224 <TlInit+0x50>)
 80081ea:	f000 fc49 	bl	8008a80 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <TlInit+0x54>)
 80081f0:	2201      	movs	r2, #1
 80081f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <TlInit+0x58>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <TlInit+0x5c>)
 8008202:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008204:	4b09      	ldr	r3, [pc, #36]	; (800822c <TlInit+0x58>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f107 0208 	add.w	r2, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
  }

  return;
 8008210:	bf00      	nop
 8008212:	bf00      	nop
}
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	200005e8 	.word	0x200005e8
 8008220:	20000058 	.word	0x20000058
 8008224:	20000050 	.word	0x20000050
 8008228:	2000005c 	.word	0x2000005c
 800822c:	200005c8 	.word	0x200005c8
 8008230:	080082c1 	.word	0x080082c1

08008234 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	4603      	mov	r3, r0
 800823c:	603a      	str	r2, [r7, #0]
 800823e:	80fb      	strh	r3, [r7, #6]
 8008240:	460b      	mov	r3, r1
 8008242:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008244:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <SendCmd+0x44>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	88fa      	ldrh	r2, [r7, #6]
 800824a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <SendCmd+0x44>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	797a      	ldrb	r2, [r7, #5]
 8008254:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008256:	4b08      	ldr	r3, [pc, #32]	; (8008278 <SendCmd+0x44>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	330c      	adds	r3, #12
 800825c:	797a      	ldrb	r2, [r7, #5]
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	4618      	mov	r0, r3
 8008262:	f001 fe25 	bl	8009eb0 <memcpy>

  hciContext.io.Send(0,0);
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <SendCmd+0x48>)
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	2100      	movs	r1, #0
 800826c:	2000      	movs	r0, #0
 800826e:	4798      	blx	r3

  return;
 8008270:	bf00      	nop
}
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	20000058 	.word	0x20000058
 800827c:	200005c8 	.word	0x200005c8

08008280 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800828a:	79fb      	ldrb	r3, [r7, #7]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008290:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <NotifyCmdStatus+0x3c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00d      	beq.n	80082b4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008298:	4b08      	ldr	r3, [pc, #32]	; (80082bc <NotifyCmdStatus+0x3c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2000      	movs	r0, #0
 800829e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80082a0:	e008      	b.n	80082b4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80082a2:	4b06      	ldr	r3, [pc, #24]	; (80082bc <NotifyCmdStatus+0x3c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d004      	beq.n	80082b4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80082aa:	4b04      	ldr	r3, [pc, #16]	; (80082bc <NotifyCmdStatus+0x3c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2001      	movs	r0, #1
 80082b0:	4798      	blx	r3
  return;
 80082b2:	bf00      	nop
 80082b4:	bf00      	nop
}
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	200005f0 	.word	0x200005f0

080082c0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7a5b      	ldrb	r3, [r3, #9]
 80082cc:	2b0f      	cmp	r3, #15
 80082ce:	d003      	beq.n	80082d8 <TlEvtReceived+0x18>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7a5b      	ldrb	r3, [r3, #9]
 80082d4:	2b0e      	cmp	r3, #14
 80082d6:	d107      	bne.n	80082e8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4809      	ldr	r0, [pc, #36]	; (8008300 <TlEvtReceived+0x40>)
 80082dc:	f000 fc28 	bl	8008b30 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80082e0:	2000      	movs	r0, #0
 80082e2:	f000 ff2d 	bl	8009140 <hci_cmd_resp_release>
 80082e6:	e006      	b.n	80082f6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4806      	ldr	r0, [pc, #24]	; (8008304 <TlEvtReceived+0x44>)
 80082ec:	f000 fc20 	bl	8008b30 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80082f0:	4804      	ldr	r0, [pc, #16]	; (8008304 <TlEvtReceived+0x44>)
 80082f2:	f000 ff19 	bl	8009128 <hci_notify_asynch_evt>
  }

  return;
 80082f6:	bf00      	nop
}
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200005e8 	.word	0x200005e8
 8008304:	20000050 	.word	0x20000050

08008308 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a05      	ldr	r2, [pc, #20]	; (8008328 <hci_register_io_bus+0x20>)
 8008314:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a04      	ldr	r2, [pc, #16]	; (800832c <hci_register_io_bus+0x24>)
 800831a:	611a      	str	r2, [r3, #16]

  return;
 800831c:	bf00      	nop
}
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	08008621 	.word	0x08008621
 800832c:	08008689 	.word	0x08008689

08008330 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	4a08      	ldr	r2, [pc, #32]	; (8008360 <shci_init+0x30>)
 8008340:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008342:	4a08      	ldr	r2, [pc, #32]	; (8008364 <shci_init+0x34>)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008348:	4806      	ldr	r0, [pc, #24]	; (8008364 <shci_init+0x34>)
 800834a:	f000 f915 	bl	8008578 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f898 	bl	8008488 <TlInit>

  return;
 8008358:	bf00      	nop
}
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000618 	.word	0x20000618
 8008364:	200005f8 	.word	0x200005f8

08008368 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800836e:	4822      	ldr	r0, [pc, #136]	; (80083f8 <shci_user_evt_proc+0x90>)
 8008370:	f000 fb96 	bl	8008aa0 <LST_is_empty>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d12b      	bne.n	80083d2 <shci_user_evt_proc+0x6a>
 800837a:	4b20      	ldr	r3, [pc, #128]	; (80083fc <shci_user_evt_proc+0x94>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d027      	beq.n	80083d2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008382:	f107 030c 	add.w	r3, r7, #12
 8008386:	4619      	mov	r1, r3
 8008388:	481b      	ldr	r0, [pc, #108]	; (80083f8 <shci_user_evt_proc+0x90>)
 800838a:	f000 fc18 	bl	8008bbe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800838e:	4b1c      	ldr	r3, [pc, #112]	; (8008400 <shci_user_evt_proc+0x98>)
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00c      	beq.n	80083b0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800839a:	2301      	movs	r3, #1
 800839c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800839e:	4b18      	ldr	r3, [pc, #96]	; (8008400 <shci_user_evt_proc+0x98>)
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	1d3a      	adds	r2, r7, #4
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80083a8:	793a      	ldrb	r2, [r7, #4]
 80083aa:	4b14      	ldr	r3, [pc, #80]	; (80083fc <shci_user_evt_proc+0x94>)
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80083b0:	4b12      	ldr	r3, [pc, #72]	; (80083fc <shci_user_evt_proc+0x94>)
 80083b2:	2201      	movs	r2, #1
 80083b4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80083b6:	4b11      	ldr	r3, [pc, #68]	; (80083fc <shci_user_evt_proc+0x94>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d004      	beq.n	80083c8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fa71 	bl	80088a8 <TL_MM_EvtDone>
 80083c6:	e004      	b.n	80083d2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4619      	mov	r1, r3
 80083cc:	480a      	ldr	r0, [pc, #40]	; (80083f8 <shci_user_evt_proc+0x90>)
 80083ce:	f000 fb89 	bl	8008ae4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80083d2:	4809      	ldr	r0, [pc, #36]	; (80083f8 <shci_user_evt_proc+0x90>)
 80083d4:	f000 fb64 	bl	8008aa0 <LST_is_empty>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d107      	bne.n	80083ee <shci_user_evt_proc+0x86>
 80083de:	4b07      	ldr	r3, [pc, #28]	; (80083fc <shci_user_evt_proc+0x94>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80083e6:	4804      	ldr	r0, [pc, #16]	; (80083f8 <shci_user_evt_proc+0x90>)
 80083e8:	f7f8 fb67 	bl	8000aba <shci_notify_asynch_evt>
  }


  return;
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
}
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000060 	.word	0x20000060
 80083fc:	20000070 	.word	0x20000070
 8008400:	200005f8 	.word	0x200005f8

08008404 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60ba      	str	r2, [r7, #8]
 800840c:	607b      	str	r3, [r7, #4]
 800840e:	4603      	mov	r3, r0
 8008410:	81fb      	strh	r3, [r7, #14]
 8008412:	460b      	mov	r3, r1
 8008414:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008416:	2000      	movs	r0, #0
 8008418:	f000 f868 	bl	80084ec <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800841c:	4b17      	ldr	r3, [pc, #92]	; (800847c <shci_send+0x78>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	89fa      	ldrh	r2, [r7, #14]
 8008422:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008426:	4b15      	ldr	r3, [pc, #84]	; (800847c <shci_send+0x78>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	7b7a      	ldrb	r2, [r7, #13]
 800842c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <shci_send+0x78>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	330c      	adds	r3, #12
 8008434:	7b7a      	ldrb	r2, [r7, #13]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fd39 	bl	8009eb0 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800843e:	4b10      	ldr	r3, [pc, #64]	; (8008480 <shci_send+0x7c>)
 8008440:	2201      	movs	r2, #1
 8008442:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <shci_send+0x80>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	2100      	movs	r1, #0
 800844a:	2000      	movs	r0, #0
 800844c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800844e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008452:	f7f8 fb49 	bl	8000ae8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f103 0008 	add.w	r0, r3, #8
 800845c:	4b07      	ldr	r3, [pc, #28]	; (800847c <shci_send+0x78>)
 800845e:	6819      	ldr	r1, [r3, #0]
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <shci_send+0x78>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	789b      	ldrb	r3, [r3, #2]
 8008466:	3303      	adds	r3, #3
 8008468:	461a      	mov	r2, r3
 800846a:	f001 fd21 	bl	8009eb0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800846e:	2001      	movs	r0, #1
 8008470:	f000 f83c 	bl	80084ec <Cmd_SetStatus>

  return;
 8008474:	bf00      	nop
}
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	2000006c 	.word	0x2000006c
 8008480:	2000061c 	.word	0x2000061c
 8008484:	200005f8 	.word	0x200005f8

08008488 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008490:	4a10      	ldr	r2, [pc, #64]	; (80084d4 <TlInit+0x4c>)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008496:	4810      	ldr	r0, [pc, #64]	; (80084d8 <TlInit+0x50>)
 8008498:	f000 faf2 	bl	8008a80 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800849c:	2001      	movs	r0, #1
 800849e:	f000 f825 	bl	80084ec <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80084a2:	4b0e      	ldr	r3, [pc, #56]	; (80084dc <TlInit+0x54>)
 80084a4:	2201      	movs	r2, #1
 80084a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80084a8:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <TlInit+0x58>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00c      	beq.n	80084ca <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80084b4:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <TlInit+0x5c>)
 80084b6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80084b8:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <TlInit+0x60>)
 80084ba:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80084bc:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <TlInit+0x58>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f107 020c 	add.w	r2, r7, #12
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
  }

  return;
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
}
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	2000006c 	.word	0x2000006c
 80084d8:	20000060 	.word	0x20000060
 80084dc:	20000070 	.word	0x20000070
 80084e0:	200005f8 	.word	0x200005f8
 80084e4:	0800853d 	.word	0x0800853d
 80084e8:	08008555 	.word	0x08008555

080084ec <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <Cmd_SetStatus+0x48>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d003      	beq.n	800850c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008504:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <Cmd_SetStatus+0x48>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2000      	movs	r0, #0
 800850a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800850c:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <Cmd_SetStatus+0x4c>)
 800850e:	2200      	movs	r2, #0
 8008510:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008512:	e00b      	b.n	800852c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008514:	4b08      	ldr	r3, [pc, #32]	; (8008538 <Cmd_SetStatus+0x4c>)
 8008516:	2201      	movs	r2, #1
 8008518:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800851a:	4b06      	ldr	r3, [pc, #24]	; (8008534 <Cmd_SetStatus+0x48>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d004      	beq.n	800852c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008522:	4b04      	ldr	r3, [pc, #16]	; (8008534 <Cmd_SetStatus+0x48>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2001      	movs	r0, #1
 8008528:	4798      	blx	r3
  return;
 800852a:	bf00      	nop
 800852c:	bf00      	nop
}
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	20000618 	.word	0x20000618
 8008538:	20000068 	.word	0x20000068

0800853c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008544:	2000      	movs	r0, #0
 8008546:	f7f8 fac4 	bl	8000ad2 <shci_cmd_resp_release>

  return;
 800854a:	bf00      	nop
}
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	4805      	ldr	r0, [pc, #20]	; (8008574 <TlUserEvtReceived+0x20>)
 8008560:	f000 fae6 	bl	8008b30 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008564:	4803      	ldr	r0, [pc, #12]	; (8008574 <TlUserEvtReceived+0x20>)
 8008566:	f7f8 faa8 	bl	8000aba <shci_notify_asynch_evt>

  return;
 800856a:	bf00      	nop
}
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	20000060 	.word	0x20000060

08008578 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a05      	ldr	r2, [pc, #20]	; (8008598 <shci_register_io_bus+0x20>)
 8008584:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a04      	ldr	r2, [pc, #16]	; (800859c <shci_register_io_bus+0x24>)
 800858a:	611a      	str	r2, [r3, #16]

  return;
 800858c:	bf00      	nop
}
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	08008735 	.word	0x08008735
 800859c:	08008789 	.word	0x08008789

080085a0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80085a4:	f001 f906 	bl	80097b4 <HW_IPCC_Enable>

  return;
 80085a8:	bf00      	nop
}
 80085aa:	bd80      	pop	{r7, pc}

080085ac <TL_Init>:


void TL_Init( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80085b0:	4b10      	ldr	r3, [pc, #64]	; (80085f4 <TL_Init+0x48>)
 80085b2:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <TL_Init+0x4c>)
 80085b4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <TL_Init+0x48>)
 80085b8:	4a10      	ldr	r2, [pc, #64]	; (80085fc <TL_Init+0x50>)
 80085ba:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <TL_Init+0x48>)
 80085be:	4a10      	ldr	r2, [pc, #64]	; (8008600 <TL_Init+0x54>)
 80085c0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80085c2:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <TL_Init+0x48>)
 80085c4:	4a0f      	ldr	r2, [pc, #60]	; (8008604 <TL_Init+0x58>)
 80085c6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <TL_Init+0x48>)
 80085ca:	4a0f      	ldr	r2, [pc, #60]	; (8008608 <TL_Init+0x5c>)
 80085cc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <TL_Init+0x48>)
 80085d0:	4a0e      	ldr	r2, [pc, #56]	; (800860c <TL_Init+0x60>)
 80085d2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80085d4:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <TL_Init+0x48>)
 80085d6:	4a0e      	ldr	r2, [pc, #56]	; (8008610 <TL_Init+0x64>)
 80085d8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80085da:	4b06      	ldr	r3, [pc, #24]	; (80085f4 <TL_Init+0x48>)
 80085dc:	4a0d      	ldr	r2, [pc, #52]	; (8008614 <TL_Init+0x68>)
 80085de:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <TL_Init+0x48>)
 80085e2:	4a0d      	ldr	r2, [pc, #52]	; (8008618 <TL_Init+0x6c>)
 80085e4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80085e6:	4b03      	ldr	r3, [pc, #12]	; (80085f4 <TL_Init+0x48>)
 80085e8:	4a0c      	ldr	r2, [pc, #48]	; (800861c <TL_Init+0x70>)
 80085ea:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80085ec:	f001 f8f6 	bl	80097dc <HW_IPCC_Init>

  return;
 80085f0:	bf00      	nop
}
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20030000 	.word	0x20030000
 80085f8:	20030028 	.word	0x20030028
 80085fc:	20030048 	.word	0x20030048
 8008600:	20030058 	.word	0x20030058
 8008604:	20030068 	.word	0x20030068
 8008608:	20030070 	.word	0x20030070
 800860c:	20030078 	.word	0x20030078
 8008610:	20030080 	.word	0x20030080
 8008614:	2003009c 	.word	0x2003009c
 8008618:	200300a0 	.word	0x200300a0
 800861c:	200300ac 	.word	0x200300ac

08008620 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800862c:	4811      	ldr	r0, [pc, #68]	; (8008674 <TL_BLE_Init+0x54>)
 800862e:	f000 fa27 	bl	8008a80 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008632:	4b11      	ldr	r3, [pc, #68]	; (8008678 <TL_BLE_Init+0x58>)
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	689a      	ldr	r2, [r3, #8]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4a0c      	ldr	r2, [pc, #48]	; (800867c <TL_BLE_Init+0x5c>)
 800864c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	4a08      	ldr	r2, [pc, #32]	; (8008674 <TL_BLE_Init+0x54>)
 8008652:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008654:	f001 f8d8 	bl	8009808 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a08      	ldr	r2, [pc, #32]	; (8008680 <TL_BLE_Init+0x60>)
 800865e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	4a07      	ldr	r2, [pc, #28]	; (8008684 <TL_BLE_Init+0x64>)
 8008666:	6013      	str	r3, [r2, #0]

  return 0;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200300c8 	.word	0x200300c8
 8008678:	20030000 	.word	0x20030000
 800867c:	20030a58 	.word	0x20030a58
 8008680:	20000628 	.word	0x20000628
 8008684:	2000062c 	.word	0x2000062c

08008688 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008694:	4b09      	ldr	r3, [pc, #36]	; (80086bc <TL_BLE_SendCmd+0x34>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2201      	movs	r2, #1
 800869c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800869e:	4b07      	ldr	r3, [pc, #28]	; (80086bc <TL_BLE_SendCmd+0x34>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4619      	mov	r1, r3
 80086a6:	2001      	movs	r0, #1
 80086a8:	f000 f96c 	bl	8008984 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80086ac:	f001 f8b6 	bl	800981c <HW_IPCC_BLE_SendCmd>

  return 0;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20030000 	.word	0x20030000

080086c0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80086c6:	e01c      	b.n	8008702 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80086c8:	1d3b      	adds	r3, r7, #4
 80086ca:	4619      	mov	r1, r3
 80086cc:	4812      	ldr	r0, [pc, #72]	; (8008718 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80086ce:	f000 fa76 	bl	8008bbe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7a5b      	ldrb	r3, [r3, #9]
 80086d6:	2b0f      	cmp	r3, #15
 80086d8:	d003      	beq.n	80086e2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7a5b      	ldrb	r3, [r3, #9]
 80086de:	2b0e      	cmp	r3, #14
 80086e0:	d105      	bne.n	80086ee <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4619      	mov	r1, r3
 80086e6:	2002      	movs	r0, #2
 80086e8:	f000 f94c 	bl	8008984 <OutputDbgTrace>
 80086ec:	e004      	b.n	80086f8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4619      	mov	r1, r3
 80086f2:	2003      	movs	r0, #3
 80086f4:	f000 f946 	bl	8008984 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80086f8:	4b08      	ldr	r3, [pc, #32]	; (800871c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	4610      	mov	r0, r2
 8008700:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008702:	4805      	ldr	r0, [pc, #20]	; (8008718 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008704:	f000 f9cc 	bl	8008aa0 <LST_is_empty>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0dc      	beq.n	80086c8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800870e:	bf00      	nop
}
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200300c8 	.word	0x200300c8
 800871c:	20000628 	.word	0x20000628

08008720 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008724:	4b02      	ldr	r3, [pc, #8]	; (8008730 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4798      	blx	r3

  return;
 800872a:	bf00      	nop
}
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	2000062c 	.word	0x2000062c

08008734 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008740:	480d      	ldr	r0, [pc, #52]	; (8008778 <TL_SYS_Init+0x44>)
 8008742:	f000 f99d 	bl	8008a80 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008746:	4b0d      	ldr	r3, [pc, #52]	; (800877c <TL_SYS_Init+0x48>)
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4a08      	ldr	r2, [pc, #32]	; (8008778 <TL_SYS_Init+0x44>)
 8008758:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800875a:	f001 f881 	bl	8009860 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a07      	ldr	r2, [pc, #28]	; (8008780 <TL_SYS_Init+0x4c>)
 8008764:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	4a06      	ldr	r2, [pc, #24]	; (8008784 <TL_SYS_Init+0x50>)
 800876c:	6013      	str	r3, [r2, #0]

  return 0;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	200300d0 	.word	0x200300d0
 800877c:	20030000 	.word	0x20030000
 8008780:	20000630 	.word	0x20000630
 8008784:	20000634 	.word	0x20000634

08008788 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008794:	4b09      	ldr	r3, [pc, #36]	; (80087bc <TL_SYS_SendCmd+0x34>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2210      	movs	r2, #16
 800879c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800879e:	4b07      	ldr	r3, [pc, #28]	; (80087bc <TL_SYS_SendCmd+0x34>)
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4619      	mov	r1, r3
 80087a6:	2004      	movs	r0, #4
 80087a8:	f000 f8ec 	bl	8008984 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80087ac:	f001 f862 	bl	8009874 <HW_IPCC_SYS_SendCmd>

  return 0;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20030000 	.word	0x20030000

080087c0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80087c4:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4619      	mov	r1, r3
 80087cc:	2005      	movs	r0, #5
 80087ce:	f000 f8d9 	bl	8008984 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80087d2:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a03      	ldr	r2, [pc, #12]	; (80087e4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80087d8:	68d2      	ldr	r2, [r2, #12]
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3

  return;
 80087e0:	bf00      	nop
}
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20030000 	.word	0x20030000
 80087e8:	20000630 	.word	0x20000630

080087ec <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80087f2:	e00e      	b.n	8008812 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80087f4:	1d3b      	adds	r3, r7, #4
 80087f6:	4619      	mov	r1, r3
 80087f8:	480b      	ldr	r0, [pc, #44]	; (8008828 <HW_IPCC_SYS_EvtNot+0x3c>)
 80087fa:	f000 f9e0 	bl	8008bbe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4619      	mov	r1, r3
 8008802:	2006      	movs	r0, #6
 8008804:	f000 f8be 	bl	8008984 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008808:	4b08      	ldr	r3, [pc, #32]	; (800882c <HW_IPCC_SYS_EvtNot+0x40>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4610      	mov	r0, r2
 8008810:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008812:	4805      	ldr	r0, [pc, #20]	; (8008828 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008814:	f000 f944 	bl	8008aa0 <LST_is_empty>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0ea      	beq.n	80087f4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800881e:	bf00      	nop
}
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	200300d0 	.word	0x200300d0
 800882c:	20000634 	.word	0x20000634

08008830 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008838:	4817      	ldr	r0, [pc, #92]	; (8008898 <TL_MM_Init+0x68>)
 800883a:	f000 f921 	bl	8008a80 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800883e:	4817      	ldr	r0, [pc, #92]	; (800889c <TL_MM_Init+0x6c>)
 8008840:	f000 f91e 	bl	8008a80 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008844:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <TL_MM_Init+0x70>)
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	4a16      	ldr	r2, [pc, #88]	; (80088a4 <TL_MM_Init+0x74>)
 800884a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800884c:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <TL_MM_Init+0x74>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6892      	ldr	r2, [r2, #8]
 8008854:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008856:	4b13      	ldr	r3, [pc, #76]	; (80088a4 <TL_MM_Init+0x74>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	68d2      	ldr	r2, [r2, #12]
 800885e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008860:	4b10      	ldr	r3, [pc, #64]	; (80088a4 <TL_MM_Init+0x74>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a0c      	ldr	r2, [pc, #48]	; (8008898 <TL_MM_Init+0x68>)
 8008866:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008868:	4b0e      	ldr	r3, [pc, #56]	; (80088a4 <TL_MM_Init+0x74>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6812      	ldr	r2, [r2, #0]
 8008870:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <TL_MM_Init+0x74>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	6852      	ldr	r2, [r2, #4]
 800887a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800887c:	4b09      	ldr	r3, [pc, #36]	; (80088a4 <TL_MM_Init+0x74>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6912      	ldr	r2, [r2, #16]
 8008884:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008886:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <TL_MM_Init+0x74>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6952      	ldr	r2, [r2, #20]
 800888e:	619a      	str	r2, [r3, #24]

  return;
 8008890:	bf00      	nop
}
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	200300b8 	.word	0x200300b8
 800889c:	20000620 	.word	0x20000620
 80088a0:	20030000 	.word	0x20030000
 80088a4:	20000638 	.word	0x20000638

080088a8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	4807      	ldr	r0, [pc, #28]	; (80088d0 <TL_MM_EvtDone+0x28>)
 80088b4:	f000 f93c 	bl	8008b30 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	2000      	movs	r0, #0
 80088bc:	f000 f862 	bl	8008984 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80088c0:	4804      	ldr	r0, [pc, #16]	; (80088d4 <TL_MM_EvtDone+0x2c>)
 80088c2:	f000 fffd 	bl	80098c0 <HW_IPCC_MM_SendFreeBuf>

  return;
 80088c6:	bf00      	nop
}
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000620 	.word	0x20000620
 80088d4:	080088d9 	.word	0x080088d9

080088d8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80088de:	e00c      	b.n	80088fa <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80088e0:	1d3b      	adds	r3, r7, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	480a      	ldr	r0, [pc, #40]	; (8008910 <SendFreeBuf+0x38>)
 80088e6:	f000 f96a 	bl	8008bbe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80088ea:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <SendFreeBuf+0x3c>)
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	4611      	mov	r1, r2
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f91b 	bl	8008b30 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80088fa:	4805      	ldr	r0, [pc, #20]	; (8008910 <SendFreeBuf+0x38>)
 80088fc:	f000 f8d0 	bl	8008aa0 <LST_is_empty>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0ec      	beq.n	80088e0 <SendFreeBuf+0x8>
  }

  return;
 8008906:	bf00      	nop
}
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000620 	.word	0x20000620
 8008914:	20030000 	.word	0x20030000

08008918 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800891c:	4805      	ldr	r0, [pc, #20]	; (8008934 <TL_TRACES_Init+0x1c>)
 800891e:	f000 f8af 	bl	8008a80 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008922:	4b05      	ldr	r3, [pc, #20]	; (8008938 <TL_TRACES_Init+0x20>)
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	4a03      	ldr	r2, [pc, #12]	; (8008934 <TL_TRACES_Init+0x1c>)
 8008928:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800892a:	f000 ffff 	bl	800992c <HW_IPCC_TRACES_Init>

  return;
 800892e:	bf00      	nop
}
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	200300c0 	.word	0x200300c0
 8008938:	20030000 	.word	0x20030000

0800893c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008942:	e008      	b.n	8008956 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008944:	1d3b      	adds	r3, r7, #4
 8008946:	4619      	mov	r1, r3
 8008948:	4808      	ldr	r0, [pc, #32]	; (800896c <HW_IPCC_TRACES_EvtNot+0x30>)
 800894a:	f000 f938 	bl	8008bbe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f80d 	bl	8008970 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008956:	4805      	ldr	r0, [pc, #20]	; (800896c <HW_IPCC_TRACES_EvtNot+0x30>)
 8008958:	f000 f8a2 	bl	8008aa0 <LST_is_empty>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0f0      	beq.n	8008944 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008962:	bf00      	nop
}
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200300c0 	.word	0x200300c0

08008970 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	6039      	str	r1, [r7, #0]
 800898e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	2b06      	cmp	r3, #6
 8008994:	d845      	bhi.n	8008a22 <OutputDbgTrace+0x9e>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <OutputDbgTrace+0x18>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089b9 	.word	0x080089b9
 80089a0:	080089dd 	.word	0x080089dd
 80089a4:	080089e3 	.word	0x080089e3
 80089a8:	080089f7 	.word	0x080089f7
 80089ac:	08008a03 	.word	0x08008a03
 80089b0:	08008a09 	.word	0x08008a09
 80089b4:	08008a17 	.word	0x08008a17
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	7a5b      	ldrb	r3, [r3, #9]
 80089c0:	2bff      	cmp	r3, #255	; 0xff
 80089c2:	d005      	beq.n	80089d0 <OutputDbgTrace+0x4c>
 80089c4:	2bff      	cmp	r3, #255	; 0xff
 80089c6:	dc05      	bgt.n	80089d4 <OutputDbgTrace+0x50>
 80089c8:	2b0e      	cmp	r3, #14
 80089ca:	d005      	beq.n	80089d8 <OutputDbgTrace+0x54>
 80089cc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80089ce:	e001      	b.n	80089d4 <OutputDbgTrace+0x50>
          break;
 80089d0:	bf00      	nop
 80089d2:	e027      	b.n	8008a24 <OutputDbgTrace+0xa0>
          break;
 80089d4:	bf00      	nop
 80089d6:	e025      	b.n	8008a24 <OutputDbgTrace+0xa0>
          break;
 80089d8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80089da:	e023      	b.n	8008a24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80089e0:	e020      	b.n	8008a24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	7a5b      	ldrb	r3, [r3, #9]
 80089ea:	2b0e      	cmp	r3, #14
 80089ec:	d001      	beq.n	80089f2 <OutputDbgTrace+0x6e>
 80089ee:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80089f0:	e000      	b.n	80089f4 <OutputDbgTrace+0x70>
          break;
 80089f2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80089f4:	e016      	b.n	8008a24 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	7a5b      	ldrb	r3, [r3, #9]
 80089fe:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a00:	e010      	b.n	8008a24 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008a06:	e00d      	b.n	8008a24 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	7a5b      	ldrb	r3, [r3, #9]
 8008a10:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008a12:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a14:	e006      	b.n	8008a24 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	7a5b      	ldrb	r3, [r3, #9]
 8008a1e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008a20:	e000      	b.n	8008a24 <OutputDbgTrace+0xa0>

    default:
      break;
 8008a22:	bf00      	nop
  }

  return;
 8008a24:	bf00      	nop
}
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008a3a:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <OTP_Read+0x48>)
 8008a3c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008a3e:	e002      	b.n	8008a46 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3b08      	subs	r3, #8
 8008a44:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3307      	adds	r3, #7
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	79fa      	ldrb	r2, [r7, #7]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d003      	beq.n	8008a5a <OTP_Read+0x2a>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4a09      	ldr	r2, [pc, #36]	; (8008a7c <OTP_Read+0x4c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d1f2      	bne.n	8008a40 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3307      	adds	r3, #7
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	79fa      	ldrb	r2, [r7, #7]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d001      	beq.n	8008a6a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	1fff73f8 	.word	0x1fff73f8
 8008a7c:	1fff7000 	.word	0x1fff7000

08008a80 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	605a      	str	r2, [r3, #4]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8008aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ab2:	b672      	cpsid	i
}
 8008ab4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d102      	bne.n	8008ac6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	75fb      	strb	r3, [r7, #23]
 8008ac4:	e001      	b.n	8008aca <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	75fb      	strb	r3, [r7, #23]
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f383 8810 	msr	PRIMASK, r3
}
 8008ad4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aee:	f3ef 8310 	mrs	r3, PRIMASK
 8008af2:	60fb      	str	r3, [r7, #12]
  return(result);
 8008af4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008af6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008af8:	b672      	cpsid	i
}
 8008afa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	605a      	str	r2, [r3, #4]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f383 8810 	msr	PRIMASK, r3
}
 8008b22:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b24:	bf00      	nop
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b40:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b44:	b672      	cpsid	i
}
 8008b46:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f383 8810 	msr	PRIMASK, r3
}
 8008b6e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b84:	f3ef 8310 	mrs	r3, PRIMASK
 8008b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b8e:	b672      	cpsid	i
}
 8008b90:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6812      	ldr	r2, [r2, #0]
 8008b9a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	6852      	ldr	r2, [r2, #4]
 8008ba4:	605a      	str	r2, [r3, #4]
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f383 8810 	msr	PRIMASK, r3
}
 8008bb0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b086      	sub	sp, #24
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bd2:	b672      	cpsid	i
}
 8008bd4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff ffca 	bl	8008b7c <LST_remove_node>
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f383 8810 	msr	PRIMASK, r3
}
 8008bf2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008bf4:	bf00      	nop
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008c00:	4b03      	ldr	r3, [pc, #12]	; (8008c10 <LL_FLASH_GetUDN+0x14>)
 8008c02:	681b      	ldr	r3, [r3, #0]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	1fff7580 	.word	0x1fff7580

08008c14 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008c18:	4b03      	ldr	r3, [pc, #12]	; (8008c28 <LL_FLASH_GetDeviceID+0x14>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	b2db      	uxtb	r3, r3
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	1fff7584 	.word	0x1fff7584

08008c2c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008c30:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <LL_FLASH_GetSTCompanyID+0x14>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	0a1b      	lsrs	r3, r3, #8
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	1fff7584 	.word	0x1fff7584

08008c44 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008c44:	b5b0      	push	{r4, r5, r7, lr}
 8008c46:	b090      	sub	sp, #64	; 0x40
 8008c48:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c4a:	2392      	movs	r3, #146	; 0x92
 8008c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008c50:	4b25      	ldr	r3, [pc, #148]	; (8008ce8 <APP_BLE_Init+0xa4>)
 8008c52:	1d3c      	adds	r4, r7, #4
 8008c54:	461d      	mov	r5, r3
 8008c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c66:	c403      	stmia	r4!, {r0, r1}
 8008c68:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008c6a:	f000 f905 	bl	8008e78 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008c6e:	2101      	movs	r1, #1
 8008c70:	2002      	movs	r0, #2
 8008c72:	f000 fe83 	bl	800997c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008c76:	4a1d      	ldr	r2, [pc, #116]	; (8008cec <APP_BLE_Init+0xa8>)
 8008c78:	2100      	movs	r1, #0
 8008c7a:	2002      	movs	r0, #2
 8008c7c:	f000 ffaa 	bl	8009bd4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008c80:	1d3b      	adds	r3, r7, #4
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff f8c6 	bl	8007e14 <SHCI_C2_BLE_Init>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8008c8e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008c96:	f7f8 fb31 	bl	80012fc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008c9a:	f000 f903 	bl	8008ea4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008c9e:	f7ff f813 	bl	8007cc8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008ca2:	4b13      	ldr	r3, [pc, #76]	; (8008cf0 <APP_BLE_Init+0xac>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008caa:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <APP_BLE_Init+0xac>)
 8008cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cb0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008cb2:	4a10      	ldr	r2, [pc, #64]	; (8008cf4 <APP_BLE_Init+0xb0>)
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	f000 ff8c 	bl	8009bd4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008cbc:	2006      	movs	r0, #6
 8008cbe:	f7fe fe76 	bl	80079ae <aci_hal_set_radio_activity_mask>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008cc8:	f000 fa9b 	bl	8009202 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008ccc:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <APP_BLE_Init+0xac>)
 8008cce:	2200      	movs	r2, #0
 8008cd0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008cd2:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <APP_BLE_Init+0xac>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008cd8:	2001      	movs	r0, #1
 8008cda:	f000 f997 	bl	800900c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008cde:	bf00      	nop
}
 8008ce0:	3740      	adds	r7, #64	; 0x40
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	08009f2c 	.word	0x08009f2c
 8008cec:	08008031 	.word	0x08008031
 8008cf0:	20000644 	.word	0x20000644
 8008cf4:	080090f5 	.word	0x080090f5

08008cf8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08a      	sub	sp, #40	; 0x28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008d00:	2392      	movs	r3, #146	; 0x92
 8008d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2bff      	cmp	r3, #255	; 0xff
 8008d12:	d053      	beq.n	8008dbc <SVCCTL_App_Notification+0xc4>
 8008d14:	2bff      	cmp	r3, #255	; 0xff
 8008d16:	f300 80a1 	bgt.w	8008e5c <SVCCTL_App_Notification+0x164>
 8008d1a:	2b05      	cmp	r3, #5
 8008d1c:	d002      	beq.n	8008d24 <SVCCTL_App_Notification+0x2c>
 8008d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d20:	d020      	beq.n	8008d64 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008d22:	e09b      	b.n	8008e5c <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	3302      	adds	r3, #2
 8008d28:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	4b4e      	ldr	r3, [pc, #312]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008d34:	8adb      	ldrh	r3, [r3, #22]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d106      	bne.n	8008d48 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008d3a:	4b4c      	ldr	r3, [pc, #304]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008d40:	4b4a      	ldr	r3, [pc, #296]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008d48:	2001      	movs	r0, #1
 8008d4a:	f000 f95f 	bl	800900c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008d4e:	4b48      	ldr	r3, [pc, #288]	; (8008e70 <SVCCTL_App_Notification+0x178>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008d54:	4b45      	ldr	r3, [pc, #276]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008d56:	8ada      	ldrh	r2, [r3, #22]
 8008d58:	4b45      	ldr	r3, [pc, #276]	; (8008e70 <SVCCTL_App_Notification+0x178>)
 8008d5a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008d5c:	4844      	ldr	r0, [pc, #272]	; (8008e70 <SVCCTL_App_Notification+0x178>)
 8008d5e:	f000 fa3c 	bl	80091da <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008d62:	e07e      	b.n	8008e62 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	3302      	adds	r3, #2
 8008d68:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d001      	beq.n	8008d76 <SVCCTL_App_Notification+0x7e>
 8008d72:	2b03      	cmp	r3, #3
          break;
 8008d74:	e021      	b.n	8008dba <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008d7c:	4b3b      	ldr	r3, [pc, #236]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008d7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d104      	bne.n	8008d90 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008d86:	4b39      	ldr	r3, [pc, #228]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008d88:	2206      	movs	r2, #6
 8008d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008d8e:	e003      	b.n	8008d98 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008d90:	4b36      	ldr	r3, [pc, #216]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008d92:	2205      	movs	r2, #5
 8008d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	4b32      	ldr	r3, [pc, #200]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008da2:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008da4:	4b32      	ldr	r3, [pc, #200]	; (8008e70 <SVCCTL_App_Notification+0x178>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008daa:	4b30      	ldr	r3, [pc, #192]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008dac:	8ada      	ldrh	r2, [r3, #22]
 8008dae:	4b30      	ldr	r3, [pc, #192]	; (8008e70 <SVCCTL_App_Notification+0x178>)
 8008db0:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008db2:	482f      	ldr	r0, [pc, #188]	; (8008e70 <SVCCTL_App_Notification+0x178>)
 8008db4:	f000 fa11 	bl	80091da <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008db8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008dba:	e052      	b.n	8008e62 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	3302      	adds	r3, #2
 8008dc0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dcc:	d040      	beq.n	8008e50 <SVCCTL_App_Notification+0x158>
 8008dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd2:	dc45      	bgt.n	8008e60 <SVCCTL_App_Notification+0x168>
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d03d      	beq.n	8008e54 <SVCCTL_App_Notification+0x15c>
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	db41      	blt.n	8008e60 <SVCCTL_App_Notification+0x168>
 8008ddc:	f240 420a 	movw	r2, #1034	; 0x40a
 8008de0:	4293      	cmp	r3, r2
 8008de2:	dc3d      	bgt.n	8008e60 <SVCCTL_App_Notification+0x168>
 8008de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008de8:	dd3a      	ble.n	8008e60 <SVCCTL_App_Notification+0x168>
 8008dea:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008dee:	2b09      	cmp	r3, #9
 8008df0:	d836      	bhi.n	8008e60 <SVCCTL_App_Notification+0x168>
 8008df2:	a201      	add	r2, pc, #4	; (adr r2, 8008df8 <SVCCTL_App_Notification+0x100>)
 8008df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df8:	08008e49 	.word	0x08008e49
 8008dfc:	08008e21 	.word	0x08008e21
 8008e00:	08008e61 	.word	0x08008e61
 8008e04:	08008e61 	.word	0x08008e61
 8008e08:	08008e61 	.word	0x08008e61
 8008e0c:	08008e61 	.word	0x08008e61
 8008e10:	08008e59 	.word	0x08008e59
 8008e14:	08008e61 	.word	0x08008e61
 8008e18:	08008e35 	.word	0x08008e35
 8008e1c:	08008e59 	.word	0x08008e59
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008e20:	4b12      	ldr	r3, [pc, #72]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008e22:	8adb      	ldrh	r3, [r3, #22]
 8008e24:	4913      	ldr	r1, [pc, #76]	; (8008e74 <SVCCTL_App_Notification+0x17c>)
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fe f818 	bl	8006e5c <aci_gap_pass_key_resp>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008e32:	e012      	b.n	8008e5a <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008e34:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <SVCCTL_App_Notification+0x174>)
 8008e36:	8adb      	ldrh	r3, [r3, #22]
 8008e38:	2101      	movs	r1, #1
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe f9b8 	bl	80071b0 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008e46:	e008      	b.n	8008e5a <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	3302      	adds	r3, #2
 8008e4c:	61bb      	str	r3, [r7, #24]
          break;
 8008e4e:	e004      	b.n	8008e5a <SVCCTL_App_Notification+0x162>
          break;
 8008e50:	bf00      	nop
 8008e52:	e005      	b.n	8008e60 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008e54:	bf00      	nop
 8008e56:	e003      	b.n	8008e60 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008e58:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e5a:	e001      	b.n	8008e60 <SVCCTL_App_Notification+0x168>
      break;
 8008e5c:	bf00      	nop
 8008e5e:	e000      	b.n	8008e62 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e60:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008e62:	2301      	movs	r3, #1
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3728      	adds	r7, #40	; 0x28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20000644 	.word	0x20000644
 8008e70:	200006c8 	.word	0x200006c8
 8008e74:	0001b207 	.word	0x0001b207

08008e78 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008e7e:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <Ble_Tl_Init+0x20>)
 8008e80:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008e82:	4b06      	ldr	r3, [pc, #24]	; (8008e9c <Ble_Tl_Init+0x24>)
 8008e84:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008e86:	463b      	mov	r3, r7
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <Ble_Tl_Init+0x28>)
 8008e8c:	f7ff f8b4 	bl	8007ff8 <hci_init>

  return;
 8008e90:	bf00      	nop
}
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	200300d8 	.word	0x200300d8
 8008e9c:	080091a5 	.word	0x080091a5
 8008ea0:	0800916d 	.word	0x0800916d

08008ea4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ea6:	b08d      	sub	sp, #52	; 0x34
 8008ea8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008eaa:	2300      	movs	r3, #0
 8008eac:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008eae:	2392      	movs	r3, #146	; 0x92
 8008eb0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008eb2:	f7fe fdd0 	bl	8007a56 <hci_reset>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008eba:	f000 f8d7 	bl	800906c <BleGetBdAddress>
 8008ebe:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	2106      	movs	r1, #6
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	f7fe fc86 	bl	80077d6 <aci_hal_write_config_data>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008ece:	4a4a      	ldr	r2, [pc, #296]	; (8008ff8 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008ed0:	2110      	movs	r1, #16
 8008ed2:	2018      	movs	r0, #24
 8008ed4:	f7fe fc7f 	bl	80077d6 <aci_hal_write_config_data>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008edc:	4a47      	ldr	r2, [pc, #284]	; (8008ffc <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008ede:	2110      	movs	r1, #16
 8008ee0:	2008      	movs	r0, #8
 8008ee2:	f7fe fc78 	bl	80077d6 <aci_hal_write_config_data>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008eea:	2118      	movs	r1, #24
 8008eec:	2001      	movs	r0, #1
 8008eee:	f7fe fcf7 	bl	80078e0 <aci_hal_set_tx_power_level>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008ef6:	f7fe f9c2 	bl	800727e <aci_gatt_init>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	f043 0301 	orr.w	r3, r3, #1
 8008f08:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d01f      	beq.n	8008f50 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008f10:	4b3b      	ldr	r3, [pc, #236]	; (8009000 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008f12:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008f14:	1dba      	adds	r2, r7, #6
 8008f16:	7bf8      	ldrb	r0, [r7, #15]
 8008f18:	1cbb      	adds	r3, r7, #2
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	1d3b      	adds	r3, r7, #4
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	4613      	mov	r3, r2
 8008f22:	2208      	movs	r2, #8
 8008f24:	2100      	movs	r1, #0
 8008f26:	f7fe f800 	bl	8006f2a <aci_gap_init>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008f2e:	88fc      	ldrh	r4, [r7, #6]
 8008f30:	88bd      	ldrh	r5, [r7, #4]
 8008f32:	68b8      	ldr	r0, [r7, #8]
 8008f34:	f7f7 f922 	bl	800017c <strlen>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	4613      	mov	r3, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	4629      	mov	r1, r5
 8008f46:	4620      	mov	r0, r4
 8008f48:	f7fe fb9c 	bl	8007684 <aci_gatt_update_char_value>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008f50:	88f8      	ldrh	r0, [r7, #6]
 8008f52:	8879      	ldrh	r1, [r7, #2]
 8008f54:	463b      	mov	r3, r7
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2302      	movs	r3, #2
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f7fe fb92 	bl	8007684 <aci_gatt_update_char_value>
 8008f60:	4603      	mov	r3, r0
 8008f62:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008f64:	2202      	movs	r2, #2
 8008f66:	2102      	movs	r1, #2
 8008f68:	2000      	movs	r0, #0
 8008f6a:	f7fe fd98 	bl	8007a9e <hci_le_set_default_phy>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008f72:	4b24      	ldr	r3, [pc, #144]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008f74:	2201      	movs	r2, #1
 8008f76:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008f78:	4b22      	ldr	r3, [pc, #136]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fd fe55 	bl	8006c2c <aci_gap_set_io_capability>
 8008f82:	4603      	mov	r3, r0
 8008f84:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008f86:	4b1f      	ldr	r3, [pc, #124]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008f88:	2201      	movs	r2, #1
 8008f8a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008f8e:	2208      	movs	r2, #8
 8008f90:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008f92:	4b1c      	ldr	r3, [pc, #112]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008f94:	2210      	movs	r2, #16
 8008f96:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008f98:	4b1a      	ldr	r3, [pc, #104]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008f9e:	4b19      	ldr	r3, [pc, #100]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fa0:	4a19      	ldr	r2, [pc, #100]	; (8009008 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8008fa2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008fa4:	4b17      	ldr	r3, [pc, #92]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008faa:	4b16      	ldr	r3, [pc, #88]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fac:	789c      	ldrb	r4, [r3, #2]
 8008fae:	4b15      	ldr	r3, [pc, #84]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fb0:	785d      	ldrb	r5, [r3, #1]
 8008fb2:	4b14      	ldr	r3, [pc, #80]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fb4:	791b      	ldrb	r3, [r3, #4]
 8008fb6:	4a13      	ldr	r2, [pc, #76]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fb8:	7952      	ldrb	r2, [r2, #5]
 8008fba:	4912      	ldr	r1, [pc, #72]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fbc:	78c9      	ldrb	r1, [r1, #3]
 8008fbe:	4811      	ldr	r0, [pc, #68]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fc0:	6880      	ldr	r0, [r0, #8]
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	9604      	str	r6, [sp, #16]
 8008fc6:	9003      	str	r0, [sp, #12]
 8008fc8:	9102      	str	r1, [sp, #8]
 8008fca:	9201      	str	r2, [sp, #4]
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f7fd fe7d 	bl	8006cd4 <aci_gap_set_authentication_requirement>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008fde:	4b09      	ldr	r3, [pc, #36]	; (8009004 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008fe0:	789b      	ldrb	r3, [r3, #2]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008fe6:	f7fe f8bf 	bl	8007168 <aci_gap_configure_filter_accept_list>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	0800a174 	.word	0x0800a174
 8008ffc:	0800a184 	.word	0x0800a184
 8009000:	08009f68 	.word	0x08009f68
 8009004:	20000644 	.word	0x20000644
 8009008:	0001b207 	.word	0x0001b207

0800900c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08c      	sub	sp, #48	; 0x30
 8009010:	af08      	add	r7, sp, #32
 8009012:	4603      	mov	r3, r0
 8009014:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009016:	2392      	movs	r3, #146	; 0x92
 8009018:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800901a:	4a12      	ldr	r2, [pc, #72]	; (8009064 <Adv_Request+0x58>)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009022:	2300      	movs	r3, #0
 8009024:	9306      	str	r3, [sp, #24]
 8009026:	2300      	movs	r3, #0
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	2300      	movs	r3, #0
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	2300      	movs	r3, #0
 8009030:	9303      	str	r3, [sp, #12]
 8009032:	2300      	movs	r3, #0
 8009034:	9302      	str	r3, [sp, #8]
 8009036:	2300      	movs	r3, #0
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	2300      	movs	r3, #0
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	2300      	movs	r3, #0
 8009040:	22a0      	movs	r2, #160	; 0xa0
 8009042:	2180      	movs	r1, #128	; 0x80
 8009044:	2000      	movs	r0, #0
 8009046:	f7fd fcf7 	bl	8006a38 <aci_gap_set_discoverable>
 800904a:	4603      	mov	r3, r0
 800904c:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800904e:	4906      	ldr	r1, [pc, #24]	; (8009068 <Adv_Request+0x5c>)
 8009050:	2009      	movs	r0, #9
 8009052:	f7fe f817 	bl	8007084 <aci_gap_update_adv_data>
 8009056:	4603      	mov	r3, r0
 8009058:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800905a:	bf00      	nop
}
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20000644 	.word	0x20000644
 8009068:	20000014 	.word	0x20000014

0800906c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009072:	f7ff fdc3 	bl	8008bfc <LL_FLASH_GetUDN>
 8009076:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907e:	d023      	beq.n	80090c8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009080:	f7ff fdd4 	bl	8008c2c <LL_FLASH_GetSTCompanyID>
 8009084:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009086:	f7ff fdc5 	bl	8008c14 <LL_FLASH_GetDeviceID>
 800908a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	b2da      	uxtb	r2, r3
 8009090:	4b16      	ldr	r3, [pc, #88]	; (80090ec <BleGetBdAddress+0x80>)
 8009092:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	0a1b      	lsrs	r3, r3, #8
 8009098:	b2da      	uxtb	r2, r3
 800909a:	4b14      	ldr	r3, [pc, #80]	; (80090ec <BleGetBdAddress+0x80>)
 800909c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <BleGetBdAddress+0x80>)
 80090a4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	4b10      	ldr	r3, [pc, #64]	; (80090ec <BleGetBdAddress+0x80>)
 80090ac:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	4b0d      	ldr	r3, [pc, #52]	; (80090ec <BleGetBdAddress+0x80>)
 80090b6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	0c1b      	lsrs	r3, r3, #16
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <BleGetBdAddress+0x80>)
 80090c0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80090c2:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <BleGetBdAddress+0x80>)
 80090c4:	617b      	str	r3, [r7, #20]
 80090c6:	e00b      	b.n	80090e0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80090c8:	2000      	movs	r0, #0
 80090ca:	f7ff fcb1 	bl	8008a30 <OTP_Read>
 80090ce:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e001      	b.n	80090e0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80090dc:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <BleGetBdAddress+0x84>)
 80090de:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80090e0:	697b      	ldr	r3, [r7, #20]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	2000063c 	.word	0x2000063c
 80090f0:	0800a16c 	.word	0x0800a16c

080090f4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80090fa:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <Adv_Cancel+0x30>)
 80090fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009100:	2b05      	cmp	r3, #5
 8009102:	d00a      	beq.n	800911a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009104:	2392      	movs	r3, #146	; 0x92
 8009106:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009108:	f7fd fc72 	bl	80069f0 <aci_gap_set_non_discoverable>
 800910c:	4603      	mov	r3, r0
 800910e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009110:	4b04      	ldr	r3, [pc, #16]	; (8009124 <Adv_Cancel+0x30>)
 8009112:	2200      	movs	r2, #0
 8009114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009118:	bf00      	nop
 800911a:	bf00      	nop
}
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	20000644 	.word	0x20000644

08009128 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009130:	2100      	movs	r1, #0
 8009132:	2002      	movs	r0, #2
 8009134:	f000 fd70 	bl	8009c18 <UTIL_SEQ_SetTask>

  return;
 8009138:	bf00      	nop
}
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009148:	2001      	movs	r0, #1
 800914a:	f000 fdd1 	bl	8009cf0 <UTIL_SEQ_SetEvt>

  return;
 800914e:	bf00      	nop
}
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800915e:	2001      	movs	r0, #1
 8009160:	f000 fde6 	bl	8009d30 <UTIL_SEQ_WaitEvt>

  return;
 8009164:	bf00      	nop
}
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	3308      	adds	r3, #8
 800917e:	4618      	mov	r0, r3
 8009180:	f7fe fdf4 	bl	8007d6c <SVCCTL_UserEvtRx>
 8009184:	4603      	mov	r3, r0
 8009186:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009188:	7afb      	ldrb	r3, [r7, #11]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2201      	movs	r2, #1
 8009192:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009194:	e003      	b.n	800919e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	701a      	strb	r2, [r3, #0]
  return;
 800919c:	bf00      	nop
}
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <BLE_StatusNot+0x16>
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d006      	beq.n	80091c6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80091b8:	e00b      	b.n	80091d2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80091ba:	2303      	movs	r3, #3
 80091bc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 fd56 	bl	8009c70 <UTIL_SEQ_PauseTask>
      break;
 80091c4:	e005      	b.n	80091d2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80091c6:	2303      	movs	r3, #3
 80091c8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fd70 	bl	8009cb0 <UTIL_SEQ_ResumeTask>
      break;
 80091d0:	bf00      	nop
  }

  return;
 80091d2:	bf00      	nop
}
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80091da:	b480      	push	{r7}
 80091dc:	b083      	sub	sp, #12
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <Custom_APP_Notification+0x16>
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d002      	beq.n	80091f4 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80091ee:	e002      	b.n	80091f6 <Custom_APP_Notification+0x1c>
      break;
 80091f0:	bf00      	nop
 80091f2:	e000      	b.n	80091f6 <Custom_APP_Notification+0x1c>
      break;
 80091f4:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80091f6:	bf00      	nop
}
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009202:	b480      	push	{r7}
 8009204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009206:	bf00      	nop
}
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009210:	b480      	push	{r7}
 8009212:	b08b      	sub	sp, #44	; 0x2c
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3301      	adds	r3, #1
 8009222:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2bff      	cmp	r3, #255	; 0xff
 800922a:	d151      	bne.n	80092d0 <Custom_STM_Event_Handler+0xc0>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	3302      	adds	r3, #2
 8009230:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	f640 4214 	movw	r2, #3092	; 0xc14
 800923c:	4293      	cmp	r3, r2
 800923e:	d041      	beq.n	80092c4 <Custom_STM_Event_Handler+0xb4>
 8009240:	f640 4214 	movw	r2, #3092	; 0xc14
 8009244:	4293      	cmp	r3, r2
 8009246:	dc3f      	bgt.n	80092c8 <Custom_STM_Event_Handler+0xb8>
 8009248:	f640 4201 	movw	r2, #3073	; 0xc01
 800924c:	4293      	cmp	r3, r2
 800924e:	d003      	beq.n	8009258 <Custom_STM_Event_Handler+0x48>
 8009250:	f640 4213 	movw	r2, #3091	; 0xc13
 8009254:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8009256:	e03a      	b.n	80092ce <Custom_STM_Event_Handler+0xbe>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	3302      	adds	r3, #2
 800925c:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_RedHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	885b      	ldrh	r3, [r3, #2]
 8009262:	b29b      	uxth	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	4b1f      	ldr	r3, [pc, #124]	; (80092e4 <Custom_STM_Event_Handler+0xd4>)
 8009268:	885b      	ldrh	r3, [r3, #2]
 800926a:	3301      	adds	r3, #1
 800926c:	429a      	cmp	r2, r3
 800926e:	d107      	bne.n	8009280 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            TIM1->CCR1=attribute_modified->Attr_Data[0];
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	7a1a      	ldrb	r2, [r3, #8]
 800927a:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <Custom_STM_Event_Handler+0xd8>)
 800927c:	635a      	str	r2, [r3, #52]	; 0x34
          break;
 800927e:	e025      	b.n	80092cc <Custom_STM_Event_Handler+0xbc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_BlueHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	885b      	ldrh	r3, [r3, #2]
 8009284:	b29b      	uxth	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <Custom_STM_Event_Handler+0xd4>)
 800928a:	889b      	ldrh	r3, [r3, #4]
 800928c:	3301      	adds	r3, #1
 800928e:	429a      	cmp	r2, r3
 8009290:	d107      	bne.n	80092a2 <Custom_STM_Event_Handler+0x92>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009292:	2301      	movs	r3, #1
 8009294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            TIM1->CCR2=attribute_modified->Attr_Data[0];
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	7a1a      	ldrb	r2, [r3, #8]
 800929c:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <Custom_STM_Event_Handler+0xd8>)
 800929e:	639a      	str	r2, [r3, #56]	; 0x38
          break;
 80092a0:	e014      	b.n	80092cc <Custom_STM_Event_Handler+0xbc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_GreenHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	4b0e      	ldr	r3, [pc, #56]	; (80092e4 <Custom_STM_Event_Handler+0xd4>)
 80092ac:	88db      	ldrh	r3, [r3, #6]
 80092ae:	3301      	adds	r3, #1
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d10b      	bne.n	80092cc <Custom_STM_Event_Handler+0xbc>
            return_value = SVCCTL_EvtAckFlowEnable;
 80092b4:	2301      	movs	r3, #1
 80092b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            TIM1->CCR3=attribute_modified->Attr_Data[0];
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	7a1a      	ldrb	r2, [r3, #8]
 80092be:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <Custom_STM_Event_Handler+0xd8>)
 80092c0:	63da      	str	r2, [r3, #60]	; 0x3c
          break;
 80092c2:	e003      	b.n	80092cc <Custom_STM_Event_Handler+0xbc>
          break;
 80092c4:	bf00      	nop
 80092c6:	e004      	b.n	80092d2 <Custom_STM_Event_Handler+0xc2>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80092c8:	bf00      	nop
 80092ca:	e002      	b.n	80092d2 <Custom_STM_Event_Handler+0xc2>
          break;
 80092cc:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80092ce:	e000      	b.n	80092d2 <Custom_STM_Event_Handler+0xc2>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80092d0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80092d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80092d6:	4618      	mov	r0, r3
 80092d8:	372c      	adds	r7, #44	; 0x2c
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	200006cc 	.word	0x200006cc
 80092e8:	40012c00 	.word	0x40012c00

080092ec <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08c      	sub	sp, #48	; 0x30
 80092f0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80092f2:	2392      	movs	r3, #146	; 0x92
 80092f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80092f6:	486c      	ldr	r0, [pc, #432]	; (80094a8 <SVCCTL_InitCustomSvc+0x1bc>)
 80092f8:	f7fe fd1e 	bl	8007d38 <SVCCTL_RegisterSvcHandler>
   *                              = 7
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors addded, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 7;
 80092fc:	2307      	movs	r3, #7
 80092fe:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BLE_RGB_UUID(uuid.Char_UUID_128);
 8009300:	238f      	movs	r3, #143	; 0x8f
 8009302:	713b      	strb	r3, [r7, #4]
 8009304:	23e5      	movs	r3, #229	; 0xe5
 8009306:	717b      	strb	r3, [r7, #5]
 8009308:	23b3      	movs	r3, #179	; 0xb3
 800930a:	71bb      	strb	r3, [r7, #6]
 800930c:	23d5      	movs	r3, #213	; 0xd5
 800930e:	71fb      	strb	r3, [r7, #7]
 8009310:	232e      	movs	r3, #46	; 0x2e
 8009312:	723b      	strb	r3, [r7, #8]
 8009314:	237f      	movs	r3, #127	; 0x7f
 8009316:	727b      	strb	r3, [r7, #9]
 8009318:	234a      	movs	r3, #74	; 0x4a
 800931a:	72bb      	strb	r3, [r7, #10]
 800931c:	2398      	movs	r3, #152	; 0x98
 800931e:	72fb      	strb	r3, [r7, #11]
 8009320:	232a      	movs	r3, #42	; 0x2a
 8009322:	733b      	strb	r3, [r7, #12]
 8009324:	2348      	movs	r3, #72	; 0x48
 8009326:	737b      	strb	r3, [r7, #13]
 8009328:	237a      	movs	r3, #122	; 0x7a
 800932a:	73bb      	strb	r3, [r7, #14]
 800932c:	23cc      	movs	r3, #204	; 0xcc
 800932e:	73fb      	strb	r3, [r7, #15]
 8009330:	2301      	movs	r3, #1
 8009332:	743b      	strb	r3, [r7, #16]
 8009334:	23ff      	movs	r3, #255	; 0xff
 8009336:	747b      	strb	r3, [r7, #17]
 8009338:	2300      	movs	r3, #0
 800933a:	74bb      	strb	r3, [r7, #18]
 800933c:	2300      	movs	r3, #0
 800933e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009340:	7dbb      	ldrb	r3, [r7, #22]
 8009342:	1d39      	adds	r1, r7, #4
 8009344:	4a59      	ldr	r2, [pc, #356]	; (80094ac <SVCCTL_InitCustomSvc+0x1c0>)
 8009346:	9200      	str	r2, [sp, #0]
 8009348:	2201      	movs	r2, #1
 800934a:	2002      	movs	r0, #2
 800934c:	f7fd ffbc 	bl	80072c8 <aci_gatt_add_service>
 8009350:	4603      	mov	r3, r0
 8009352:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  LED_RED
   */
  COPY_LED_RED_UUID(uuid.Char_UUID_128);
 8009354:	2319      	movs	r3, #25
 8009356:	713b      	strb	r3, [r7, #4]
 8009358:	23ed      	movs	r3, #237	; 0xed
 800935a:	717b      	strb	r3, [r7, #5]
 800935c:	2382      	movs	r3, #130	; 0x82
 800935e:	71bb      	strb	r3, [r7, #6]
 8009360:	23ae      	movs	r3, #174	; 0xae
 8009362:	71fb      	strb	r3, [r7, #7]
 8009364:	23ed      	movs	r3, #237	; 0xed
 8009366:	723b      	strb	r3, [r7, #8]
 8009368:	2321      	movs	r3, #33	; 0x21
 800936a:	727b      	strb	r3, [r7, #9]
 800936c:	234c      	movs	r3, #76	; 0x4c
 800936e:	72bb      	strb	r3, [r7, #10]
 8009370:	239d      	movs	r3, #157	; 0x9d
 8009372:	72fb      	strb	r3, [r7, #11]
 8009374:	2341      	movs	r3, #65	; 0x41
 8009376:	733b      	strb	r3, [r7, #12]
 8009378:	2345      	movs	r3, #69	; 0x45
 800937a:	737b      	strb	r3, [r7, #13]
 800937c:	2322      	movs	r3, #34	; 0x22
 800937e:	73bb      	strb	r3, [r7, #14]
 8009380:	238e      	movs	r3, #142	; 0x8e
 8009382:	73fb      	strb	r3, [r7, #15]
 8009384:	2302      	movs	r3, #2
 8009386:	743b      	strb	r3, [r7, #16]
 8009388:	23ff      	movs	r3, #255	; 0xff
 800938a:	747b      	strb	r3, [r7, #17]
 800938c:	2300      	movs	r3, #0
 800938e:	74bb      	strb	r3, [r7, #18]
 8009390:	2300      	movs	r3, #0
 8009392:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBle_RgbHdle,
 8009394:	4b45      	ldr	r3, [pc, #276]	; (80094ac <SVCCTL_InitCustomSvc+0x1c0>)
 8009396:	8818      	ldrh	r0, [r3, #0]
 8009398:	4b45      	ldr	r3, [pc, #276]	; (80094b0 <SVCCTL_InitCustomSvc+0x1c4>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	b29b      	uxth	r3, r3
 800939e:	1d3a      	adds	r2, r7, #4
 80093a0:	4944      	ldr	r1, [pc, #272]	; (80094b4 <SVCCTL_InitCustomSvc+0x1c8>)
 80093a2:	9105      	str	r1, [sp, #20]
 80093a4:	2101      	movs	r1, #1
 80093a6:	9104      	str	r1, [sp, #16]
 80093a8:	2110      	movs	r1, #16
 80093aa:	9103      	str	r1, [sp, #12]
 80093ac:	2101      	movs	r1, #1
 80093ae:	9102      	str	r1, [sp, #8]
 80093b0:	2100      	movs	r1, #0
 80093b2:	9101      	str	r1, [sp, #4]
 80093b4:	210a      	movs	r1, #10
 80093b6:	9100      	str	r1, [sp, #0]
 80093b8:	2102      	movs	r1, #2
 80093ba:	f7fe f85b 	bl	8007474 <aci_gatt_add_char>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  LED_BLUE
   */
  COPY_LED_BLUE_UUID(uuid.Char_UUID_128);
 80093c2:	2319      	movs	r3, #25
 80093c4:	713b      	strb	r3, [r7, #4]
 80093c6:	23ed      	movs	r3, #237	; 0xed
 80093c8:	717b      	strb	r3, [r7, #5]
 80093ca:	2382      	movs	r3, #130	; 0x82
 80093cc:	71bb      	strb	r3, [r7, #6]
 80093ce:	23ae      	movs	r3, #174	; 0xae
 80093d0:	71fb      	strb	r3, [r7, #7]
 80093d2:	23ed      	movs	r3, #237	; 0xed
 80093d4:	723b      	strb	r3, [r7, #8]
 80093d6:	2321      	movs	r3, #33	; 0x21
 80093d8:	727b      	strb	r3, [r7, #9]
 80093da:	234c      	movs	r3, #76	; 0x4c
 80093dc:	72bb      	strb	r3, [r7, #10]
 80093de:	239d      	movs	r3, #157	; 0x9d
 80093e0:	72fb      	strb	r3, [r7, #11]
 80093e2:	2341      	movs	r3, #65	; 0x41
 80093e4:	733b      	strb	r3, [r7, #12]
 80093e6:	2345      	movs	r3, #69	; 0x45
 80093e8:	737b      	strb	r3, [r7, #13]
 80093ea:	2322      	movs	r3, #34	; 0x22
 80093ec:	73bb      	strb	r3, [r7, #14]
 80093ee:	238e      	movs	r3, #142	; 0x8e
 80093f0:	73fb      	strb	r3, [r7, #15]
 80093f2:	2303      	movs	r3, #3
 80093f4:	743b      	strb	r3, [r7, #16]
 80093f6:	23ff      	movs	r3, #255	; 0xff
 80093f8:	747b      	strb	r3, [r7, #17]
 80093fa:	2300      	movs	r3, #0
 80093fc:	74bb      	strb	r3, [r7, #18]
 80093fe:	2300      	movs	r3, #0
 8009400:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBle_RgbHdle,
 8009402:	4b2a      	ldr	r3, [pc, #168]	; (80094ac <SVCCTL_InitCustomSvc+0x1c0>)
 8009404:	8818      	ldrh	r0, [r3, #0]
 8009406:	4b2c      	ldr	r3, [pc, #176]	; (80094b8 <SVCCTL_InitCustomSvc+0x1cc>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	1d3a      	adds	r2, r7, #4
 800940e:	492b      	ldr	r1, [pc, #172]	; (80094bc <SVCCTL_InitCustomSvc+0x1d0>)
 8009410:	9105      	str	r1, [sp, #20]
 8009412:	2101      	movs	r1, #1
 8009414:	9104      	str	r1, [sp, #16]
 8009416:	2110      	movs	r1, #16
 8009418:	9103      	str	r1, [sp, #12]
 800941a:	2101      	movs	r1, #1
 800941c:	9102      	str	r1, [sp, #8]
 800941e:	2100      	movs	r1, #0
 8009420:	9101      	str	r1, [sp, #4]
 8009422:	210a      	movs	r1, #10
 8009424:	9100      	str	r1, [sp, #0]
 8009426:	2102      	movs	r1, #2
 8009428:	f7fe f824 	bl	8007474 <aci_gatt_add_char>
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  LED_GREEN
   */
  COPY_LED_GREEN_UUID(uuid.Char_UUID_128);
 8009430:	2319      	movs	r3, #25
 8009432:	713b      	strb	r3, [r7, #4]
 8009434:	23ed      	movs	r3, #237	; 0xed
 8009436:	717b      	strb	r3, [r7, #5]
 8009438:	2382      	movs	r3, #130	; 0x82
 800943a:	71bb      	strb	r3, [r7, #6]
 800943c:	23ae      	movs	r3, #174	; 0xae
 800943e:	71fb      	strb	r3, [r7, #7]
 8009440:	23ed      	movs	r3, #237	; 0xed
 8009442:	723b      	strb	r3, [r7, #8]
 8009444:	2321      	movs	r3, #33	; 0x21
 8009446:	727b      	strb	r3, [r7, #9]
 8009448:	234c      	movs	r3, #76	; 0x4c
 800944a:	72bb      	strb	r3, [r7, #10]
 800944c:	239d      	movs	r3, #157	; 0x9d
 800944e:	72fb      	strb	r3, [r7, #11]
 8009450:	2341      	movs	r3, #65	; 0x41
 8009452:	733b      	strb	r3, [r7, #12]
 8009454:	2345      	movs	r3, #69	; 0x45
 8009456:	737b      	strb	r3, [r7, #13]
 8009458:	2322      	movs	r3, #34	; 0x22
 800945a:	73bb      	strb	r3, [r7, #14]
 800945c:	238e      	movs	r3, #142	; 0x8e
 800945e:	73fb      	strb	r3, [r7, #15]
 8009460:	2304      	movs	r3, #4
 8009462:	743b      	strb	r3, [r7, #16]
 8009464:	23ff      	movs	r3, #255	; 0xff
 8009466:	747b      	strb	r3, [r7, #17]
 8009468:	2300      	movs	r3, #0
 800946a:	74bb      	strb	r3, [r7, #18]
 800946c:	2300      	movs	r3, #0
 800946e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBle_RgbHdle,
 8009470:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <SVCCTL_InitCustomSvc+0x1c0>)
 8009472:	8818      	ldrh	r0, [r3, #0]
 8009474:	4b12      	ldr	r3, [pc, #72]	; (80094c0 <SVCCTL_InitCustomSvc+0x1d4>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	b29b      	uxth	r3, r3
 800947a:	1d3a      	adds	r2, r7, #4
 800947c:	4911      	ldr	r1, [pc, #68]	; (80094c4 <SVCCTL_InitCustomSvc+0x1d8>)
 800947e:	9105      	str	r1, [sp, #20]
 8009480:	2101      	movs	r1, #1
 8009482:	9104      	str	r1, [sp, #16]
 8009484:	2110      	movs	r1, #16
 8009486:	9103      	str	r1, [sp, #12]
 8009488:	2101      	movs	r1, #1
 800948a:	9102      	str	r1, [sp, #8]
 800948c:	2100      	movs	r1, #0
 800948e:	9101      	str	r1, [sp, #4]
 8009490:	210a      	movs	r1, #10
 8009492:	9100      	str	r1, [sp, #0]
 8009494:	2102      	movs	r1, #2
 8009496:	f7fd ffed 	bl	8007474 <aci_gatt_add_char>
 800949a:	4603      	mov	r3, r0
 800949c:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800949e:	bf00      	nop
}
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	08009211 	.word	0x08009211
 80094ac:	200006cc 	.word	0x200006cc
 80094b0:	2000001d 	.word	0x2000001d
 80094b4:	200006ce 	.word	0x200006ce
 80094b8:	2000001e 	.word	0x2000001e
 80094bc:	200006d0 	.word	0x200006d0
 80094c0:	2000001f 	.word	0x2000001f
 80094c4:	200006d2 	.word	0x200006d2

080094c8 <LL_PWR_EnableBootC2>:
{
 80094c8:	b480      	push	{r7}
 80094ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80094cc:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <LL_PWR_EnableBootC2+0x1c>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	4a04      	ldr	r2, [pc, #16]	; (80094e4 <LL_PWR_EnableBootC2+0x1c>)
 80094d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d6:	60d3      	str	r3, [r2, #12]
}
 80094d8:	bf00      	nop
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	58000400 	.word	0x58000400

080094e8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80094f0:	4b06      	ldr	r3, [pc, #24]	; (800950c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80094f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80094f6:	4905      	ldr	r1, [pc, #20]	; (800950c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	58000800 	.word	0x58000800

08009510 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009518:	4b05      	ldr	r3, [pc, #20]	; (8009530 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800951a:	6a1a      	ldr	r2, [r3, #32]
 800951c:	4904      	ldr	r1, [pc, #16]	; (8009530 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4313      	orrs	r3, r2
 8009522:	620b      	str	r3, [r1, #32]
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	58000800 	.word	0x58000800

08009534 <LL_AHB3_GRP1_EnableClock>:
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800953c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4313      	orrs	r3, r2
 800954a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800954c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4013      	ands	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009558:	68fb      	ldr	r3, [r7, #12]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800956e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009572:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4313      	orrs	r3, r2
 800957e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009586:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4013      	ands	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009590:	68fb      	ldr	r3, [r7, #12]
}
 8009592:	bf00      	nop
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <LL_C1_IPCC_EnableIT_TXF>:
{
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	601a      	str	r2, [r3, #0]
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <LL_C1_IPCC_EnableIT_RXO>:
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f043 0201 	orr.w	r2, r3, #1
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	601a      	str	r2, [r3, #0]
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <LL_C1_IPCC_EnableTransmitChannel>:
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	041b      	lsls	r3, r3, #16
 80095f0:	43db      	mvns	r3, r3
 80095f2:	401a      	ands	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	605a      	str	r2, [r3, #4]
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	041b      	lsls	r3, r3, #16
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	605a      	str	r2, [r3, #4]
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	43db      	mvns	r3, r3
 800963a:	401a      	ands	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	605a      	str	r2, [r3, #4]
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	609a      	str	r2, [r3, #8]
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	041a      	lsls	r2, r3, #16
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	609a      	str	r2, [r3, #8]
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	4013      	ands	r3, r2
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d101      	bne.n	80096a2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800969e:	2301      	movs	r3, #1
 80096a0:	e000      	b.n	80096a4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	69da      	ldr	r2, [r3, #28]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	4013      	ands	r3, r2
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d101      	bne.n	80096cc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80096c8:	2301      	movs	r3, #1
 80096ca:	e000      	b.n	80096ce <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
	...

080096dc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80096e0:	2102      	movs	r1, #2
 80096e2:	4818      	ldr	r0, [pc, #96]	; (8009744 <HW_IPCC_Rx_Handler+0x68>)
 80096e4:	f7ff ffe4 	bl	80096b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d008      	beq.n	8009700 <HW_IPCC_Rx_Handler+0x24>
 80096ee:	4b15      	ldr	r3, [pc, #84]	; (8009744 <HW_IPCC_Rx_Handler+0x68>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d102      	bne.n	8009700 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80096fa:	f000 f8d5 	bl	80098a8 <HW_IPCC_SYS_EvtHandler>
 80096fe:	e01e      	b.n	800973e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009700:	2101      	movs	r1, #1
 8009702:	4810      	ldr	r0, [pc, #64]	; (8009744 <HW_IPCC_Rx_Handler+0x68>)
 8009704:	f7ff ffd4 	bl	80096b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d008      	beq.n	8009720 <HW_IPCC_Rx_Handler+0x44>
 800970e:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <HW_IPCC_Rx_Handler+0x68>)
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d102      	bne.n	8009720 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800971a:	f000 f889 	bl	8009830 <HW_IPCC_BLE_EvtHandler>
 800971e:	e00e      	b.n	800973e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009720:	2108      	movs	r1, #8
 8009722:	4808      	ldr	r0, [pc, #32]	; (8009744 <HW_IPCC_Rx_Handler+0x68>)
 8009724:	f7ff ffc4 	bl	80096b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d008      	beq.n	8009740 <HW_IPCC_Rx_Handler+0x64>
 800972e:	4b05      	ldr	r3, [pc, #20]	; (8009744 <HW_IPCC_Rx_Handler+0x68>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800973a:	f000 f901 	bl	8009940 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800973e:	bf00      	nop
 8009740:	bf00      	nop
}
 8009742:	bd80      	pop	{r7, pc}
 8009744:	58000c00 	.word	0x58000c00

08009748 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800974c:	2102      	movs	r1, #2
 800974e:	4818      	ldr	r0, [pc, #96]	; (80097b0 <HW_IPCC_Tx_Handler+0x68>)
 8009750:	f7ff ff99 	bl	8009686 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d108      	bne.n	800976c <HW_IPCC_Tx_Handler+0x24>
 800975a:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <HW_IPCC_Tx_Handler+0x68>)
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009766:	f000 f893 	bl	8009890 <HW_IPCC_SYS_CmdEvtHandler>
 800976a:	e01e      	b.n	80097aa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800976c:	2108      	movs	r1, #8
 800976e:	4810      	ldr	r0, [pc, #64]	; (80097b0 <HW_IPCC_Tx_Handler+0x68>)
 8009770:	f7ff ff89 	bl	8009686 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d108      	bne.n	800978c <HW_IPCC_Tx_Handler+0x44>
 800977a:	4b0d      	ldr	r3, [pc, #52]	; (80097b0 <HW_IPCC_Tx_Handler+0x68>)
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d102      	bne.n	800978c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009786:	f000 f8bd 	bl	8009904 <HW_IPCC_MM_FreeBufHandler>
 800978a:	e00e      	b.n	80097aa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800978c:	2120      	movs	r1, #32
 800978e:	4808      	ldr	r0, [pc, #32]	; (80097b0 <HW_IPCC_Tx_Handler+0x68>)
 8009790:	f7ff ff79 	bl	8009686 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d108      	bne.n	80097ac <HW_IPCC_Tx_Handler+0x64>
 800979a:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <HW_IPCC_Tx_Handler+0x68>)
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80097a6:	f000 f84f 	bl	8009848 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80097aa:	bf00      	nop
 80097ac:	bf00      	nop
}
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	58000c00 	.word	0x58000c00

080097b4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80097b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80097bc:	f7ff fed3 	bl	8009566 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80097c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80097c4:	f7ff fea4 	bl	8009510 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80097c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80097cc:	f7ff fe8c 	bl	80094e8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80097d0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80097d2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80097d4:	f7ff fe78 	bl	80094c8 <LL_PWR_EnableBootC2>

  return;
 80097d8:	bf00      	nop
}
 80097da:	bd80      	pop	{r7, pc}

080097dc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80097e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80097e4:	f7ff fea6 	bl	8009534 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80097e8:	4806      	ldr	r0, [pc, #24]	; (8009804 <HW_IPCC_Init+0x28>)
 80097ea:	f7ff fee8 	bl	80095be <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80097ee:	4805      	ldr	r0, [pc, #20]	; (8009804 <HW_IPCC_Init+0x28>)
 80097f0:	f7ff fed5 	bl	800959e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80097f4:	202c      	movs	r0, #44	; 0x2c
 80097f6:	f7f8 f9fe 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80097fa:	202d      	movs	r0, #45	; 0x2d
 80097fc:	f7f8 f9fb 	bl	8001bf6 <HAL_NVIC_EnableIRQ>

  return;
 8009800:	bf00      	nop
}
 8009802:	bd80      	pop	{r7, pc}
 8009804:	58000c00 	.word	0x58000c00

08009808 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800980c:	2101      	movs	r1, #1
 800980e:	4802      	ldr	r0, [pc, #8]	; (8009818 <HW_IPCC_BLE_Init+0x10>)
 8009810:	f7ff ff0a 	bl	8009628 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009814:	bf00      	nop
}
 8009816:	bd80      	pop	{r7, pc}
 8009818:	58000c00 	.word	0x58000c00

0800981c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009820:	2101      	movs	r1, #1
 8009822:	4802      	ldr	r0, [pc, #8]	; (800982c <HW_IPCC_BLE_SendCmd+0x10>)
 8009824:	f7ff ff20 	bl	8009668 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009828:	bf00      	nop
}
 800982a:	bd80      	pop	{r7, pc}
 800982c:	58000c00 	.word	0x58000c00

08009830 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009834:	f7fe ff44 	bl	80086c0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009838:	2101      	movs	r1, #1
 800983a:	4802      	ldr	r0, [pc, #8]	; (8009844 <HW_IPCC_BLE_EvtHandler+0x14>)
 800983c:	f7ff ff06 	bl	800964c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009840:	bf00      	nop
}
 8009842:	bd80      	pop	{r7, pc}
 8009844:	58000c00 	.word	0x58000c00

08009848 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800984c:	2120      	movs	r1, #32
 800984e:	4803      	ldr	r0, [pc, #12]	; (800985c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009850:	f7ff fed8 	bl	8009604 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009854:	f7fe ff64 	bl	8008720 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009858:	bf00      	nop
}
 800985a:	bd80      	pop	{r7, pc}
 800985c:	58000c00 	.word	0x58000c00

08009860 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009864:	2102      	movs	r1, #2
 8009866:	4802      	ldr	r0, [pc, #8]	; (8009870 <HW_IPCC_SYS_Init+0x10>)
 8009868:	f7ff fede 	bl	8009628 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800986c:	bf00      	nop
}
 800986e:	bd80      	pop	{r7, pc}
 8009870:	58000c00 	.word	0x58000c00

08009874 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009878:	2102      	movs	r1, #2
 800987a:	4804      	ldr	r0, [pc, #16]	; (800988c <HW_IPCC_SYS_SendCmd+0x18>)
 800987c:	f7ff fef4 	bl	8009668 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009880:	2102      	movs	r1, #2
 8009882:	4802      	ldr	r0, [pc, #8]	; (800988c <HW_IPCC_SYS_SendCmd+0x18>)
 8009884:	f7ff feab 	bl	80095de <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009888:	bf00      	nop
}
 800988a:	bd80      	pop	{r7, pc}
 800988c:	58000c00 	.word	0x58000c00

08009890 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009894:	2102      	movs	r1, #2
 8009896:	4803      	ldr	r0, [pc, #12]	; (80098a4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009898:	f7ff feb4 	bl	8009604 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800989c:	f7fe ff90 	bl	80087c0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80098a0:	bf00      	nop
}
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	58000c00 	.word	0x58000c00

080098a8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80098ac:	f7fe ff9e 	bl	80087ec <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80098b0:	2102      	movs	r1, #2
 80098b2:	4802      	ldr	r0, [pc, #8]	; (80098bc <HW_IPCC_SYS_EvtHandler+0x14>)
 80098b4:	f7ff feca 	bl	800964c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80098b8:	bf00      	nop
}
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	58000c00 	.word	0x58000c00

080098c0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80098c8:	2108      	movs	r1, #8
 80098ca:	480c      	ldr	r0, [pc, #48]	; (80098fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80098cc:	f7ff fedb 	bl	8009686 <LL_C1_IPCC_IsActiveFlag_CHx>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d007      	beq.n	80098e6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80098d6:	4a0a      	ldr	r2, [pc, #40]	; (8009900 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098dc:	2108      	movs	r1, #8
 80098de:	4807      	ldr	r0, [pc, #28]	; (80098fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80098e0:	f7ff fe7d 	bl	80095de <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80098e4:	e006      	b.n	80098f4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098ea:	2108      	movs	r1, #8
 80098ec:	4803      	ldr	r0, [pc, #12]	; (80098fc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80098ee:	f7ff febb 	bl	8009668 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80098f2:	bf00      	nop
}
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	58000c00 	.word	0x58000c00
 8009900:	200006d4 	.word	0x200006d4

08009904 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009908:	2108      	movs	r1, #8
 800990a:	4806      	ldr	r0, [pc, #24]	; (8009924 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800990c:	f7ff fe7a 	bl	8009604 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009910:	4b05      	ldr	r3, [pc, #20]	; (8009928 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009916:	2108      	movs	r1, #8
 8009918:	4802      	ldr	r0, [pc, #8]	; (8009924 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800991a:	f7ff fea5 	bl	8009668 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800991e:	bf00      	nop
}
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	58000c00 	.word	0x58000c00
 8009928:	200006d4 	.word	0x200006d4

0800992c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009930:	2108      	movs	r1, #8
 8009932:	4802      	ldr	r0, [pc, #8]	; (800993c <HW_IPCC_TRACES_Init+0x10>)
 8009934:	f7ff fe78 	bl	8009628 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009938:	bf00      	nop
}
 800993a:	bd80      	pop	{r7, pc}
 800993c:	58000c00 	.word	0x58000c00

08009940 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009944:	f7fe fffa 	bl	800893c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009948:	2108      	movs	r1, #8
 800994a:	4802      	ldr	r0, [pc, #8]	; (8009954 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800994c:	f7ff fe7e 	bl	800964c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009950:	bf00      	nop
}
 8009952:	bd80      	pop	{r7, pc}
 8009954:	58000c00 	.word	0x58000c00

08009958 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800995c:	4b05      	ldr	r3, [pc, #20]	; (8009974 <UTIL_LPM_Init+0x1c>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009962:	4b05      	ldr	r3, [pc, #20]	; (8009978 <UTIL_LPM_Init+0x20>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009968:	bf00      	nop
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	200006d8 	.word	0x200006d8
 8009978:	200006dc 	.word	0x200006dc

0800997c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009988:	f3ef 8310 	mrs	r3, PRIMASK
 800998c:	613b      	str	r3, [r7, #16]
  return(result);
 800998e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009992:	b672      	cpsid	i
}
 8009994:	bf00      	nop
  
  switch(state)
 8009996:	78fb      	ldrb	r3, [r7, #3]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d008      	beq.n	80099ae <UTIL_LPM_SetOffMode+0x32>
 800999c:	2b01      	cmp	r3, #1
 800999e:	d10e      	bne.n	80099be <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80099a0:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <UTIL_LPM_SetOffMode+0x5c>)
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	4a0b      	ldr	r2, [pc, #44]	; (80099d8 <UTIL_LPM_SetOffMode+0x5c>)
 80099aa:	6013      	str	r3, [r2, #0]
      break;
 80099ac:	e008      	b.n	80099c0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	43da      	mvns	r2, r3
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <UTIL_LPM_SetOffMode+0x5c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4013      	ands	r3, r2
 80099b8:	4a07      	ldr	r2, [pc, #28]	; (80099d8 <UTIL_LPM_SetOffMode+0x5c>)
 80099ba:	6013      	str	r3, [r2, #0]
      break;
 80099bc:	e000      	b.n	80099c0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80099be:	bf00      	nop
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f383 8810 	msr	PRIMASK, r3
}
 80099ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80099cc:	bf00      	nop
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	200006dc 	.word	0x200006dc

080099dc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b090      	sub	sp, #64	; 0x40
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80099e4:	4b73      	ldr	r3, [pc, #460]	; (8009bb4 <UTIL_SEQ_Run+0x1d8>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80099ea:	4b72      	ldr	r3, [pc, #456]	; (8009bb4 <UTIL_SEQ_Run+0x1d8>)
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4013      	ands	r3, r2
 80099f2:	4a70      	ldr	r2, [pc, #448]	; (8009bb4 <UTIL_SEQ_Run+0x1d8>)
 80099f4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80099f6:	4b70      	ldr	r3, [pc, #448]	; (8009bb8 <UTIL_SEQ_Run+0x1dc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80099fc:	4b6f      	ldr	r3, [pc, #444]	; (8009bbc <UTIL_SEQ_Run+0x1e0>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009a02:	4b6f      	ldr	r3, [pc, #444]	; (8009bc0 <UTIL_SEQ_Run+0x1e4>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009a08:	4b6e      	ldr	r3, [pc, #440]	; (8009bc4 <UTIL_SEQ_Run+0x1e8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009a0e:	e08d      	b.n	8009b2c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009a14:	e002      	b.n	8009a1c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a18:	3301      	adds	r3, #1
 8009a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009a1c:	4a6a      	ldr	r2, [pc, #424]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	401a      	ands	r2, r3
 8009a28:	4b62      	ldr	r3, [pc, #392]	; (8009bb4 <UTIL_SEQ_Run+0x1d8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0f1      	beq.n	8009a16 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009a32:	4a65      	ldr	r2, [pc, #404]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a36:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	401a      	ands	r2, r3
 8009a3e:	4b5d      	ldr	r3, [pc, #372]	; (8009bb4 <UTIL_SEQ_Run+0x1d8>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4013      	ands	r3, r2
 8009a44:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009a46:	4a60      	ldr	r2, [pc, #384]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009a58:	4a5b      	ldr	r2, [pc, #364]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5c:	00db      	lsls	r3, r3, #3
 8009a5e:	4413      	add	r3, r2
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295
 8009a64:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009a66:	4a58      	ldr	r2, [pc, #352]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	4013      	ands	r3, r2
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 f9b3 	bl	8009de0 <SEQ_BitPosition>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b53      	ldr	r3, [pc, #332]	; (8009bcc <UTIL_SEQ_Run+0x1f0>)
 8009a80:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009a82:	4a51      	ldr	r2, [pc, #324]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	4413      	add	r3, r2
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	4b4f      	ldr	r3, [pc, #316]	; (8009bcc <UTIL_SEQ_Run+0x1f0>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2101      	movs	r1, #1
 8009a92:	fa01 f303 	lsl.w	r3, r1, r3
 8009a96:	43db      	mvns	r3, r3
 8009a98:	401a      	ands	r2, r3
 8009a9a:	494b      	ldr	r1, [pc, #300]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9e:	00db      	lsls	r3, r3, #3
 8009aa0:	440b      	add	r3, r1
 8009aa2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8009aa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8009aaa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009aac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aae:	b672      	cpsid	i
}
 8009ab0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009ab2:	4b46      	ldr	r3, [pc, #280]	; (8009bcc <UTIL_SEQ_Run+0x1f0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8009abc:	43da      	mvns	r2, r3
 8009abe:	4b3e      	ldr	r3, [pc, #248]	; (8009bb8 <UTIL_SEQ_Run+0x1dc>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	4a3c      	ldr	r2, [pc, #240]	; (8009bb8 <UTIL_SEQ_Run+0x1dc>)
 8009ac6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009ac8:	2302      	movs	r3, #2
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009acc:	e013      	b.n	8009af6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	4a3d      	ldr	r2, [pc, #244]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009ad4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009ad8:	4b3c      	ldr	r3, [pc, #240]	; (8009bcc <UTIL_SEQ_Run+0x1f0>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2201      	movs	r2, #1
 8009ade:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae2:	43da      	mvns	r2, r3
 8009ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	400a      	ands	r2, r1
 8009aea:	4937      	ldr	r1, [pc, #220]	; (8009bc8 <UTIL_SEQ_Run+0x1ec>)
 8009aec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af2:	3b01      	subs	r3, #1
 8009af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e8      	bne.n	8009ace <UTIL_SEQ_Run+0xf2>
 8009afc:	6a3b      	ldr	r3, [r7, #32]
 8009afe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f383 8810 	msr	PRIMASK, r3
}
 8009b06:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009b08:	4b30      	ldr	r3, [pc, #192]	; (8009bcc <UTIL_SEQ_Run+0x1f0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a30      	ldr	r2, [pc, #192]	; (8009bd0 <UTIL_SEQ_Run+0x1f4>)
 8009b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b12:	4798      	blx	r3

    local_taskset = TaskSet;
 8009b14:	4b28      	ldr	r3, [pc, #160]	; (8009bb8 <UTIL_SEQ_Run+0x1dc>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8009b1a:	4b28      	ldr	r3, [pc, #160]	; (8009bbc <UTIL_SEQ_Run+0x1e0>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009b20:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <UTIL_SEQ_Run+0x1e4>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009b26:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <UTIL_SEQ_Run+0x1e8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	401a      	ands	r2, r3
 8009b32:	4b20      	ldr	r3, [pc, #128]	; (8009bb4 <UTIL_SEQ_Run+0x1d8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4013      	ands	r3, r2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d005      	beq.n	8009b48 <UTIL_SEQ_Run+0x16c>
 8009b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b40:	4013      	ands	r3, r2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f43f af64 	beq.w	8009a10 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009b48:	4b20      	ldr	r3, [pc, #128]	; (8009bcc <UTIL_SEQ_Run+0x1f0>)
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009b50:	f000 f938 	bl	8009dc4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b54:	f3ef 8310 	mrs	r3, PRIMASK
 8009b58:	613b      	str	r3, [r7, #16]
  return(result);
 8009b5a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009b5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b5e:	b672      	cpsid	i
}
 8009b60:	bf00      	nop
  local_taskset = TaskSet;
 8009b62:	4b15      	ldr	r3, [pc, #84]	; (8009bb8 <UTIL_SEQ_Run+0x1dc>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009b68:	4b14      	ldr	r3, [pc, #80]	; (8009bbc <UTIL_SEQ_Run+0x1e0>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009b6e:	4b14      	ldr	r3, [pc, #80]	; (8009bc0 <UTIL_SEQ_Run+0x1e4>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b78:	401a      	ands	r2, r3
 8009b7a:	4b0e      	ldr	r3, [pc, #56]	; (8009bb4 <UTIL_SEQ_Run+0x1d8>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4013      	ands	r3, r2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d107      	bne.n	8009b94 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009b84:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <UTIL_SEQ_Run+0x1e8>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009b90:	f7f6 ff7f 	bl	8000a92 <UTIL_SEQ_Idle>
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f383 8810 	msr	PRIMASK, r3
}
 8009b9e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009ba0:	f000 f917 	bl	8009dd2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009ba4:	4a03      	ldr	r2, [pc, #12]	; (8009bb4 <UTIL_SEQ_Run+0x1d8>)
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	6013      	str	r3, [r2, #0]

  return;
 8009baa:	bf00      	nop
}
 8009bac:	3740      	adds	r7, #64	; 0x40
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000024 	.word	0x20000024
 8009bb8:	200006e0 	.word	0x200006e0
 8009bbc:	200006e4 	.word	0x200006e4
 8009bc0:	20000020 	.word	0x20000020
 8009bc4:	200006e8 	.word	0x200006e8
 8009bc8:	20000770 	.word	0x20000770
 8009bcc:	200006ec 	.word	0x200006ec
 8009bd0:	200006f0 	.word	0x200006f0

08009bd4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009be0:	f3ef 8310 	mrs	r3, PRIMASK
 8009be4:	617b      	str	r3, [r7, #20]
  return(result);
 8009be6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009be8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bea:	b672      	cpsid	i
}
 8009bec:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f8f6 	bl	8009de0 <SEQ_BitPosition>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4a06      	ldr	r2, [pc, #24]	; (8009c14 <UTIL_SEQ_RegTask+0x40>)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	f383 8810 	msr	PRIMASK, r3
}
 8009c0a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009c0c:	bf00      	nop
}
 8009c0e:	3720      	adds	r7, #32
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200006f0 	.word	0x200006f0

08009c18 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c22:	f3ef 8310 	mrs	r3, PRIMASK
 8009c26:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c28:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009c2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c2c:	b672      	cpsid	i
}
 8009c2e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009c30:	4b0d      	ldr	r3, [pc, #52]	; (8009c68 <UTIL_SEQ_SetTask+0x50>)
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	4a0b      	ldr	r2, [pc, #44]	; (8009c68 <UTIL_SEQ_SetTask+0x50>)
 8009c3a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009c3c:	4a0b      	ldr	r2, [pc, #44]	; (8009c6c <UTIL_SEQ_SetTask+0x54>)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	431a      	orrs	r2, r3
 8009c48:	4908      	ldr	r1, [pc, #32]	; (8009c6c <UTIL_SEQ_SetTask+0x54>)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f383 8810 	msr	PRIMASK, r3
}
 8009c5a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009c5c:	bf00      	nop
}
 8009c5e:	371c      	adds	r7, #28
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	200006e0 	.word	0x200006e0
 8009c6c:	20000770 	.word	0x20000770

08009c70 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c78:	f3ef 8310 	mrs	r3, PRIMASK
 8009c7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c82:	b672      	cpsid	i
}
 8009c84:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	43da      	mvns	r2, r3
 8009c8a:	4b08      	ldr	r3, [pc, #32]	; (8009cac <UTIL_SEQ_PauseTask+0x3c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	4a06      	ldr	r2, [pc, #24]	; (8009cac <UTIL_SEQ_PauseTask+0x3c>)
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f383 8810 	msr	PRIMASK, r3
}
 8009c9e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009ca0:	bf00      	nop
}
 8009ca2:	371c      	adds	r7, #28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20000020 	.word	0x20000020

08009cb0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cc2:	b672      	cpsid	i
}
 8009cc4:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009cc6:	4b09      	ldr	r3, [pc, #36]	; (8009cec <UTIL_SEQ_ResumeTask+0x3c>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	4a07      	ldr	r2, [pc, #28]	; (8009cec <UTIL_SEQ_ResumeTask+0x3c>)
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f383 8810 	msr	PRIMASK, r3
}
 8009cdc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009cde:	bf00      	nop
}
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	20000020 	.word	0x20000020

08009cf0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d02:	b672      	cpsid	i
}
 8009d04:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009d06:	4b09      	ldr	r3, [pc, #36]	; (8009d2c <UTIL_SEQ_SetEvt+0x3c>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	4a07      	ldr	r2, [pc, #28]	; (8009d2c <UTIL_SEQ_SetEvt+0x3c>)
 8009d10:	6013      	str	r3, [r2, #0]
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f383 8810 	msr	PRIMASK, r3
}
 8009d1c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009d1e:	bf00      	nop
}
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	200006e4 	.word	0x200006e4

08009d30 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b088      	sub	sp, #32
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009d38:	4b1f      	ldr	r3, [pc, #124]	; (8009db8 <UTIL_SEQ_WaitEvt+0x88>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009d3e:	4b1e      	ldr	r3, [pc, #120]	; (8009db8 <UTIL_SEQ_WaitEvt+0x88>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d46:	d102      	bne.n	8009d4e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	61fb      	str	r3, [r7, #28]
 8009d4c:	e005      	b.n	8009d5a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009d4e:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <UTIL_SEQ_WaitEvt+0x88>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2201      	movs	r2, #1
 8009d54:	fa02 f303 	lsl.w	r3, r2, r3
 8009d58:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009d5a:	4b18      	ldr	r3, [pc, #96]	; (8009dbc <UTIL_SEQ_WaitEvt+0x8c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009d60:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <UTIL_SEQ_WaitEvt+0x8c>)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009d66:	e003      	b.n	8009d70 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	69f8      	ldr	r0, [r7, #28]
 8009d6c:	f7f6 fe98 	bl	8000aa0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009d70:	4b13      	ldr	r3, [pc, #76]	; (8009dc0 <UTIL_SEQ_WaitEvt+0x90>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4013      	ands	r3, r2
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0f5      	beq.n	8009d68 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009d7c:	4a0e      	ldr	r2, [pc, #56]	; (8009db8 <UTIL_SEQ_WaitEvt+0x88>)
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d82:	f3ef 8310 	mrs	r3, PRIMASK
 8009d86:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d88:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d8c:	b672      	cpsid	i
}
 8009d8e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	43da      	mvns	r2, r3
 8009d94:	4b0a      	ldr	r3, [pc, #40]	; (8009dc0 <UTIL_SEQ_WaitEvt+0x90>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4013      	ands	r3, r2
 8009d9a:	4a09      	ldr	r2, [pc, #36]	; (8009dc0 <UTIL_SEQ_WaitEvt+0x90>)
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f383 8810 	msr	PRIMASK, r3
}
 8009da8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009daa:	4a04      	ldr	r2, [pc, #16]	; (8009dbc <UTIL_SEQ_WaitEvt+0x8c>)
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	6013      	str	r3, [r2, #0]
  return;
 8009db0:	bf00      	nop
}
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	200006ec 	.word	0x200006ec
 8009dbc:	200006e8 	.word	0x200006e8
 8009dc0:	200006e4 	.word	0x200006e4

08009dc4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009dc8:	bf00      	nop
}
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009dd6:	bf00      	nop
}
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	0c1b      	lsrs	r3, r3, #16
 8009df4:	041b      	lsls	r3, r3, #16
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d104      	bne.n	8009e04 <SEQ_BitPosition+0x24>
 8009dfa:	2310      	movs	r3, #16
 8009dfc:	73fb      	strb	r3, [r7, #15]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	041b      	lsls	r3, r3, #16
 8009e02:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d105      	bne.n	8009e1a <SEQ_BitPosition+0x3a>
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	3308      	adds	r3, #8
 8009e12:	73fb      	strb	r3, [r7, #15]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	021b      	lsls	r3, r3, #8
 8009e18:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d105      	bne.n	8009e30 <SEQ_BitPosition+0x50>
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	3304      	adds	r3, #4
 8009e28:	73fb      	strb	r3, [r7, #15]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	0f1b      	lsrs	r3, r3, #28
 8009e34:	4a07      	ldr	r2, [pc, #28]	; (8009e54 <SEQ_BitPosition+0x74>)
 8009e36:	5cd2      	ldrb	r2, [r2, r3]
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	f1c3 031f 	rsb	r3, r3, #31
 8009e44:	b2db      	uxtb	r3, r3
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	0800a194 	.word	0x0800a194

08009e58 <memset>:
 8009e58:	4402      	add	r2, r0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d100      	bne.n	8009e62 <memset+0xa>
 8009e60:	4770      	bx	lr
 8009e62:	f803 1b01 	strb.w	r1, [r3], #1
 8009e66:	e7f9      	b.n	8009e5c <memset+0x4>

08009e68 <__libc_init_array>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	4d0d      	ldr	r5, [pc, #52]	; (8009ea0 <__libc_init_array+0x38>)
 8009e6c:	4c0d      	ldr	r4, [pc, #52]	; (8009ea4 <__libc_init_array+0x3c>)
 8009e6e:	1b64      	subs	r4, r4, r5
 8009e70:	10a4      	asrs	r4, r4, #2
 8009e72:	2600      	movs	r6, #0
 8009e74:	42a6      	cmp	r6, r4
 8009e76:	d109      	bne.n	8009e8c <__libc_init_array+0x24>
 8009e78:	4d0b      	ldr	r5, [pc, #44]	; (8009ea8 <__libc_init_array+0x40>)
 8009e7a:	4c0c      	ldr	r4, [pc, #48]	; (8009eac <__libc_init_array+0x44>)
 8009e7c:	f000 f826 	bl	8009ecc <_init>
 8009e80:	1b64      	subs	r4, r4, r5
 8009e82:	10a4      	asrs	r4, r4, #2
 8009e84:	2600      	movs	r6, #0
 8009e86:	42a6      	cmp	r6, r4
 8009e88:	d105      	bne.n	8009e96 <__libc_init_array+0x2e>
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e90:	4798      	blx	r3
 8009e92:	3601      	adds	r6, #1
 8009e94:	e7ee      	b.n	8009e74 <__libc_init_array+0xc>
 8009e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e9a:	4798      	blx	r3
 8009e9c:	3601      	adds	r6, #1
 8009e9e:	e7f2      	b.n	8009e86 <__libc_init_array+0x1e>
 8009ea0:	0800a1ac 	.word	0x0800a1ac
 8009ea4:	0800a1ac 	.word	0x0800a1ac
 8009ea8:	0800a1ac 	.word	0x0800a1ac
 8009eac:	0800a1b0 	.word	0x0800a1b0

08009eb0 <memcpy>:
 8009eb0:	440a      	add	r2, r1
 8009eb2:	4291      	cmp	r1, r2
 8009eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009eb8:	d100      	bne.n	8009ebc <memcpy+0xc>
 8009eba:	4770      	bx	lr
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ec6:	4291      	cmp	r1, r2
 8009ec8:	d1f9      	bne.n	8009ebe <memcpy+0xe>
 8009eca:	bd10      	pop	{r4, pc}

08009ecc <_init>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_fini>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr
